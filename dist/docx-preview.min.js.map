{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmark.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/footnotes/footnote.ts","webpack://docx/./src/footnotes/footnotes-part.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__290__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text);\r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\r\n    return xml.elements(root).map(e => <Relationship>{\r\n        id: xml.attr(e, \"Id\"),\r\n        type: xml.attr(e, \"Type\"),\r\n        target: xml.attr(e, \"Target\"),\r\n        targetMode: xml.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement, FootnoteReferenceElement\r\n} from './document/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './document/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport { parseSectionProperties } from './document/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { RunElement } from './document/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './document/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { WmlFooter } from './footer/footer';\r\nimport { WmlHeader } from './header/header';\r\nimport { WmlFootnote } from './footnotes/footnote';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport interface DocumentParserOptions {\r\n    ignoreWidth: boolean;\r\n    debug: boolean;\r\n}\r\n\r\nexport class DocumentParser {\r\n    options: DocumentParserOptions;\r\n\r\n    constructor(options?: Partial<DocumentParserOptions>) {\r\n        this.options = {\r\n            ignoreWidth: false,\r\n            debug: false,\r\n            ...options   \r\n        };\r\n    }\r\n\r\n    parseFootnotes(xmlDoc: Element): WmlFootnote[] {\r\n        var result = [];\r\n\r\n        for (let el of globalXmlParser.elements(xmlDoc, \"footnote\")) {\r\n            const footnote = new WmlFootnote();\r\n            footnote.id = globalXmlParser.attr(el, \"id\");\r\n            footnote.footnoteType = globalXmlParser.attr(el, \"type\");\r\n            footnote.children = this.parseBodyElements(el);\r\n            result.push(footnote);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseFooter(xmlDoc: Element): WmlFooter {\r\n        var result = new WmlFooter();\r\n        result.children = this.parseBodyElements(xmlDoc);\r\n        return result;\r\n    }\r\n\r\n    parseHeader(xmlDoc: Element): WmlHeader {\r\n        var result = new WmlHeader();\r\n        result.children = this.parseBodyElements(xmlDoc);\r\n        return result;\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n        var background = globalXmlParser.element(xmlDoc, \"background\");\r\n        var sectPr = globalXmlParser.element(xbody, \"sectPr\");\r\n\r\n        return {\r\n            type: DomType.Document,\r\n            children: this.parseBodyElements(xbody),\r\n            props: sectPr ? parseSectionProperties(sectPr, globalXmlParser) : null,\r\n            cssStyle: background ? this.parseBackground(background) : {},\r\n        };\r\n    }\r\n\r\n    parseBackground(elem: Element): any {\r\n        var result = {};\r\n        var color = xml.colorAttr(elem, \"color\");\r\n\r\n        if (color) {\r\n            result[\"background-color\"] = color;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseBodyElements(element: Element): OpenXmlElement[] {\r\n        var children = [];\r\n        \r\n        xml.foreach(element, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return children;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            pStyle: {},\r\n            rStyle: {},\r\n            suff: \"tab\"\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.pStyle);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseDefaultProperties(n, result.rStyle);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.find(x => x.id == id);\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"suff\":\r\n                    result.suff = xml.stringAttr(n, \"val\");\r\n                    break;\r\n                }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"lastRenderedPageBreak\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"footnoteReference\":\r\n                    result.children.push(<FootnoteReferenceElement>{ \r\n                        type: DomType.FootnoteReference, \r\n                        id: xml.stringAttr(c, \"id\")\r\n                    });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.verticalAlign = \"sub\"; break;\r\n                        case \"superscript\": run.verticalAlign = \"super\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.options.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\r\n                    break;\r\n                \r\n                case \"caps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\r\n                    break;\r\n\r\n                case \"smallCaps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\r\n                    break;\r\n    \r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.options.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var hanging = xml.sizeAttr(node, \"hanging\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || /.+p[xt]$/.test(val))\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n            case \"auto\": return \"auto\";\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { Part } from \"../common/part\";\r\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\r\n\r\nexport class CorePropsPart extends Part {\r\n    props: CorePropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCoreProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CorePropsDeclaration {\r\n    title: string,\r\n    description: string,\r\n    subject: string,\r\n    creator: string,\r\n    keywords: string,\r\n    language: string,\r\n    lastModifiedBy: string,\r\n    revision: number,\r\n}\r\n\r\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\r\n    const result = <CorePropsDeclaration>{};\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"title\": result.title = el.textContent; break;\r\n            case \"description\": result.description = el.textContent; break;\r\n            case \"subject\": result.subject = el.textContent; break;\r\n            case \"creator\": result.creator = el.textContent; break;\r\n            case \"keywords\": result.keywords = el.textContent; break;\r\n            case \"language\": result.language = el.textContent; break;\r\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\r\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Part } from \"../common/part\";\r\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\r\n\r\nexport class ExtendedPropsPart extends Part {\r\n    props: ExtendedPropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseExtendedProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface ExtendedPropsDeclaration {\r\n    template: string,\r\n    totalTime: number,\r\n    pages: number,\r\n    words: number,\r\n    characters: number,\r\n    application: string,\r\n    lines: number,\r\n    paragraphs: number,\r\n    company: string,\r\n    appVersion: string\r\n}\r\n\r\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\r\n    const result = <ExtendedPropsDeclaration>{\r\n\r\n    };\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"Template\":\r\n                result.template = el.textContent;\r\n                break;\r\n            case \"Pages\":\r\n                result.pages = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Words\":\r\n                result.words = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Characters\":\r\n                result.characters = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Application\":\r\n                result.application = el.textContent;\r\n                break;\r\n            case \"Lines\":\r\n                result.lines = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Paragraphs\":\r\n                result.paragraphs = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Company\":\r\n                result.company = el.textContent;\r\n                break;\r\n            case \"AppVersion\":\r\n                result.appVersion = el.textContent;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction safeParseToInt(value: string): number {\r\n    if (typeof value === 'undefined')\r\n        return;\r\n    return parseInt(value);\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\",\r\n    Footer = \"footer\",\r\n    Header = \"header\",\r\n    FootnoteReference = \"footnoteReference\", \r\n    Footnote = \"footnote\" \r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface FootnoteReferenceElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    pStyle: Record<string, string>;\r\n    rStyle: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    suff?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    verticalAlign?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string | \"first\" | \"even\" | \"default\";\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n    renderHeaders: boolean;\r\n    renderFooters: boolean;\r\n    renderFootnotes: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n    trimXmlDeclaration: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n    renderHeaders: true,\r\n    renderFooters: true,\r\n    renderFootnotes: true\r\n}\r\n\r\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    return WordDocument.load(data, new DocumentParser(ops), ops);\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    const renderer = new HtmlRenderer(window.document);\r\n\r\n    return WordDocument\r\n        .load(data, new DocumentParser(ops), ops)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, ops);\r\n            return doc;\r\n        });\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlFooter } from \"./footer\";\r\n\r\nexport class FooterPart extends Part {\r\n    footerElement: WmlFooter;\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    parseXml(root: Element) {\r\n        this.footerElement = this._documentParser.parseFooter(root);\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlFooter implements OpenXmlElement {\r\n    type: DomType = DomType.Footer;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlFootnote implements OpenXmlElement {\r\n    id: string;\r\n    footnoteType: string;\r\n    type: DomType = DomType.Footnote;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlFootnote } from \"./footnote\";\r\n\r\nexport class FootnotesPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    footnotes: WmlFootnote[]\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.footnotes = this._documentParser.parseFootnotes(root);\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlHeader } from \"./header\";\r\n\r\nexport class HeaderPart extends Part {\r\n    headerElement: WmlHeader;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.headerElement = this._documentParser.parseHeader(root);\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlHeader implements OpenXmlElement {\r\n    type: DomType = DomType.Header;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement, FootnoteReferenceElement\r\n} from './document/dom';\r\nimport { Length, CommonProperties } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './document/document';\r\nimport { ParagraphElement } from './document/paragraph';\r\nimport { appendClass, keyBy } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { FooterHeaderReference, SectionProperties } from './document/section';\r\nimport { RunElement, RunProperties } from './document/run';\r\nimport { BookmarkStartElement } from './document/bookmark';\r\nimport { IDomStyle } from './document/style';\r\nimport { Part } from './common/part';\r\nimport { HeaderPart } from './header/header-part';\r\nimport { FooterPart } from './footer/footer-part';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: any;\r\n    footnoteMap: any = {};\r\n    currentFootnoteIds: string[];\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.className = options.className;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (document.footnotesPart) {\r\n            this.footnoteMap = keyBy(document.footnotesPart.footnotes, x => x.id);\r\n        }\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.options.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        const stylesMap = keyBy(styles.filter(x => x.id != null), x => x.id);\r\n        \r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\", { className });\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for (let section of this.splitBySection(document.children)) {\r\n            this.currentFootnoteIds = [];\r\n\r\n            const props = section.sectProps || document.props;\r\n            const sectionElement = this.createSection(this.className, props);\r\n            this.renderStyleValues(document.cssStyle, sectionElement);\r\n            \r\n            var headerPart = this.options.renderHeaders ? this.findHeaderFooter<HeaderPart>(props.headerRefs, result.length) : null;\r\n            var footerPart = this.options.renderFooters ? this.findHeaderFooter<FooterPart>(props.footerRefs, result.length) : null;\r\n\r\n            headerPart && this.renderElements([headerPart.headerElement], sectionElement);\r\n\r\n            var contentElement = this.createElement(\"article\");\r\n            this.renderElements(section.elements,contentElement);\r\n            sectionElement.appendChild(contentElement);\r\n\r\n            if (this.options.renderFootnotes) {\r\n                this.renderFootnotes(this.currentFootnoteIds, sectionElement);\r\n            }\r\n\r\n            footerPart && this.renderElements([footerPart.footerElement], sectionElement);\r\n\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    findHeaderFooter<T extends Part>(refs: FooterHeaderReference[], page: number): T {\r\n        var ref = refs ? ((page == 0 ? refs.find(x => x.type == \"first\") : null)\r\n            ?? (page % 2 ==0 ? refs.find(x => x.type == \"even\") : null)\r\n            ?? refs.find(x => x.type == \"default\")) : null;\r\n        \r\n        if (ref == null)\r\n            return null;\r\n\r\n        return this.document.findPartByRelId(ref.id, this.document.documentPart) as T;\r\n    }\r\n\r\n    isPageBreakElement(elem: OpenXmlElement): boolean {\r\n        if (elem.type != DomType.Break)\r\n            return false;\r\n\r\n        if ((elem as BreakElement).break == \"lastRenderedPageBreak\")\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return (elem as BreakElement).break == \"page\";  \r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value.toFixed(2)}${l.type ?? ''}` : null;\r\n\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper>section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; display: flex; flex-flow: column nowrap; }\r\nsection.${c}>article { margin-bottom: auto; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; min-height: 1em; }\r\n.${c} span { white-space: pre-wrap; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of numberings) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else if (num.levelText) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter,\r\n                    ...num.rStyle,\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.pStyle\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n        var defautStyles = keyBy(styles.filter(s => s.isDefault), s => s.target);\r\n\r\n        for (let style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (defautStyles[style.target] == style)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderFootnotes(footnoteIds: string[], into: HTMLElement) {\r\n        var footnotes = footnoteIds.map(id => this.footnoteMap[id]).filter(x => x);\r\n        \r\n        if (footnotes.length > 0) {\r\n            var result = this.createElement(\"ol\");\r\n            this.renderElements(footnotes, result);\r\n            into.appendChild(result);\r\n        }\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n\r\n            case DomType.Footer:\r\n                return this.renderContainer(elem, \"footer\");\r\n\r\n            case DomType.Header:\r\n                return this.renderContainer(elem, \"header\");\r\n\r\n            case DomType.Footnote:\r\n                return this.renderContainer(elem, \"li\");\r\n    \r\n            case DomType.FootnoteReference:\r\n                return this.renderFootnoteReference(elem as FootnoteReferenceElement);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderContainer(elem: OpenXmlElement, tagName: string) {\r\n        var result = this.createElement(tagName);\r\n        this.renderChildren(elem, result);\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.createElement<HTMLAnchorElement>(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.createElement<HTMLImageElement>(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderFootnoteReference(elem: FootnoteReferenceElement) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentFootnoteIds.push(elem.id); \r\n        result.textContent = `${this.currentFootnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n\r\n                if (paragraph?.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.verticalAlign) {\r\n            result.style.verticalAlign = elem.verticalAlign;\r\n            result.style.fontSize ||= \"small\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = col.width;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.createElement<HTMLTableCellElement>(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\r\n        const suffMap = {\r\n            \"tab\": \"\\\\9\",\r\n            \"space\": \"\\\\a0\",            \r\n        };\r\n\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n\r\n    createElement<T extends HTMLElement = HTMLElement>(tagName: string, props: any = undefined): T {\r\n        return Object.assign(this.htmlDocument.createElement(tagName), props);\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./document/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../document/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../document/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\r\n        var el = this.element(elem, localName);\r\n        return el ? this.attr(el, attrLocalName) : undefined;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"true\": return true;\r\n            case \"false\": return false;\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DmlTheme, parseTheme } from \"./theme\";\r\n\r\nexport class ThemePart extends Part {\r\n    theme: DmlTheme;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string) {\r\n        super(pkg, path);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.theme = parseTheme(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport class DmlTheme {\r\n    colorScheme: DmlColorScheme;\r\n    fontScheme: DmlFontScheme;\r\n}\r\n\r\nexport interface DmlColorScheme {\r\n    name: string;\r\n    colors: Record<string, string>;\r\n}\r\n\r\nexport interface DmlFontScheme {\r\n    name: string;\r\n    majorFont: DmlFormInfo,\r\n    minorFont: DmlFormInfo\r\n}\r\n\r\nexport interface DmlFormInfo {\r\n    latinTypeface: string;\r\n    eaTypeface: string;\r\n    csTypeface: string;\r\n}\r\n\r\nexport function parseTheme(elem: Element, xml: XmlParser) {\r\n    var result = new DmlTheme();\r\n    var themeElements = xml.element(elem, \"themeElements\");\r\n\r\n    for (let el of xml.elements(themeElements)) {\r\n        switch(el.localName) {\r\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\r\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlColorScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n        colors: {}\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        var srgbClr = xml.element(el, \"srgbClr\");\r\n        var sysClr = xml.element(el, \"sysClr\");\r\n\r\n        if (srgbClr) {\r\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\r\n        }\r\n        else if (sysClr) {\r\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlFontScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n    } as DmlFontScheme;\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\r\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\r\n    return {\r\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\r\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\r\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\r\n    };\r\n}","import { OpenXmlElement } from \"./document/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function resolvePath(path: string, base: string): string {\r\n    try {\r\n        const prefix = \"file://docx/\";\r\n        const url = new URL(path, prefix + base).toString();\r\n        return url.substr(prefix.length);\r\n    } catch {\r\n        return `${base}${path}`;\r\n    }\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { resolvePath, splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart } from \"./footer/footer-part\";\r\nimport { HeaderPart } from \"./header/header-part\";\r\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\r\nimport { CorePropsPart } from \"./document-props/core-props-part\";\r\nimport { ThemePart } from \"./theme/theme-part\";\r\nimport { FootnotesPart } from \"./footnotes/footnotes-part\";\r\n\r\nconst topLevelRels = [\r\n    { type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\r\n    { type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\r\n    { type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\r\n];\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n    footnotesPart: FootnotesPart;\r\n    corePropsPart: CorePropsPart;\r\n    extendedPropsPart: ExtendedPropsPart;\r\n\r\n    static load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob, options)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                const tasks = topLevelRels.map(rel => {\r\n                    const r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n                    return d.loadRelationshipPart(r.target, r.type);\r\n                });\r\n\r\n                return Promise.all(tasks);\r\n            }).then(() => d);\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.get(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Theme:\r\n                part = new ThemePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Footnotes:\r\n                this.footnotesPart = part = new FootnotesPart(this._package, path, this._parser);\r\n                break;\r\n        \r\n            case RelationshipTypes.Footer:\r\n                part = new FooterPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Header:\r\n                part = new HeaderPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.CoreProperties:\r\n                this.corePropsPart = part = new CorePropsPart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.ExtendedProperties:\r\n                this.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            const [folder] = splitPath(part.path); \r\n            const rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    findPartByRelId(id: string, basePart: Part = null) {\r\n        var rel = (basePart.rels ?? this.rels).find(r => r.id == id);\r\n        const folder = basePart ? splitPath(basePart.path)[0] : ''; \r\n        return rel ? this.partsMap[resolvePath(rel.target, folder)] : null;\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        const [folder] = splitPath(part.path); \r\n        return rel ? resolvePath(rel.target, folder) : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__290__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__290__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","f","fn","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","ignoreWidth","debug","parseFootnotes","result","el","footnote","WmlFootnote","footnoteType","children","parseBodyElements","push","parseFooter","WmlFooter","parseHeader","WmlHeader","parseDocumentFile","xbody","element","background","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","colorAttr","foreach","localName","parseParagraph","parseTable","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyle","rStyle","suff","bullet","find","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","Break","break","Symbol","font","char","Tab","FootnoteReference","instrText","d","parseDrawing","parseRunProperties","run","verticalAlign","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","valueOfStrike","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","test","intVal","Border","Percent","replace","valueOfBold","size","trim","a","b","checkMask","num","mask","parseCoreProps","CorePropsPart","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseExtendedProps","ExtendedPropsPart","safeParseToInt","value","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","ns","wordml","LengthUsage","mul","unit","Point","LineHeight","usage","namespaceURI","fontSize","lengthAttr","pkg","parser","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","parseFooterHeaderReference","SectionType","section","pageSize","height","orientation","pageMargins","top","bottom","header","footer","gutter","headerRefs","footerRefs","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","renderHeaders","renderFooters","renderFootnotes","data","userOptions","ops","WordDocument","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","fonts","parseFonts","FontTablePart","family","altName","fontKey","refId","footerElement","FooterPart","Footer","Footnote","footnotes","FootnotesPart","headerElement","HeaderPart","Header","htmlDocument","footnoteMap","styleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","footnotesPart","keyBy","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","wrapper","renderWrapper","appentElements","fontsPart","loadFont","fontData","cssTest","createStyleElement","filter","processClassName","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","attrs","Object","getOwnPropertyNames","key","hasOwnProperty","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","currentFootnoteIds","sectProps","sectionElement","renderStyleValues","headerPart","findHeaderFooter","footerPart","renderElements","contentElement","refs","page","ref","findPartByRelId","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","numberings","listStyleType","styleText","rootCounters","numberingClass","toLowerCase","styleToString","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","join","defautStyles","subStyles","linkedStyle","concat","subStyle","footnoteIds","into","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderContainer","renderFootnoteReference","renderChildren","elems","tagName","renderClass","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","numformat","substring","assign","container","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","t","borderBottom","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","item","elementAttr","attrLocalName","undefined","attributes","defaultValue","floatAttr","parseFloat","convertLength","globalXmlParser","StylesPart","theme","parseTheme","ThemePart","parseColorScheme","colors","srgbClr","sysClr","parseFontScheme","majorFont","parseFontInfo","minorFont","latinTypeface","eaTypeface","csTypeface","DmlTheme","themeElements","colorScheme","fontScheme","classList","isObject","Array","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","mergeDeep","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","part","FontTable","Numbering","Styles","Theme","Footnotes","corePropsPart","extendedPropsPart","folder","resolvePath","loadResource","createObjectURL","Blob","deobfuscate","basePart","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}