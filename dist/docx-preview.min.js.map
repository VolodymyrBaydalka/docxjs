{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmark.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/footnotes/footnote.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__290__) {\nreturn ","import * as JSZip from \"jszip\";\r\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport interface OpenXmlPackageOptions {\r\n    trimXmlDeclaration: boolean,\r\n    keepOrigin: boolean,\r\n}\r\n\r\nexport class OpenXmlPackage {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\r\n    }\r\n\r\n    get(path: string): any {\r\n        return this._zip.files[normalizePath(path)];\r\n    }\r\n\r\n    update(path: string, content: any) {\r\n        this._zip.file(path, content);\r\n    }\r\n\r\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\r\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\r\n    }\r\n\r\n    save(type: any = \"blob\"): Promise<any>  {\r\n        return this._zip.generateAsync({ type });\r\n    }\r\n\r\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\r\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            const [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath)\r\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\r\n    }\r\n\r\n    /** @internal */\r\n    parseXmlDocument(txt: string): Document {\r\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\r\n    }\r\n}\r\n\r\nfunction normalizePath(path: string) {\r\n    return path.startsWith('/') ? path.substr(1) : path;\r\n}","import { serializeXmlString } from \"../parser/xml-parser\";\r\nimport { OpenXmlPackage } from \"./open-xml-package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    protected _xmlDocument: Document;\r\n\r\n    rels: Relationship[];\r\n\r\n    constructor(protected _package: OpenXmlPackage, public path: string) {\r\n    }\r\n\r\n    load(): Promise<any> {\r\n        return Promise.all([\r\n            this._package.loadRelationships(this.path).then(rels => {\r\n                this.rels = rels;\r\n            }),\r\n            this._package.load(this.path).then(text => {\r\n                const xmlDoc = this._package.parseXmlDocument(text);\r\n\r\n                if (this._package.options.keepOrigin) {\r\n                    this._xmlDocument = xmlDoc;\r\n                }\r\n\r\n                this.parseXml(xmlDoc.firstElementChild);\r\n            })\r\n        ]);\r\n    }\r\n\r\n    save() {\r\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\r\n    }\r\n\r\n    protected parseXml(root: Element) {\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\r\n    Footnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\r\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\r\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\r\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\r\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\r\n    return xml.elements(root).map(e => <Relationship>{\r\n        id: xml.attr(e, \"Id\"),\r\n        type: xml.attr(e, \"Type\"),\r\n        target: xml.attr(e, \"Target\"),\r\n        targetMode: xml.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement, FootnoteReferenceElement\r\n} from './document/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './document/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\r\nimport { parseSectionProperties } from './document/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { parseRunProperties, RunElement } from './document/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './document/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './document/style';\r\nimport { WmlFooter } from './footer/footer';\r\nimport { WmlHeader } from './header/header';\r\nimport { WmlFootnote } from './footnotes/footnote';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport interface DocumentParserOptions {\r\n    ignoreWidth: boolean;\r\n    debug: boolean;\r\n}\r\n\r\nexport class DocumentParser {\r\n    options: DocumentParserOptions;\r\n\r\n    constructor(options?: Partial<DocumentParserOptions>) {\r\n        this.options = {\r\n            ignoreWidth: false,\r\n            debug: false,\r\n            ...options   \r\n        };\r\n    }\r\n\r\n    parseFootnotes(xmlDoc: Element): WmlFootnote[] {\r\n        var result = [];\r\n\r\n        for (let el of globalXmlParser.elements(xmlDoc, \"footnote\")) {\r\n            const footnote = new WmlFootnote();\r\n            footnote.id = globalXmlParser.attr(el, \"id\");\r\n            footnote.footnoteType = globalXmlParser.attr(el, \"type\");\r\n            footnote.children = this.parseBodyElements(el);\r\n            result.push(footnote);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseFooter(xmlDoc: Element): WmlFooter {\r\n        var result = new WmlFooter();\r\n        result.children = this.parseBodyElements(xmlDoc);\r\n        return result;\r\n    }\r\n\r\n    parseHeader(xmlDoc: Element): WmlHeader {\r\n        var result = new WmlHeader();\r\n        result.children = this.parseBodyElements(xmlDoc);\r\n        return result;\r\n    }\r\n\r\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n        var background = globalXmlParser.element(xmlDoc, \"background\");\r\n        var sectPr = globalXmlParser.element(xbody, \"sectPr\");\r\n\r\n        return {\r\n            type: DomType.Document,\r\n            children: this.parseBodyElements(xbody),\r\n            props: sectPr ? parseSectionProperties(sectPr, globalXmlParser) : null,\r\n            cssStyle: background ? this.parseBackground(background) : {},\r\n        };\r\n    }\r\n\r\n    parseBackground(elem: Element): any {\r\n        var result = {};\r\n        var color = xml.colorAttr(elem, \"color\");\r\n\r\n        if (color) {\r\n            result[\"background-color\"] = color;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseBodyElements(element: Element): OpenXmlElement[] {\r\n        var children = [];\r\n        \r\n        xml.foreach(element, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    children.push(this.parseTable(elem));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return children;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n            //case \"numbering\": result.target = \"p\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseRunProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            pStyle: {},\r\n            rStyle: {},\r\n            suff: \"tab\"\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.pStyle);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseDefaultProperties(n, result.rStyle);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.find(x => x.id == id);\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"suff\":\r\n                    result.suff = xml.stringAttr(n, \"val\");\r\n                    break;\r\n                }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"noBreakHyphen\":\r\n                    result.children.push({ type: DomType.NoBreakHyphen });\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"lastRenderedPageBreak\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab, parent: result });\r\n                    break;\r\n\r\n                case \"footnoteReference\":\r\n                    result.children.push(<FootnoteReferenceElement>{ \r\n                        type: DomType.FootnoteReference, \r\n                        id: xml.stringAttr(c, \"id\")\r\n                    });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d) {\r\n                        const newChildren = [];\r\n                        // Preserve Page-Breaks before images\r\n                        for(let i=0; i<result.children.length; i++) {\r\n                            const rItem = result.children[i];\r\n                            if(rItem.type === DomType.Break) {\r\n                                newChildren.push(rItem);\r\n                            }\r\n                        }\r\n                        newChildren.push(d);\r\n                        result.children = newChildren;\r\n                    }\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.verticalAlign = \"sub\"; break;\r\n                        case \"superscript\": run.verticalAlign = \"super\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.options.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\r\n                    break;\r\n                \r\n                case \"caps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\r\n                    break;\r\n\r\n                case \"smallCaps\":\r\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\r\n                    break;\r\n    \r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.options.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii) {\r\n            style[\"font-family\"] = ascii;\r\n            return;\r\n        }\r\n\r\n        var asciiTheme = xml.stringAttr(node, \"asciiTheme\");\r\n        if (asciiTheme) {\r\n            style[\"asciiTheme\"] = asciiTheme;\r\n        }\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var hanging = xml.sizeAttr(node, \"hanging\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == Node.ELEMENT_NODE)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        if (v) {\r\n            if (v == \"auto\") {\r\n                return autoColor;\r\n            } else if (knownColors.includes(v)) {\r\n                return v;\r\n            }\r\n\r\n            return `#${v}`;\r\n        }\r\n\r\n        var themeColor = xml.stringAttr(node, \"themeColor\");\r\n\r\n        return themeColor ? `var(--docx-${themeColor}-color)` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        return globalXmlParser.intAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || /.+p[xt]$/.test(val))\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static themeValue(c: Element, attr: string) {\r\n        var val = xml.stringAttr(c, attr); \r\n        return val ? `var(--docx-${val}-font)` : null;\r\n    }\r\n    \r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n            case \"auto\": return \"auto\";\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { Part } from \"../common/part\";\r\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\r\n\r\nexport class CorePropsPart extends Part {\r\n    props: CorePropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseCoreProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface CorePropsDeclaration {\r\n    title: string,\r\n    description: string,\r\n    subject: string,\r\n    creator: string,\r\n    keywords: string,\r\n    language: string,\r\n    lastModifiedBy: string,\r\n    revision: number,\r\n}\r\n\r\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\r\n    const result = <CorePropsDeclaration>{};\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"title\": result.title = el.textContent; break;\r\n            case \"description\": result.description = el.textContent; break;\r\n            case \"subject\": result.subject = el.textContent; break;\r\n            case \"creator\": result.creator = el.textContent; break;\r\n            case \"keywords\": result.keywords = el.textContent; break;\r\n            case \"language\": result.language = el.textContent; break;\r\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\r\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { Part } from \"../common/part\";\r\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\r\n\r\nexport class ExtendedPropsPart extends Part {\r\n    props: ExtendedPropsDeclaration;\r\n\r\n    parseXml(root: Element) {\r\n        this.props = parseExtendedProps(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface ExtendedPropsDeclaration {\r\n    template: string,\r\n    totalTime: number,\r\n    pages: number,\r\n    words: number,\r\n    characters: number,\r\n    application: string,\r\n    lines: number,\r\n    paragraphs: number,\r\n    company: string,\r\n    appVersion: string\r\n}\r\n\r\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\r\n    const result = <ExtendedPropsDeclaration>{\r\n\r\n    };\r\n\r\n    for (let el of xmlParser.elements(root)) {\r\n        switch (el.localName) {\r\n            case \"Template\":\r\n                result.template = el.textContent;\r\n                break;\r\n            case \"Pages\":\r\n                result.pages = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Words\":\r\n                result.words = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Characters\":\r\n                result.characters = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Application\":\r\n                result.application = el.textContent;\r\n                break;\r\n            case \"Lines\":\r\n                result.lines = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Paragraphs\":\r\n                result.paragraphs = safeParseToInt(el.textContent);\r\n                break;\r\n            case \"Company\":\r\n                result.company = el.textContent;\r\n                break;\r\n            case \"AppVersion\":\r\n                result.appVersion = el.textContent;\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction safeParseToInt(value: string): number {\r\n    if (typeof value === 'undefined')\r\n        return;\r\n    return parseInt(value);\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\r\n    drawingml: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\r\n    picture: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: {mul: 0.05, unit: \"pt\"}, //twips\r\n    Emu: {mul: 1 / 12700, unit: \"pt\"},\r\n    FontSize: {mul: 0.5, unit: \"pt\"},\r\n    Border: {mul: 0.125, unit: \"pt\"},\r\n    Point: {mul: 1, unit: \"pt\"},\r\n    Percent: {mul: 0.02, unit: \"%\"},\r\n    LineHeight: {mul: 1 / 240, unit: null}\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    if (!val) {\r\n        return null;\r\n    }\r\n\r\n    //\"simplified\" docx documents use pt's as units\r\n    if (val.endsWith('pt')) {\r\n        return { value: parseFloat(val), type: 'pt' };\r\n    }\r\n\r\n    if (val.endsWith('%')) {\r\n        return { value: parseFloat(val), type: '%' };\r\n    }\r\n\r\n    return { value: parseInt(val) * usage.mul, type: usage.unit };\r\n}\r\n\r\nexport function convertBoolean(v: string, defaultValue = false): boolean {\r\n    switch (v) {\r\n        case \"1\": return true;\r\n        case \"0\": return false;\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return defaultValue;\r\n    }\r\n}\r\n\r\nexport function convertPercentage(val: string): number {\r\n    return val ? parseInt(val) / 100 : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch (elem.localName) {\r\n        case \"color\":\r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    parseXml(root: Element) {\r\n        this.body = this._documentParser.parseDocumentFile(root);\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    NoBreakHyphen = \"noBreakHyphen\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\",\r\n    Footer = \"footer\",\r\n    Header = \"header\",\r\n    FootnoteReference = \"footnoteReference\", \r\n    Footnote = \"footnote\" \r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\nexport interface FootnoteReferenceElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    pStyle: Record<string, string>;\r\n    rStyle: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    suff?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    verticalAlign?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\nimport { FooterPart } from \"../footer/footer-part\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length,\r\n    height: Length,\r\n    orientation: \"landscape\" | string\r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\",\r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface FooterHeaderReference {\r\n    id: string;\r\n    type: string | \"first\" | \"even\" | \"default\";\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n    id: string;\r\n    footerRefs: FooterHeaderReference[];\r\n    headerRefs: FooterHeaderReference[];\r\n    forceFirstFooterHeaderDifferent: boolean;\r\n}\r\n\r\nexport interface SectionRenderProperties extends SectionProperties {\r\n    pageWithinSection: number;\r\n}\r\n\r\nexport interface Section {\r\n    elements: OpenXmlElement[],\r\n    sectProps: SectionProperties\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    const section = <SectionProperties>{footerRefs: [], headerRefs: []};\r\n    section.id = xml.attr(elem, \"rsidSect\");\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n\r\n            case \"titlePg\":\r\n                const titlePageVal: string = xml.attr(e, \"val\");\r\n                if(titlePageVal !== \"false\") {\r\n                    section.forceFirstFooterHeaderDifferent = true;\r\n                }\r\n                break;\r\n\r\n            case \"headerReference\":\r\n                section.headerRefs.push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n            \r\n            case \"footerReference\":\r\n                section.footerRefs.push(parseFooterHeaderReference(e, xml)); \r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}\r\n\r\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\r\n    return {\r\n        id: xml.attr(elem, \"id\"),\r\n        type: xml.attr(elem, \"type\"),\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    trimXmlDeclaration: boolean;\r\n    renderHeaders: boolean;\r\n    renderFooters: boolean;\r\n    renderFootnotes: boolean;\r\n    ignoreLastRenderedPageBreak: boolean;\r\n    noStyleBlock: boolean;\r\n}\r\n\r\nexport const defaultOptions: Options = {\r\n    ignoreHeight: false,\r\n    ignoreWidth: false,\r\n    ignoreFonts: false,\r\n    breakPages: true,\r\n    debug: false,\r\n    experimental: false,\r\n    className: \"docx\",\r\n    inWrapper: true,\r\n    trimXmlDeclaration: true,\r\n    ignoreLastRenderedPageBreak: true,\r\n    noStyleBlock: false,\r\n    renderHeaders: true,\r\n    renderFooters: true,\r\n    renderFootnotes: true\r\n}\r\n\r\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    return WordDocument.load(data, new DocumentParser(ops), ops);\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\r\n    const ops = { ...defaultOptions, ...userOptions };\r\n    const renderer = new HtmlRenderer(window.document);\r\n\r\n    return WordDocument\r\n        .load(data, new DocumentParser(ops), ops)\r\n        .then(doc => {\r\n            renderer.render(doc, bodyContainer, styleContainer, ops);\r\n            return doc;\r\n        });\r\n}","import { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    parseXml(root: Element) {\r\n        this.fonts = parseFonts(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nconst embedFontTypeMap = {\r\n    embedRegular: 'regular',\r\n    embedBold: 'bold',\r\n    embedItalic: 'italic',\r\n    embedBoldItalic: 'boldItalic',\r\n}\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    embedFontRefs: EmbedFontRef[];\r\n}\r\n\r\nexport interface EmbedFontRef {\r\n    id: string;\r\n    key: string;\r\n    type: 'regular' | 'bold' | 'italic' | 'boldItalic';\r\n}\r\n\r\nexport function parseFonts(root: Element, xml: XmlParser): FontDeclaration[] {\r\n    return xml.elements(root).map(el => parseFont(el, xml));\r\n}\r\n\r\nexport function parseFont(elem: Element, xml: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xml.attr(elem, \"name\"),\r\n        embedFontRefs: []\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xml.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n            case \"embedBold\":\r\n            case \"embedItalic\":\r\n            case \"embedBoldItalic\":\r\n                result.embedFontRefs.push(parseEmbedFontRef(el, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseEmbedFontRef(elem: Element, xml: XmlParser): EmbedFontRef {\r\n    return { \r\n        id: xml.attr(elem, \"id\"), \r\n        key: xml.attr(elem, \"fontKey\"),\r\n        type: embedFontTypeMap[elem.localName]\r\n    };\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlFooter } from \"./footer\";\r\n\r\nexport class FooterPart extends Part {\r\n    footerElement: WmlFooter;\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    parseXml(root: Element) {\r\n        this.footerElement = this._documentParser.parseFooter(root);\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlFooter implements OpenXmlElement {\r\n    id?: string = \"\";\r\n    type: DomType = DomType.Footer;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlFootnote implements OpenXmlElement {\r\n    id: string;\r\n    footnoteType: string;\r\n    type: DomType = DomType.Footnote;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { WmlHeader } from \"./header\";\r\n\r\nexport class HeaderPart extends Part {\r\n    headerElement: WmlHeader;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.headerElement = this._documentParser.parseHeader(root);\r\n    }\r\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\r\n\r\nexport class WmlHeader implements OpenXmlElement {\r\n    type: DomType = DomType.Header;\r\n    children?: OpenXmlElement[] = [];\r\n    cssStyle?: Record<string, string> = {};\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement, FootnoteReferenceElement\r\n} from './document/dom';\r\nimport { Length, CommonProperties } from './document/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './document/document';\r\nimport { ParagraphElement } from './document/paragraph';\r\nimport { appendClass, clone, keyBy } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { Section, SectionProperties, SectionRenderProperties } from './document/section';\r\nimport { RunElement, RunProperties } from './document/run';\r\nimport { BookmarkStartElement } from './document/bookmark';\r\nimport { IDomStyle } from './document/style';\r\nimport { Part } from './common/part';\r\nimport { HeaderPart } from './header/header-part';\r\nimport { FooterPart } from './footer/footer-part';\r\nimport { WmlFootnote } from './footnotes/footnote';\r\nimport { ThemePart } from './theme/theme-part';\r\n\r\ninterface CssChangeObject {\r\n    cssRuleCamel: string;\r\n    newVal: string;\r\n}\r\n\r\ninterface noCssDictEntry {\r\n    [cssRule: string]: CssChangeObject\r\n}\r\n\r\nexport class HtmlRenderer {\r\n\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    noCssDict: { [selector: string]: noCssDictEntry } = {};\r\n    styleMap: any;\r\n\r\n    footnoteMap: Record<string, WmlFootnote> = {};\r\n    currentFootnoteIds: string[];\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.className = options.className;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n        if (options.noStyleBlock) {\r\n            styleContainer = window.document.createElement(\"div\");\r\n        }\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.themePart) {\r\n            appendComment(styleContainer, \"docx document theme values\");\r\n            this.renderTheme(document.themePart, styleContainer);\r\n        }\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (document.footnotesPart) {\r\n            this.footnoteMap = keyBy(document.footnotesPart.footnotes, x => x.id);\r\n        }\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart) {\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n        }\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.options.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n        if (options.noStyleBlock) {\r\n            this.applyCss(this.noCssDict, bodyContainer);\r\n        }\r\n    }\r\n\r\n    renderTheme(themePart: ThemePart, styleContainer: HTMLElement) {\r\n        const variables = {};\r\n        const fontScheme = themePart.theme?.fontScheme; \r\n\r\n        if (fontScheme) {\r\n            if (fontScheme.majorFont) {\r\n                variables['--docx-majorHAnsi-font'] = fontScheme.majorFont.latinTypeface;\r\n            }\r\n\r\n            if (fontScheme.minorFont) {\r\n                variables['--docx-minorHAnsi-font'] = fontScheme.minorFont.latinTypeface;\r\n            }\r\n        }\r\n\r\n        const colorScheme = themePart.theme?.colorScheme; \r\n\r\n        if (colorScheme) {\r\n            for (let [k, v] of Object.entries(colorScheme.colors)) {\r\n                variables[`--docx-${k}-color`] = `#${v}`;\r\n            }\r\n        }\r\n\r\n        const cssText = this.styleToString(`.${this.className}`, variables);\r\n        styleContainer.appendChild(createStyleElement(cssText));\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts) {\r\n            for (let ref of f.embedFontRefs) {\r\n                this.document.loadFont(ref.id, ref.key).then(fontData => {\r\n                    var cssValues = {\r\n                        'font-family': f.name,\r\n                        'src': `url(${fontData})`\r\n                    };\r\n\r\n                    if (ref.type == \"bold\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-weight'] = 'bold';\r\n                    }\r\n\r\n                    if (ref.type == \"italic\" || ref.type == \"boldItalic\") {\r\n                        cssValues['font-style'] = 'italic';\r\n                    }\r\n\r\n                    appendComment(styleContainer, `Font ${f.name}`);\r\n                    const cssText = this.styleToString(\"@font-face\", cssValues);\r\n                    styleContainer.appendChild(createStyleElement(cssText));\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]): Record<string, IDomStyle> {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            this.replaceAsciiTheme(style);\r\n            style.basedOnResolved = !style.basedOn;\r\n            stylesMap[style.id] = style;\r\n        }\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            if (style.basedOnResolved) {\r\n                continue;\r\n            }\r\n            this.resolveBaseStyle(style, stylesMap)\r\n        }\r\n\r\n        for (let style of styles) {\r\n            this.replaceAsciiTheme(style, true);\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n        const defaultStyles = styles.filter(x => x.isDefault);\r\n        const defaultOverride: IDomStyle = clone(defaultStyles[0]);\r\n        defaultOverride.styles = [];\r\n        for (let defaultStyle of defaultStyles) {\r\n            this.copyStyle(defaultStyle, defaultOverride);\r\n        }\r\n        for (let style of styles.filter(x => x.id === null)) {\r\n            this.copyStyle(defaultOverride, style, true);\r\n        }\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(\r\n        input: Record<string, string>,\r\n        output: Record<string, string>,\r\n        attrs: string[] = null,\r\n        overideExistingEntries: boolean = false\r\n    ): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && (overideExistingEntries || !output.hasOwnProperty(key))) {\r\n                output[key] = input[key];\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.createElement(\"section\", { className });\r\n\r\n        if (!props) {\r\n            return elem;\r\n        }\r\n\r\n        if (props.pageMargins) {\r\n            elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n            elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n            elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n            elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n        }\r\n\r\n        if (props.pageSize) {\r\n            if (!this.options.ignoreWidth)\r\n                elem.style.width = this.renderLength(props.pageSize.width);\r\n            if (!this.options.ignoreHeight)\r\n                elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n        }\r\n\r\n        if (props.columns && props.columns.numberOfColumns) {\r\n            elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n            elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n            if (props.columns.separator) {\r\n                elem.style.columnRule = \"1px solid black\";\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        const result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for (let section of this.splitBySection(document.children, document.props)) {\r\n            this.currentFootnoteIds = [];\r\n            const sectProps: SectionRenderProperties = section.sectProps as SectionRenderProperties;\r\n            \r\n            const sectionElement = this.createSection(this.className, sectProps);\r\n            this.renderStyleValues(document.cssStyle, sectionElement);\r\n\r\n            if(this.options.renderHeaders) {\r\n                const headerPart =  this.findHeaderFooter<HeaderPart>(sectProps, false);\r\n                if(headerPart && headerPart.headerElement) {\r\n                    this.renderElements([headerPart.headerElement], sectionElement);\r\n                }\r\n            }\r\n\r\n            var contentElement = this.createElement(\"article\");\r\n            this.renderElements(section.elements,contentElement);\r\n            sectionElement.appendChild(contentElement);\r\n\r\n            if (this.options.renderFootnotes) {\r\n                this.renderFootnotes(this.currentFootnoteIds, sectionElement);\r\n            }\r\n\r\n\r\n            if(this.options.renderFooters) {\r\n                const footerPart =  this.findHeaderFooter<FooterPart>(sectProps, true);\r\n                if(footerPart && footerPart.footerElement) {\r\n                    this.renderElements([footerPart.footerElement], sectionElement);\r\n                }\r\n            }\r\n\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    findHeaderFooter<T extends Part>(sectProps: SectionRenderProperties, getFooter = true): T {\r\n        const refs = getFooter ? sectProps.footerRefs : sectProps.headerRefs;\r\n        const page: number = sectProps.pageWithinSection;\r\n        const first = refs.find(x => x.type == \"first\") ?? null;\r\n        const even = refs.find(x => x.type == \"even\") ?? null;\r\n        const def = refs.find(x => x.type == \"default\") ?? null;\r\n        let refToUse = null;\r\n        if (sectProps.forceFirstFooterHeaderDifferent && page === 1) {\r\n            refToUse = first;\r\n        }\r\n        else if (page === 1 && first) {\r\n            refToUse = first;\r\n        }\r\n        else if (even && page % 2 === 0) {\r\n            refToUse = even;\r\n        }\r\n        else {\r\n            refToUse = def;\r\n        }\r\n        \r\n        if (refToUse == null)\r\n            return null;\r\n\r\n        return this.document.findPartByRelId(refToUse.id, this.document.documentPart) as T;\r\n    }\r\n\r\n    isPageBreakElement(elem: OpenXmlElement): boolean {\r\n        if (elem.type != DomType.Break)\r\n            return false;\r\n\r\n        if ((elem as BreakElement).break == \"lastRenderedPageBreak\")\r\n            return !this.options.ignoreLastRenderedPageBreak;\r\n\r\n        return (elem as BreakElement).break == \"page\";  \r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[], lastSectionProps: SectionProperties): Section[] {\r\n        let current: Section = {sectProps: null, elements: []};\r\n        var result = [current];\r\n        let sectProps: SectionProperties;\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = clone(sectProps);\r\n                    current = {sectProps: null, elements: []};\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type != DomType.Paragraph) {\r\n                continue;\r\n            }\r\n            const p = elem as ParagraphElement;\r\n            sectProps = clone(p.sectionProps);\r\n            var pBreakIndex = -1;\r\n            var rBreakIndex = -1;\r\n            if (this.options.breakPages && p.children) {\r\n                pBreakIndex = p.children.findIndex(r => {\r\n                    rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\r\n                    return rBreakIndex != -1;\r\n                });\r\n                if (pBreakIndex > 0) {\r\n                    // Include Bookmarks in breaking\r\n                    while (pBreakIndex > 0 && p.children[pBreakIndex - 1].type === DomType.BookmarkStart) {\r\n                        pBreakIndex--;\r\n                    }\r\n                }\r\n            }\r\n            if (sectProps || (pBreakIndex > -1 && pBreakIndex > (this.isFirstRenderElement(current.elements) ? 0 : -1))) {\r\n                if (sectProps) {\r\n                    current.sectProps = clone(sectProps);\r\n                }\r\n                current = {sectProps: null, elements: []};\r\n                if (pBreakIndex === 0) {\r\n                    current.elements.push(elem);\r\n                    result[result.length - 1].elements.pop();\r\n                }\r\n                result.push(current);\r\n            }\r\n            if (pBreakIndex <= 0 ||\r\n                !p.children || p.children.length <= pBreakIndex\r\n            ) {\r\n                continue;\r\n            }\r\n            let breakRun = p.children[pBreakIndex];\r\n            if (!breakRun || !breakRun.children) {\r\n                continue;\r\n            }\r\n            let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n            if (!(pBreakIndex < p.children.length - 1 || splitRun)) {\r\n                continue;\r\n            }\r\n            var children = elem.children;\r\n            var newParagraph = {...elem, children: children.slice(pBreakIndex)};\r\n            elem.children = children.slice(0, pBreakIndex);\r\n            current.elements.push(newParagraph);\r\n            if (!splitRun) {\r\n                continue;\r\n            }\r\n            let runChildren = breakRun.children;\r\n            let newRun = {...breakRun, children: runChildren.slice(0, rBreakIndex)};\r\n            elem.children.push(newRun);\r\n            breakRun.children = runChildren.slice(rBreakIndex);\r\n        }\r\n\r\n\r\n        if (result.length > 0) {\r\n            // The last sections props are located in the body itself\r\n            result[result.length - 1].sectProps = lastSectionProps;\r\n        }\r\n\r\n        let currentSectProps = null;\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps === null) {\r\n                result[i].sectProps = clone(currentSectProps);\r\n            }\r\n            else {\r\n                currentSectProps = clone(result[i].sectProps);\r\n            }\r\n        }\r\n\r\n        this.addSectionInnerPageNums(result);\r\n        return result;\r\n    }\r\n\r\n    private addSectionInnerPageNums(result: Section[]) {\r\n        // Add Section inner page Count to Sections\r\n        let lastSectionId: string = \"\";\r\n        let sectiontPageCount: number = 0;\r\n        for (let j = 0; j < result.length; j++) {\r\n            const sectProps = result[j].sectProps;\r\n            if (sectProps === null) {\r\n                continue;\r\n            }\r\n            if (sectProps.id !== lastSectionId) {\r\n                lastSectionId = sectProps.id;\r\n                sectiontPageCount = 1;\r\n            }\r\n            else {\r\n                sectiontPageCount++;\r\n            }\r\n            (sectProps as SectionRenderProperties).pageWithinSection = sectiontPageCount;\r\n        }\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value.toFixed(2)}${l.type ?? ''}` : null;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper>section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; display: flex; flex-flow: column nowrap; }\r\nsection.${c}>article { margin-bottom: auto; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; min-height: 1em; }\r\n.${c} span { white-space: pre-wrap; }`;\r\n        if (this.options.noStyleBlock) {\r\n            this.noCssDict[`.${c}-wrapper`] = {\r\n                \"background\": {cssRuleCamel: \"background\", newVal: \"gray\"},\r\n                \"padding\": {cssRuleCamel: \"padding\", newVal: \"30px\"},\r\n                \"padding-bottom\": {cssRuleCamel: \"paddingBottom\", newVal: \"0px\"},\r\n                \"display\": {cssRuleCamel: \"display\", newVal: \"flex\"},\r\n                \"flex-flow\": {cssRuleCamel: \"flexFlow\", newVal: \"column\"},\r\n                \"align-items\": {cssRuleCamel: \"alignItems\", newVal: \"center\"}\r\n            };\r\n            this.noCssDict[`.${c}-wrapper>section.${c}`] = {\r\n                \"background\": {cssRuleCamel: \"background\", newVal: \"white\"},\r\n                \"box-shadow\": {cssRuleCamel: \"boxShadow\", newVal: \"0 0 10px rgba(0, 0, 0, 0.5)\"},\r\n                \"margin-bottom\": {cssRuleCamel: \"marginBottom\", newVal: \"30px\"}\r\n            };\r\n            this.noCssDict[`.${c}`] = {\r\n                \"color\": {cssRuleCamel: \"color\", newVal: \"black\"},\r\n            };\r\n            this.noCssDict[`section.${c}`] = {\r\n                \"box-sizing\": {cssRuleCamel: \"boxSizing\", newVal: \"border-box\"},\r\n                \"display\": {cssRuleCamel: \"display\", newVal: \"flex\"},\r\n                \"flex-flow\": {cssRuleCamel: \"flexFlow\", newVal: \"column nowrap\"},\r\n            };\r\n            this.noCssDict[`section.${c}>article`] = {\r\n                \"margin-bottom\": {cssRuleCamel: \"marginBottom\", newVal: \"auto\"},\r\n            };\r\n            this.noCssDict[`.${c} table`] = {\r\n                \"border-collapse\": {cssRuleCamel: \"borderCollapse\", newVal: \"collapse\"},\r\n            };\r\n            this.noCssDict[`.${c} table td`] = {\r\n                \"vertical-align\": {cssRuleCamel: \"verticalAlign\", newVal: \"top\"},\r\n            };\r\n            this.noCssDict[`.${c} table th`] = {\r\n                \"vertical-align\": {cssRuleCamel: \"verticalAlign\", newVal: \"top\"},\r\n            };\r\n            this.noCssDict[`.${c} p`] = {\r\n                \"margin\": {cssRuleCamel: \"margin\", newVal: \"0pt\"},\r\n                \"min-height\": {cssRuleCamel: \"minHeight\", newVal: \"1em\"},\r\n            };\r\n            this.noCssDict[`.${c} span`] = {\r\n                \"white-space\": {cssRuleCamel: \"whiteSpace\", newVal: \"preWrap\"},\r\n            };\r\n            if(this.options.experimental) {\r\n                styleText +=`\\n.${c} p { word-spacing: -0.54pt; }`;\r\n                this.noCssDict[`.${c} p`][\"word-spacing\"] = {cssRuleCamel: \"wordSpacing\", newVal: \"-0.54pt\"};\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of numberings) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else if (num.levelText) {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\r\n                    \"counter-increment\": counter,\r\n                    ...num.rStyle,\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.pStyle\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n        var defautStyles = keyBy(styles.filter(s => s.isDefault), s => s.target);\r\n\r\n        for (let style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (defautStyles[style.target] == style)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderFootnotes(footnoteIds: string[], into: HTMLElement) {\r\n        var footnotes = footnoteIds.map(id => this.footnoteMap[id]).filter(x => x);\r\n        \r\n        if (footnotes.length > 0) {\r\n            var result = this.createElement(\"ol\", null, this.renderElements(footnotes));\r\n            into.appendChild(result);\r\n        }\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n\r\n            case DomType.Footer:\r\n                return this.renderContainer(elem, \"footer\");\r\n\r\n            case DomType.Header:\r\n                return this.renderContainer(elem, \"header\");\r\n\r\n            case DomType.Footnote:\r\n                return this.renderContainer(elem, \"li\");\r\n    \r\n            case DomType.FootnoteReference:\r\n                return this.renderFootnoteReference(elem as FootnoteReferenceElement);\r\n\r\n            case DomType.NoBreakHyphen:\r\n                return this.createElement(\"wbr\");\r\n                            \r\n            default:\r\n                console.warn(`DomType ${elem.type} has no rendering implementation.`);\r\n                return null;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderContainer(elem: OpenXmlElement, tagName: keyof HTMLElementTagNameMap) {\r\n        return this.createElement(tagName, null, this.renderChildren(elem));\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderFootnoteReference(elem: FootnoteReferenceElement) {\r\n        var result = this.createElement(\"sup\");\r\n        this.currentFootnoteIds.push(elem.id); \r\n        result.textContent = `${this.currentFootnoteIds.length}`;\r\n        return result;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n\r\n                if (paragraph?.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.verticalAlign) {\r\n            result.style.verticalAlign = elem.verticalAlign;\r\n            result.style.fontSize ||= \"small\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.createElement(\"colgroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = col.width;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        if (!this.options.noStyleBlock) {\r\n            let result = selectors + \" {\\r\\n\";\r\n\r\n            for (const key in values) {\r\n                result += `  ${key}: ${values[key]};\\r\\n`;\r\n            }\r\n\r\n            if (cssText) {\r\n                result += cssText;\r\n            }\r\n\r\n            return result + \"}\\r\\n\";\r\n        }\r\n        const selectorsplits = selectors.split(\", \");\r\n        for (let i = 0; i < selectorsplits.length; i++) {\r\n            const split = selectorsplits[i];\r\n            if (this.noCssDict[split] === undefined) {\r\n                this.noCssDict[split] = {};\r\n            }\r\n            for (const key in values) {\r\n                const camelVal = key.replace(/-([a-z])/g, function (m, w) {\r\n                    return w.toUpperCase();\r\n                });\r\n                this.noCssDict[split][key] = {cssRuleCamel: camelVal, newVal: values[key]};\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\r\n        const suffMap = {\r\n            \"tab\": \"\\\\9\",\r\n            \"space\": \"\\\\a0\",            \r\n        };\r\n\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\r\n        });\r\n\r\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n\r\n    applyCss(dict: { [selector: string]: noCssDictEntry }, cont: HTMLElement) {\r\n        let changeList: Array<{ selector: string, count: number, styles: noCssDictEntry }> =\r\n            [];\r\n        for (let selector in dict) {\r\n            changeList.push({\r\n                selector: selector,\r\n                count: cont.querySelectorAll(selector).length,\r\n                styles: dict[selector]\r\n            });\r\n        }\r\n        changeList = changeList.sort((a, b) => {\r\n            return a.count - b.count\r\n        });\r\n        for (let i = 0; i < changeList.length; i++) {\r\n            const elements = cont.querySelectorAll(changeList[i].selector);\r\n            for (let j = 0; j < elements.length; j++) {\r\n                const element: HTMLElement = elements[j] as HTMLElement;\r\n                const styles: string = element.getAttribute(\"style\");\r\n                const hasStyles: boolean = styles !== null;\r\n                for (let style in changeList[i].styles) {\r\n                    if (!hasStyles || styles.indexOf(style) === -1) {\r\n                        const changeEntry = changeList[i].styles[style];\r\n                        element.style[changeEntry.cssRuleCamel] = changeEntry.newVal;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private resolveBaseStyle(style: IDomStyle, stylesMap: Record<string, IDomStyle>) {\r\n        let baseStyle = stylesMap[style.basedOn];\r\n\r\n        if (!baseStyle) {\r\n            if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n            return;\r\n        }\r\n\r\n        if (baseStyle.basedOnResolved !== true) {\r\n            // If the base is not resolved yet, resolve that one first\r\n            this.resolveBaseStyle(baseStyle, stylesMap);\r\n            baseStyle = stylesMap[style.basedOn];\r\n        }\r\n        this.copyStyle(baseStyle, style);\r\n        style.basedOnResolved = true;\r\n        stylesMap[style.id] = style;\r\n    }\r\n\r\n    private copyStyle(base: IDomStyle, target: IDomStyle, overideExistingEntries: boolean = false) {\r\n        for (let baseStyleStyles of base.styles) {\r\n            let styleStyleValues = target.styles.filter(x => x.target == baseStyleStyles.target);\r\n            if (styleStyleValues && styleStyleValues.length > 0) {\r\n                styleStyleValues[0].values = this.copyStyleProperties(\r\n                    baseStyleStyles.values, styleStyleValues[0].values, null, overideExistingEntries\r\n                );\r\n            }\r\n            else {\r\n                target.styles.push(clone(baseStyleStyles))\r\n            }\r\n        }\r\n    }\r\n\r\n    private replaceAsciiTheme(style: IDomStyle, addDefault: boolean = false) {\r\n        const themePart = this.document.themePart;\r\n        const translatedFonts = themePart.theme.fontScheme;\r\n        const minorLatinFont = translatedFonts.minorFont.latinTypeface;\r\n        const hasMinorLatin = minorLatinFont !== \"\" && minorLatinFont !== undefined\r\n        for (let j = 0; j < style.styles.length; j++) {\r\n            const substyle = style.styles[j];\r\n            const value = substyle.values[\"asciiTheme\"];\r\n            const hasFontFamily = substyle.values[\"font-family\"] !== undefined;\r\n            if (!value) {\r\n                if (addDefault && !hasFontFamily && hasMinorLatin) {\r\n                    substyle.values[\"font-family\"] = minorLatinFont\r\n                }\r\n                continue;\r\n            }\r\n            delete substyle.values[\"asciiTheme\"];\r\n            if (hasFontFamily) {\r\n                continue;\r\n            }\r\n            if (value === \"minorHAnsi\" && minorLatinFont) {\r\n                substyle.values[\"font-family\"] = minorLatinFont;\r\n            }\r\n            else if (value === \"majorHAnsi\" && translatedFonts.majorFont?.latinTypeface) {\r\n                substyle.values[\"font-family\"] = translatedFonts.majorFont.latinTypeface;\r\n            }\r\n        }\r\n    }\r\n\r\n    private isFirstRenderElement(elements: OpenXmlElement[]) {\r\n        if (elements.length === 1) {\r\n            return true;\r\n        }\r\n        for (let i = elements.length - 2; i >= 0; i--) {\r\n            const element = elements[i];\r\n            if (!element.children || element.children.length === 0) {\r\n                continue;\r\n            }\r\n            for (let j = element.children.length - 1; j >= 0; j--) {\r\n                const run = element.children[j];\r\n                if (run.type !== DomType.Run || !run.children || run.children.length === 0) {\r\n                    continue;\r\n                }\r\n                for (let k = run.children.length - 1; k >= 0; k--) {\r\n                    const child = run.children[k];\r\n                    if (child.type === DomType.BookmarkStart || child.type === DomType.BookmarkEnd || child.type === DomType.Break) {\r\n                        continue;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true; \r\n    }\r\n    createElement<T extends keyof HTMLElementTagNameMap>(\r\n        tagName: T, \r\n        props: Partial<Record<keyof HTMLElementTagNameMap[T], any>> = undefined,\r\n        children: Node[] = undefined\r\n    ): HTMLElementTagNameMap[T] {\r\n        var result = Object.assign(this.htmlDocument.createElement(tagName), props);\r\n        children && children.forEach(c => result.appendChild(c));\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    elem.innerHTML = '';\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./document/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../document/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    parseXml(root: Element) {\r\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\r\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \r\n    }\r\n}","import { NumberingPicBullet } from \"../document/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../document/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertBoolean  } from \"../document/common\";\r\n\r\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\r\n    if (trimXmlDeclaration)\r\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n    \r\n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \r\n    const errorText = hasXmlParserError(result);\r\n\r\n    if (errorText)\r\n        throw new Error(errorText);\r\n\r\n    return result;\r\n}\r\n\r\nfunction hasXmlParserError(doc: Document) {\r\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\r\n}\r\n\r\nexport function serializeXmlString(elem: Node): string {\r\n    return new XMLSerializer().serializeToString(elem);\r\n}\r\n\r\nexport class XmlParser {\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\r\n        var el = this.element(elem, localName);\r\n        return el ? this.attr(el, attrLocalName) : undefined;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        return convertBoolean(this.attr(node, attrName), defaultValue);\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../document/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\r\n        super(pkg, path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.styles = this._documentParser.parseStylesFile(root);     \r\n    }\r\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DmlTheme, parseTheme } from \"./theme\";\r\n\r\nexport class ThemePart extends Part {\r\n    theme: DmlTheme;\r\n\r\n    constructor(pkg: OpenXmlPackage, path: string) {\r\n        super(pkg, path);\r\n    }\r\n\r\n    parseXml(root: Element) {\r\n        this.theme = parseTheme(root, this._package.xmlParser);\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport class DmlTheme {\r\n    colorScheme: DmlColorScheme;\r\n    fontScheme: DmlFontScheme;\r\n}\r\n\r\nexport interface DmlColorScheme {\r\n    name: string;\r\n    colors: Record<string, string>;\r\n}\r\n\r\nexport interface DmlFontScheme {\r\n    name: string;\r\n    majorFont: DmlFormInfo,\r\n    minorFont: DmlFormInfo\r\n}\r\n\r\nexport interface DmlFormInfo {\r\n    latinTypeface: string;\r\n    eaTypeface: string;\r\n    csTypeface: string;\r\n}\r\n\r\nexport function parseTheme(elem: Element, xml: XmlParser) {\r\n    var result = new DmlTheme();\r\n    var themeElements = xml.element(elem, \"themeElements\");\r\n\r\n    for (let el of xml.elements(themeElements)) {\r\n        switch(el.localName) {\r\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\r\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlColorScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n        colors: {}\r\n    };\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        var srgbClr = xml.element(el, \"srgbClr\");\r\n        var sysClr = xml.element(el, \"sysClr\");\r\n\r\n        if (srgbClr) {\r\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\r\n        }\r\n        else if (sysClr) {\r\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\r\n    var result: DmlFontScheme = { \r\n        name: xml.attr(elem, \"name\"),\r\n    } as DmlFontScheme;\r\n\r\n    for (let el of xml.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\r\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\r\n    return {\r\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\r\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\r\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\r\n    };\r\n}","import { OpenXmlElement } from \"./document/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function resolvePath(path: string, base: string): string {\r\n    try {\r\n        const prefix = \"file://docx/\";\r\n        const url = new URL(path, prefix + base).toString();\r\n        return url.substr(prefix.length);\r\n    } catch {\r\n        return `${base}${path}`;\r\n    }\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function clone<T>(object: T): T {\r\n    if(object === undefined) {\r\n        return undefined;\r\n    }\r\n    if(object === null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return JSON.parse(JSON.stringify(object));\r\n    } catch(e) {\r\n        console.warn(`Couldn't clone object:`, object);\r\n        return object;\r\n    }\r\n}\r\n\r\nexport function isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function mergeDeep(target, ...sources) {\r\n    if (!sources.length) \r\n        return target;\r\n    \r\n    const source = sources.shift();\r\n\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                const val = target[key] ?? (target[key] = {});\r\n                mergeDeep(val, source[key]);\r\n            } else {\r\n                target[key] = source[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return mergeDeep(target, ...sources);\r\n}","import { OutputType } from \"jszip\";\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { OpenXmlPackage } from './common/open-xml-package';\r\nimport { DocumentPart } from './document/document-part';\r\nimport { resolvePath, splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport { FooterPart } from \"./footer/footer-part\";\r\nimport { HeaderPart } from \"./header/header-part\";\r\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\r\nimport { CorePropsPart } from \"./document-props/core-props-part\";\r\nimport { ThemePart } from \"./theme/theme-part\";\r\nimport { FootnotesPart } from \"./footnotes/footnotes-part\";\r\n\r\nconst topLevelRels = [\r\n    { type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\", id: \"\" },\r\n    { type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\", id: \"\" },\r\n    { type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\", id: \"\" },\r\n];\r\n\r\nexport class WordDocument {\r\n    private _package: OpenXmlPackage;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n    footnotesPart: FootnotesPart;\r\n    themePart: ThemePart;\r\n    corePropsPart: CorePropsPart;\r\n    extendedPropsPart: ExtendedPropsPart;\r\n\r\n    static load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return OpenXmlPackage.load(blob, options)\r\n            .then(pkg => {\r\n                d._package = pkg;\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                const tasks = topLevelRels.map(rel => {\r\n                    const r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \r\n                    return d.loadRelationshipPart(r.target, r.type, r.id);\r\n                });\r\n\r\n                return Promise.all(tasks);\r\n            }).then(() => d);\r\n    }\r\n\r\n    save(type = \"blob\"): Promise<any> {\r\n        return this._package.save(type);\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string, id: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.get(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Theme:\r\n                this.themePart = part = new ThemePart(this._package, path);\r\n                break;\r\n        \r\n            case RelationshipTypes.Footer:\r\n                part = new FooterPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Header:\r\n                part = new HeaderPart(this._package, path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.CoreProperties:\r\n                this.corePropsPart = part = new CorePropsPart(this._package, path);\r\n                break;\r\n\r\n            case RelationshipTypes.ExtendedProperties:\r\n                this.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load().then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            const [folder] = splitPath(part.path); \r\n            const rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type, rel.id)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    findPartByRelId(id: string, basePart: Part = null) {\r\n        var rel = (basePart.rels ?? this.rels).find(r => r.id == id);\r\n        const folder = basePart ? splitPath(basePart.path)[0] : ''; \r\n        return rel ? this.partsMap[resolvePath(rel.target, folder)] : null;\r\n    }\r\n\r\n    getPathById(part: Part, id: string): string {\r\n        const rel = part.rels.find(x => x.id == id);\r\n        const [folder] = splitPath(part.path); \r\n        return rel ? resolvePath(rel.target, folder) : null;\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: OutputType) {\r\n        const path = this.getPathById(part, id);\r\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__290__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(771);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__290__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","f","fn","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","ignoreWidth","debug","parseFootnotes","result","el","footnote","WmlFootnote","footnoteType","children","parseBodyElements","push","parseFooter","WmlFooter","parseHeader","WmlHeader","parseDocumentFile","xbody","element","background","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","colorAttr","foreach","localName","parseParagraph","parseTable","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyle","rStyle","suff","bullet","find","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","NoBreakHyphen","Break","break","Symbol","font","char","Tab","FootnoteReference","instrText","d","parseDrawing","newChildren","i","length","rItem","run","verticalAlign","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","valueOfStrike","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","asciiTheme","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","knownColors","cb","childNodes","nodeType","Node","ELEMENT_NODE","nodeName","attrName","defValue","autoColor","v","includes","themeColor","Dxa","convertSize","test","intVal","parseInt","Border","Percent","replace","themeValue","valueOfBold","size","trim","a","b","checkMask","num","mask","parseCoreProps","CorePropsPart","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseExtendedProps","ExtendedPropsPart","safeParseToInt","value","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","ns","wordml","drawingml","picture","LengthUsage","mul","unit","Point","LineHeight","usage","endsWith","parseFloat","defaultValue","namespaceURI","fontSize","lengthAttr","pkg","parser","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","parseFooterHeaderReference","SectionType","section","footerRefs","headerRefs","pageSize","height","orientation","pageMargins","top","bottom","header","footer","gutter","forceFirstFooterHeaderDifferent","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","noStyleBlock","renderHeaders","renderFooters","renderFootnotes","data","userOptions","ops","WordDocument","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","fonts","parseFonts","FontTablePart","embedFontTypeMap","embedRegular","embedBold","embedItalic","embedBoldItalic","embedFontRefs","family","altName","parseEmbedFontRef","key","footerElement","FooterPart","Footer","Footnote","headerElement","HeaderPart","Header","htmlDocument","noCssDict","footnoteMap","styleMap","createElement","removeAllElements","appendComment","appendChild","renderDefaultStyle","themePart","renderTheme","stylesPart","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","footnotesPart","keyBy","footnotes","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","wrapper","renderWrapper","appentElements","applyCss","variables","fontScheme","theme","majorFont","latinTypeface","minorFont","colorScheme","Object","entries","colors","k","cssText","styleToString","createStyleElement","fontsPart","ref","loadFont","fontData","cssValues","processClassName","stylesMap","filter","replaceAsciiTheme","basedOnResolved","resolveBaseStyle","cssName","escapeClassName","defaultStyles","defaultOverride","clone","defaultStyle","copyStyle","processElement","processTable","copyStyleProperties","attrs","overideExistingEntries","getOwnPropertyNames","hasOwnProperty","createSection","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","currentFootnoteIds","sectProps","sectionElement","renderStyleValues","headerPart","findHeaderFooter","renderElements","contentElement","footerPart","getFooter","refToUse","refs","page","pageWithinSection","first","even","def","findPartByRelId","isPageBreakElement","lastSectionProps","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","isFirstRenderElement","pop","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","addSectionInnerPageNums","lastSectionId","sectiontPageCount","j","l","styleText","cssRuleCamel","newVal","numberings","listStyleType","rootCounters","numberingClass","toLowerCase","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","join","defautStyles","subStyles","linkedStyle","concat","subStyle","footnoteIds","into","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderContainer","renderFootnoteReference","renderChildren","elems","tagName","renderClass","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","selectorsplits","undefined","camelVal","m","w","toUpperCase","numformat","substring","dict","cont","changeList","count","querySelectorAll","getAttribute","hasStyles","indexOf","changeEntry","baseStyle","base","baseStyleStyles","styleStyleValues","addDefault","translatedFonts","minorLatinFont","hasMinorLatin","substyle","hasFontFamily","child","assign","container","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","t","borderBottom","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","item","elementAttr","attrLocalName","attributes","floatAttr","convertBoolean","convertLength","globalXmlParser","StylesPart","parseTheme","ThemePart","parseColorScheme","srgbClr","sysClr","parseFontScheme","parseFontInfo","eaTypeface","csTypeface","DmlTheme","themeElements","classList","isObject","Array","isArray","si","lastIndexOf","prefix","URL","toString","array","by","reduce","object","JSON","parse","stringify","mergeDeep","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","part","FontTable","Numbering","Styles","Theme","corePropsPart","extendedPropsPart","folder","resolvePath","loadResource","createObjectURL","Blob","deobfuscate","basePart","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}