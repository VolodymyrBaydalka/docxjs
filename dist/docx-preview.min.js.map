{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/themes/themes-part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__290__) {\nreturn ","import JSZip = require(\"jszip\");\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class Package {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    load(path: string, type: \"xml\" | JSZip.OutputType): Promise<any> {\r\n        let file = this._zip.files[path];\r\n\r\n        if (file == null)\r\n            return Promise.resolve(null);\r\n\r\n        if (type == \"xml\")\r\n            return file.async(\"string\").then(t => this.xmlParser.parse(t));\r\n\r\n        return file.async(type);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"xml\").then(xml => {\r\n            return xml == null ? null : parseRelationships(xml, this.xmlParser);\r\n        })\r\n    }\r\n}","import { Package } from \"./package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    rels: Relationship[];\r\n\r\n    constructor(public path: string) {\r\n    }\r\n\r\n    load(pkg: Package): Promise<any> {\r\n        return pkg.loadRelationships(this.path).then(rels => {\r\n            this.rels = rels;\r\n        })\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { RunElement } from './dom/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './dom/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\nimport { ImportantFonts } from \"./font-table/fonts\";\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlDoc: Element) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            cssStyle: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem, globalXmlParser);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"page\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d) {\r\n                        const newChildren = [];\r\n                        // Preserve Page-Breaks before images\r\n                        for(let i=0; i<result.children.length; i++) {\r\n                            const rItem = result.children[i];\r\n                            if(rItem.type === DomType.Break) {\r\n                                newChildren.push(rItem);\r\n                            }\r\n                        }\r\n                        newChildren.push(d);\r\n                        result.children = newChildren;\r\n                    }\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii) {\r\n            style[\"font-family\"] = ascii;\r\n            return;\r\n        }\r\n\r\n        var asciiTheme = xml.stringAttr(node, \"w:asciiTheme\");\r\n        if (asciiTheme) {\r\n            style[\"asciiTheme\"] = asciiTheme;\r\n        }\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseThemesFile(xmlString: string): ImportantFonts {\r\n        const result: ImportantFonts = {};\r\n\r\n        var xthemes = globalXmlParser.parse(xmlString, this.skipDeclaration);\r\n        var majorFontElements = xthemes.getElementsByTagName(\"a:majorFont\");\r\n        var minorFontElements = xthemes.getElementsByTagName(\"a:minorFont\");\r\n        if(majorFontElements && majorFontElements.length === 1) {\r\n            result.majorLatin = this.parseLatinTypeface(majorFontElements[0]);\r\n        }\r\n        if(minorFontElements && minorFontElements.length === 1) {\r\n            result.minorLatin = this.parseLatinTypeface(minorFontElements[0]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private parseLatinTypeface(fontElement: Element): string {\r\n        const latinFontElements = fontElement.getElementsByTagName(\"a:latin\");\r\n        if(latinFontElements && latinFontElements.length === 1) {\r\n            return latinFontElements[0].getAttribute(\"typeface\") ?? \"\";\r\n        }\r\n        return \"\";\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n    noStyleBlock: boolean;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        noStyleBlock: false,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                this.body = this._documentParser.parseDocumentFile(xml);\r\n            });\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    load(pkg: Package): Promise<void> {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(el => {\r\n                this.fonts = parseFonts(el, pkg.xmlParser);\r\n            });\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport interface ImportantFonts {\r\n    majorLatin?: string,\r\n    minorLatin?: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { appendClass, clone, keyBy } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement, RunProperties } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\n\r\ninterface CcsChangeObject {\r\n    cssRuleCamel: string;\r\n    newVal: string;\r\n}\r\n\r\ninterface noCssDictEntry {\r\n    [cssRule: string]: CcsChangeObject\r\n}\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    noCssDict: { [selector: string]: noCssDictEntry } = {};\r\n    styleMap: any;\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n        if (options.noStyleBlock) {\r\n            styleContainer = window.document.createElement(\"div\");\r\n        }\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart) {\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n        }\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n        if (options.noStyleBlock) {\r\n            this.applyCss(this.noCssDict, bodyContainer);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]): Record<string, IDomStyle> {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            this.replaceAsciiTheme(style);\r\n            style.basedOnResolved = !style.basedOn;\r\n            stylesMap[style.id] = style;\r\n        }\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            if (style.basedOnResolved) {\r\n                continue;\r\n            }\r\n            this.resolveBaseStyle(style, stylesMap)\r\n        }\r\n\r\n        for (let style of styles) {\r\n            this.replaceAsciiTheme(style, true);\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n        const defaultStyles = styles.filter(x => x.isDefault);\r\n        const defaultOverride: IDomStyle = clone(defaultStyles[0]);\r\n        defaultOverride.styles = [];\r\n        for (let defaultStyle of defaultStyles) {\r\n            this.copyStyle(defaultStyle, defaultOverride);\r\n        }\r\n        for (let style of styles.filter(x => x.id === null)) {\r\n            this.copyStyle(defaultOverride, style, true);\r\n        }\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(\r\n        input: Record<string, string>,\r\n        output: Record<string, string>,\r\n        attrs: string[] = null,\r\n        overideExistingEntries: boolean = false\r\n    ): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && (overideExistingEntries || !output.hasOwnProperty(key))) {\r\n                output[key] = input[key];\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n\r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for (let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = {sectProps: null, elements: []};\r\n        var result = [current];\r\n        var sectProps;\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = {sectProps: null, elements: []};\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type != DomType.Paragraph) {\r\n                continue;\r\n            }\r\n            const p = elem as ParagraphElement;\r\n            sectProps = p.sectionProps;\r\n            var pBreakIndex = -1;\r\n            var rBreakIndex = -1;\r\n            if (this.options.breakPages && p.children) {\r\n                pBreakIndex = p.children.findIndex(r => {\r\n                    rBreakIndex = r.children?.findIndex(t => (t as BreakElement).break == \"page\") ?? -1;\r\n                    return rBreakIndex != -1;\r\n                });\r\n                if (pBreakIndex > 0) {\r\n                    // Include Bookmarks in breaking\r\n                    while (pBreakIndex > 0 && p.children[pBreakIndex - 1].type === DomType.BookmarkStart) {\r\n                        pBreakIndex--;\r\n                    }\r\n                }\r\n            }\r\n            if (sectProps || (pBreakIndex > -1 && pBreakIndex > (this.isFirstRenderElement(current.elements) ? 0 : -1))) {\r\n                current.sectProps = sectProps;\r\n                current = {sectProps: null, elements: []};\r\n                if (pBreakIndex === 0) {\r\n                    current.elements.push(elem);\r\n                    result[result.length - 1].elements.pop();\r\n                }\r\n                result.push(current);\r\n            }\r\n            if (pBreakIndex <= 0 ||\r\n                !p.children || p.children.length <= pBreakIndex\r\n            ) {\r\n                continue;\r\n            }\r\n            let breakRun = p.children[pBreakIndex];\r\n            if (!breakRun || !breakRun.children) {\r\n                continue;\r\n            }\r\n            let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n            if (!(pBreakIndex < p.children.length - 1 || splitRun)) {\r\n                continue;\r\n            }\r\n            var children = elem.children;\r\n            var newParagraph = {...elem, children: children.slice(pBreakIndex)};\r\n            elem.children = children.slice(0, pBreakIndex);\r\n            current.elements.push(newParagraph);\r\n            if (!splitRun) {\r\n                continue;\r\n            }\r\n            let runChildren = breakRun.children;\r\n            let newRun = {...breakRun, children: runChildren.slice(0, rBreakIndex)};\r\n            elem.children.push(newRun);\r\n            breakRun.children = runChildren.slice(rBreakIndex);\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            }\r\n            else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${c}-wrapper section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${c} { color: black; }\r\n                section.${c} { box-sizing: border-box; }\r\n                .${c} table { border-collapse: collapse; }\r\n                .${c} table td, .${c} table th { vertical-align: top; }\r\n                .${c} p { margin: 0pt; }`;\r\n        if (this.options.noStyleBlock) {\r\n            this.noCssDict[`.${c}-wrapper`] = {\r\n                \"background\": {cssRuleCamel: \"background\", newVal: \"gray\"},\r\n                \"padding\": {cssRuleCamel: \"padding\", newVal: \"30px\"},\r\n                \"padding-bottom\": {cssRuleCamel: \"paddingBottom\", newVal: \"0px\"},\r\n                \"display\": {cssRuleCamel: \"display\", newVal: \"flex\"},\r\n                \"flex-flow\": {cssRuleCamel: \"flexFlow\", newVal: \"column\"},\r\n                \"align-items\": {cssRuleCamel: \"alignItems\", newVal: \"center\"}\r\n            };\r\n            this.noCssDict[`.${c}-wrapper section.${c}`] = {\r\n                \"background\": {cssRuleCamel: \"background\", newVal: \"white\"},\r\n                \"box-shadow\": {cssRuleCamel: \"boxShadow\", newVal: \"0 0 10px rgba(0, 0, 0, 0.5)\"},\r\n                \"margin-bottom\": {cssRuleCamel: \"marginBottom\", newVal: \"30px\"}\r\n            };\r\n            this.noCssDict[`.${c}`] = {\r\n                \"color\": {cssRuleCamel: \"color\", newVal: \"black\"},\r\n            };\r\n            this.noCssDict[`section.${c}`] = {\r\n                \"box-sizing\": {cssRuleCamel: \"boxSizing\", newVal: \"border-box\"},\r\n            };\r\n            this.noCssDict[`.${c} table`] = {\r\n                \"border-collapse\": {cssRuleCamel: \"borderCollapse\", newVal: \"collapse\"},\r\n            };\r\n            this.noCssDict[`.${c} table td`] = {\r\n                \"vertical-align\": {cssRuleCamel: \"verticalAlign\", newVal: \"top\"},\r\n            };\r\n            this.noCssDict[`.${c} table th`] = {\r\n                \"vertical-align\": {cssRuleCamel: \"verticalAlign\", newVal: \"top\"},\r\n            };\r\n            this.noCssDict[`.${c} p`] = {\r\n                \"margin\": {cssRuleCamel: \"margin\", newVal: \"0pt\"},\r\n            };\r\n\r\n        }\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n\r\n            default:\r\n                console.warn(`DomType ${elem.type} has no rendering implementation.`);\r\n                return null;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.htmlDocument.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n\r\n                if (paragraph.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        if (!this.options.noStyleBlock) {\r\n            let result = selectors + \" {\\r\\n\";\r\n\r\n            for (const key in values) {\r\n                result += `  ${key}: ${values[key]};\\r\\n`;\r\n            }\r\n\r\n            if (cssText)\r\n                result += \";\" + cssText;\r\n\r\n            return result + \"}\\r\\n\";\r\n        }\r\n        const selectorsplits = selectors.split(\", \");\r\n        for (let i = 0; i < selectorsplits.length; i++) {\r\n            const split = selectorsplits[i];\r\n            if (this.noCssDict[split] === undefined) {\r\n                this.noCssDict[split] = {};\r\n            }\r\n            for (const key in values) {\r\n                const camelVal = key.replace(/-([a-z])/g, function (m, w) {\r\n                    return w.toUpperCase();\r\n                });\r\n                this.noCssDict[split][key] = {cssRuleCamel: camelVal, newVal: values[key]};\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n\r\n    applyCss(dict: { [selector: string]: noCssDictEntry }, cont: HTMLElement) {\r\n        let changeList: Array<{ selector: string, count: number, styles: noCssDictEntry }> =\r\n            [];\r\n        for (let selector in dict) {\r\n            changeList.push({\r\n                selector: selector,\r\n                count: cont.querySelectorAll(selector).length,\r\n                styles: dict[selector]\r\n            });\r\n        }\r\n        changeList = changeList.sort((a, b) => {\r\n            return a.count - b.count\r\n        });\r\n        for (let i = 0; i < changeList.length; i++) {\r\n            const elements = cont.querySelectorAll(changeList[i].selector);\r\n            for (let j = 0; j < elements.length; j++) {\r\n                const element: HTMLElement = elements[j] as HTMLElement;\r\n                const styles: string = element.getAttribute(\"style\");\r\n                const hasStyles: boolean = styles !== null;\r\n                for (let style in changeList[i].styles) {\r\n                    if (!hasStyles || styles.indexOf(style) === -1) {\r\n                        const changeEntry = changeList[i].styles[style];\r\n                        element.style[changeEntry.cssRuleCamel] = changeEntry.newVal;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private resolveBaseStyle(style: IDomStyle, stylesMap: Record<string, IDomStyle>) {\r\n        let baseStyle = stylesMap[style.basedOn];\r\n\r\n        if (!baseStyle) {\r\n            if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n            return;\r\n        }\r\n\r\n        if (baseStyle.basedOnResolved !== true) {\r\n            // If the base is not resolved yet, resolve that one first\r\n            this.resolveBaseStyle(baseStyle, stylesMap);\r\n            baseStyle = stylesMap[style.basedOn];\r\n        }\r\n        this.copyStyle(baseStyle, style);\r\n        style.basedOnResolved = true;\r\n        stylesMap[style.id] = style;\r\n    }\r\n\r\n    private copyStyle(base: IDomStyle, target: IDomStyle, overideExistingEntries: boolean = false) {\r\n        for (let baseStyleStyles of base.styles) {\r\n            let styleStyleValues = target.styles.filter(x => x.target == baseStyleStyles.target);\r\n            if (styleStyleValues && styleStyleValues.length > 0) {\r\n                styleStyleValues[0].values = this.copyStyleProperties(\r\n                    baseStyleStyles.values, styleStyleValues[0].values, null, overideExistingEntries\r\n                );\r\n            }\r\n            else {\r\n                target.styles.push(clone(baseStyleStyles))\r\n            }\r\n        }\r\n    }\r\n\r\n    private replaceAsciiTheme(style: IDomStyle, addDefault: boolean = false) {\r\n        var translatedFonts = this.document.themesPart.importantFonts;\r\n        const minorLatinFont = translatedFonts.minorLatin;\r\n        const hasMinorLatin = minorLatinFont !== \"\" && minorLatinFont !== undefined\r\n        for (var j = 0; j < style.styles.length; j++) {\r\n            var substyle = style.styles[j];\r\n            var value = substyle.values[\"asciiTheme\"];\r\n            const hasFontFamily = substyle.values[\"font-family\"] !== undefined;\r\n            if (!value) {\r\n                if (addDefault && !hasFontFamily && hasMinorLatin) {\r\n                    substyle.values[\"font-family\"] = minorLatinFont\r\n                }\r\n                continue;\r\n            }\r\n            delete substyle.values[\"asciiTheme\"];\r\n            if (hasFontFamily) {\r\n                continue;\r\n            }\r\n            if (value === \"minorHAnsi\" && translatedFonts.minorLatin) {\r\n                substyle.values[\"font-family\"] = minorLatinFont;\r\n            }\r\n            else if (value === \"majorHAnsi\" && translatedFonts.minorLatin) {\r\n                substyle.values[\"font-family\"] = translatedFonts.majorLatin;\r\n            }\r\n        }\r\n    }\r\n\r\n    private isFirstRenderElement(elements: OpenXmlElement[]) {\r\n        if (elements.length === 1) {\r\n            return true;\r\n        }\r\n        for (let i = elements.length - 2; i >= 0; i--) {\r\n            const element = elements[i];\r\n            if (!element.children || element.children.length === 0) {\r\n                continue;\r\n            }\r\n            for (let j = element.children.length - 1; j >= 0; j--) {\r\n                const run = element.children[j];\r\n                if (run.type !== DomType.Run || !run.children || run.children.length === 0) {\r\n                    continue;\r\n                }\r\n                for (let k = run.children.length - 1; k >= 0; k--) {\r\n                    const child = run.children[k];\r\n                    if (child.type === DomType.BookmarkStart || child.type === DomType.BookmarkEnd || child.type === DomType.Break) {\r\n                        continue;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                Object.assign(this, parseNumberingPart(xml, pkg.xmlParser));\r\n                this.domNumberings = this._documentParser.parseNumberingFile(xml);\r\n            })\r\n    }\r\n}","import { NumberingPicBullet } from \"../dom/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../dom/common\";\r\n\r\nexport class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                this.styles = this._documentParser.parseStylesFile(xml);\r\n            })\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport {ImportantFonts} from \"../font-table/fonts\";\r\n\r\nexport class ThemesPart extends Part {\r\n    importantFonts: ImportantFonts;\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.importantFonts = this._documentParser.parseThemesFile(xml);\r\n            })\r\n    }\r\n}","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}\r\n\r\nexport function clone<T>(object: T): T {\r\n    return JSON.parse(JSON.stringify(object));\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { Package } from './common/package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\nimport {ThemesPart} from \"./themes/themes-part\";\r\n\r\nexport class WordDocument {\r\n    private _package: Package;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n    themesPart: ThemesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return JSZip.loadAsync(blob)\r\n            .then(zip => {\r\n                d._package = new Package(zip);\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Theme:\r\n                this.themesPart = part = new ThemesPart(path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load(this._package).then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: JSZip.OutputType) {\r\n        let rel = part.rels.find(x => x.id == id);\r\n\r\n        if (rel == null)\r\n            return Promise.resolve(null);\r\n\r\n        let [fodler] = splitPath(part.path);\r\n\r\n        return this._package.load(fodler + rel.target, outputType);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__290__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__290__","_zip","xmlParser","XmlParser","exists","path","this","files","load","type","file","Promise","resolve","async","then","t","parse","loadRelationships","relsPath","splitPath","f","fn","xml","parseRelationships","Package","pkg","rels","Part","RelationshipTypes","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","skipDeclaration","ignoreWidth","debug","parseDocumentFile","xmlDoc","result","DomType","Document","children","cssStyle","props","xbody","element","foreach","elem","localName","push","parseParagraph","parseTable","parseSectionProperties","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","bullet","filter","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","text","textContent","fldCharType","Break","break","Symbol","font","char","Tab","instrText","d","parseDrawing","newChildren","i","length","rItem","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","asciiTheme","firstLine","left","start","right","end","before","after","line","lineRule","toFixed","output","parseThemesFile","xmlString","xthemes","majorFontElements","getElementsByTagName","minorFontElements","majorLatin","parseLatinTypeface","minorLatin","fontElement","latinFontElements","getAttribute","DocumentParser","cb","childNodes","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","replace","size","trim","a","b","checkMask","num","mask","data","bodyContainer","styleContainer","userOptions","parser","renderer","HtmlRenderer","window","document","options","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","noStyleBlock","WordDocument","doc","render","BookmarkStart","colFirst","colLast","BookmarkEnd","ns","wordml","LengthUsage","mul","unit","Point","LineHeight","usage","value","namespaceURI","fontSize","lengthAttr","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","SectionType","section","pageSize","height","orientation","pageMargins","top","bottom","header","footer","gutter","el","fonts","parseFonts","FontTablePart","family","altName","fontKey","refId","htmlDocument","noCssDict","styleMap","createElement","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appentElements","applyCss","fontsPart","loadFont","fontData","cssTest","createStyleElement","processClassName","stylesMap","replaceAsciiTheme","basedOnResolved","resolveBaseStyle","cssName","escapeClassName","defaultStyles","defaultOverride","clone","defaultStyle","copyStyle","processElement","processTable","copyStyleProperties","input","attrs","overideExistingEntries","Object","getOwnPropertyNames","key","hasOwnProperty","createSection","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","p","pBreakIndex","rBreakIndex","findIndex","r","isFirstRenderElement","pop","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","styleText","cssRuleCamel","newVal","listStyleType","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","loadNumberingImage","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","selectorsplits","undefined","camelVal","m","w","toUpperCase","substring","dict","cont","changeList","count","querySelectorAll","j","hasStyles","changeEntry","baseStyle","base","baseStyleStyles","styleStyleValues","addDefault","translatedFonts","themesPart","importantFonts","minorLatinFont","hasMinorLatin","substyle","hasFontFamily","k","child","container","firstChild","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","borderBottom","assign","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","numberings","abstractNumberings","bulletPictures","DOMParser","parseFromString","item","attributes","defaultValue","floatAttr","parseFloat","convertLength","globalXmlParser","StylesPart","ThemesPart","classList","si","lastIndexOf","array","by","reduce","object","JSON","stringify","parts","partsMap","blob","_parser","JSZip","loadAsync","zip","_package","OfficeDocument","loadRelationshipPart","part","FontTable","Numbering","Styles","Theme","folder","rel","all","loadResource","URL","createObjectURL","Blob","deobfuscate","outputType","fodler","guidKey","trimmed","numbers","Array","substr","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}