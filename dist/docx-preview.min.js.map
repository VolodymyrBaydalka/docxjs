{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__290__) {\nreturn ","import * as JSZip from \"jszip\";\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\nimport { splitPath } from \"../utils\";\nimport { parseRelationships, Relationship } from \"./relationship\";\n\nexport interface OpenXmlPackageOptions {\n    trimXmlDeclaration: boolean,\n    keepOrigin: boolean,\n}\n\nexport class OpenXmlPackage {\n    xmlParser: XmlParser = new XmlParser();\n\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\n    }\n\n    get(path: string): any {\n        return this._zip.files[normalizePath(path)];\n    }\n\n    update(path: string, content: any) {\n        this._zip.file(path, content);\n    }\n\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\n        return JSZip.loadAsync(input).then(zip => new OpenXmlPackage(zip, options));\n    }\n\n    save(type: any = \"blob\"): Promise<any>  {\n        return this._zip.generateAsync({ type });\n    }\n\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\n    }\n\n    loadRelationships(path: string = null): Promise<Relationship[]> {\n        let relsPath = `_rels/.rels`;\n\n        if (path != null) {\n            const [f, fn] = splitPath(path);\n            relsPath = `${f}_rels/${fn}.rels`;\n        }\n\n        return this.load(relsPath)\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\n    }\n\n    /** @internal */\n    parseXmlDocument(txt: string): Document {\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\n    }\n}\n\nfunction normalizePath(path: string) {\n    return path.startsWith('/') ? path.substr(1) : path;\n}","import { serializeXmlString } from \"../parser/xml-parser\";\nimport { OpenXmlPackage } from \"./open-xml-package\";\nimport { Relationship } from \"./relationship\";\n\nexport class Part {\n    protected _xmlDocument: Document;\n\n    rels: Relationship[];\n\n    constructor(protected _package: OpenXmlPackage, public path: string) {\n    }\n\n    load(): Promise<any> {\n        return Promise.all([\n            this._package.loadRelationships(this.path).then(rels => {\n                this.rels = rels;\n            }),\n            this._package.load(this.path).then(text => {\n                const xmlDoc = this._package.parseXmlDocument(text);\n\n                if (this._package.options.keepOrigin) {\n                    this._xmlDocument = xmlDoc;\n                }\n\n                this.parseXml(xmlDoc.firstElementChild);\n            })\n        ]);\n    }\n\n    save() {\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\n    }\n\n    protected parseXml(root: Element) {\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport interface Relationship {\n    id: string,\n    type: RelationshipTypes | string,\n    target: string\n    targetMode: \"\" | string \n}\n\nexport enum RelationshipTypes {\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\"\n}\n\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\n    return xml.elements(root).map(e => <Relationship>{\n        id: xml.attr(e, \"Id\"),\n        type: xml.attr(e, \"Type\"),\n        target: xml.attr(e, \"Target\"),\n        targetMode: xml.attr(e, \"TargetMode\")\n    });\n}","import {\n    DomType, IDomTable, IDomNumbering,\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\n} from './dom/dom';\nimport * as utils from './utils';\nimport { DocumentElement } from './dom/document';\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\nimport { parseSectionProperties } from './dom/section';\nimport globalXmlParser from './parser/xml-parser';\nimport { RunElement } from './dom/run';\nimport { parseBookmarkEnd, parseBookmarkStart } from './dom/bookmark';\nimport { IDomStyle, IDomSubStyle } from './dom/style';\nimport { WmlFooter } from './footer/footer';\nimport { WmlHeader } from './header/header';\n\nexport var autos = {\n    shd: \"white\",\n    color: \"black\",\n    highlight: \"transparent\"\n};\n\nexport class DocumentParser {\n    // removes XML declaration \n    skipDeclaration: boolean = true;\n\n    // ignores page and table sizes\n    ignoreWidth: boolean = false;\n    debug: boolean = false;\n\n    parseFooter(xmlDoc: Element): WmlFooter {\n        var result = new WmlFooter();\n        result.children = this.parseBodyElements(xmlDoc);\n        return result;\n    }\n\n    parseHeader(xmlDoc: Element): WmlHeader {\n        var result = new WmlHeader();\n        result.children = this.parseBodyElements(xmlDoc);\n        return result;\n    }\n\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\n        var sectPr = globalXmlParser.element(xbody, \"sectPr\");\n\n        return {\n            type: DomType.Document,\n            children: this.parseBodyElements(xbody),\n            props: sectPr ? parseSectionProperties(sectPr, globalXmlParser) : null,\n            cssStyle: {},\n        };\n    }\n\n    parseBodyElements(element: Element): OpenXmlElement[] {\n        var children = [];\n        \n        xml.foreach(element, elem => {\n            switch (elem.localName) {\n                case \"p\":\n                    children.push(this.parseParagraph(elem));\n                    break;\n\n                case \"tbl\":\n                    children.push(this.parseTable(elem));\n                    break;\n            }\n        });\n\n        return children;\n    }\n\n    parseStylesFile(xstyles: Element): IDomStyle[] {\n        var result = [];\n\n        xml.foreach(xstyles, n => {\n            switch (n.localName) {\n                case \"style\":\n                    result.push(this.parseStyle(n));\n                    break;\n\n                case \"docDefaults\":\n                    result.push(this.parseDefaultStyles(n));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseDefaultStyles(node: Element): IDomStyle {\n        var result = <IDomStyle>{\n            id: null,\n            name: null,\n            target: null,\n            basedOn: null,\n            styles: []\n        };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"rPrDefault\":\n                    var rPr = globalXmlParser.element(c, \"rPr\");\n\n                    if (rPr)\n                        result.styles.push({\n                            target: \"span\",\n                            values: this.parseDefaultProperties(rPr, {})\n                        });\n                    break;\n\n                case \"pPrDefault\":\n                    var pPr = globalXmlParser.element(c, \"pPr\");\n\n                    if (pPr)\n                        result.styles.push({\n                            target: \"p\",\n                            values: this.parseDefaultProperties(pPr, {})\n                        });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseStyle(node: Element): IDomStyle {\n        var result = <IDomStyle>{\n            id: xml.stringAttr(node, \"styleId\"),\n            isDefault: xml.boolAttr(node, \"default\"),\n            name: null,\n            target: null,\n            basedOn: null,\n            styles: [],\n            linked: null\n        };\n\n        switch (xml.stringAttr(node, \"type\")) {\n            case \"paragraph\": result.target = \"p\"; break;\n            case \"table\": result.target = \"table\"; break;\n            case \"character\": result.target = \"span\"; break;\n        }\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"basedOn\":\n                    result.basedOn = xml.className(n, \"val\");\n                    break;\n\n                case \"name\":\n                    result.name = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"link\":\n                    result.linked = xml.className(n, \"val\");\n                    break;\n                \n                case \"next\":\n                    result.next = xml.className(n, \"val\");\n                    break;\n    \n                case \"aliases\":\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\n                    break;\n\n                case \"pPr\":\n                    result.styles.push({\n                        target: \"p\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\n                    break;\n\n                case \"rPr\":\n                    result.styles.push({\n                        target: \"span\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\n                    break;\n\n                case \"tblPr\":\n                case \"tcPr\":\n                    result.styles.push({\n                        target: \"td\", //TODO: maybe move to processor\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"tblStylePr\":\n                    for (let s of this.parseTableStyle(n))\n                        result.styles.push(s);\n                    break;\n\n                case \"rsid\":\n                case \"qFormat\":\n                case \"hidden\":\n                case \"semiHidden\":\n                case \"unhideWhenUsed\":\n                case \"autoRedefine\":\n                case \"uiPriority\":\n                    //TODO: ignore\n                    break;\n\n                default:\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\n            }\n        });\n\n        return result;\n    }\n\n    parseTableStyle(node: Element): IDomSubStyle[] {\n        var result = [];\n\n        var type = xml.stringAttr(node, \"type\");\n        var selector = \"\";\n\n        switch (type) {\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\n            case \"firstCol\": selector = \"td.first-col\"; break;\n            case \"lastCol\": selector = \"td.last-col\"; break;\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\n            case \"band2Vert\": selector = \"td.even-col\"; break;\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\n            default: return [];\n        }\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"pPr\":\n                    result.push({\n                        target: selector + \" p\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"rPr\":\n                    result.push({\n                        target: selector + \" span\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"tblPr\":\n                case \"tcPr\":\n                    result.push({\n                        target: selector, //TODO: maybe move to processor\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\n        var result = [];\n        var mapping = {};\n        var bullets = [];\n\n        xml.foreach(xnums, n => {\n            switch (n.localName) {\n                case \"abstractNum\":\n                    this.parseAbstractNumbering(n, bullets)\n                        .forEach(x => result.push(x));\n                    break;\n\n                case \"numPicBullet\":\n                    bullets.push(this.parseNumberingPicBullet(n));\n                    break;\n\n                case \"num\":\n                    var numId = xml.stringAttr(n, \"numId\");\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\n                    mapping[abstractNumId] = numId;\n                    break;\n            }\n        });\n\n        result.forEach(x => x.id = mapping[x.id]);\n\n        return result;\n    }\n\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\n        var pict = globalXmlParser.element(elem, \"pict\");\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\n\n        return imagedata ? {\n            id: xml.intAttr(elem, \"numPicBulletId\"),\n            src: xml.stringAttr(imagedata, \"id\"),\n            style: xml.stringAttr(shape, \"style\")\n        } : null;\n    }\n\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\n        var result = [];\n        var id = xml.stringAttr(node, \"abstractNumId\");\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"lvl\":\n                    result.push(this.parseNumberingLevel(id, n, bullets));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\n        var result: IDomNumbering = {\n            id: id,\n            level: xml.intAttr(node, \"ilvl\"),\n            pStyle: {},\n            rStyle: {},\n            suff: \"tab\"\n        };\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"pPr\":\n                    this.parseDefaultProperties(n, result.pStyle);\n                    break;\n\n                case \"rPr\":\n                    this.parseDefaultProperties(n, result.rStyle);\n                    break;\n\n                case \"lvlPicBulletId\":\n                    var id = xml.intAttr(n, \"val\");\n                    result.bullet = bullets.filter(x => x.id == id)[0];\n                    break;\n\n                case \"lvlText\":\n                    result.levelText = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"numFmt\":\n                    result.format = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"suff\":\n                    result.suff = xml.stringAttr(n, \"val\");\n                    break;\n                }\n        });\n\n        return result;\n    }\n\n\n    parseParagraph(node: Element): OpenXmlElement {\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"r\":\n                    result.children.push(this.parseRun(c, result));\n                    break;\n\n                case \"hyperlink\":\n                    result.children.push(this.parseHyperlink(c, result));\n                    break;\n\n                case \"bookmarkStart\":\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\n                    break;               \n\n                    case \"bookmarkEnd\":\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\n                    break;\n\n                case \"pPr\":\n                    this.parseParagraphProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\n                return true;\n\n            switch (c.localName) {\n                case \"pStyle\":\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\n                    break;\n\n                case \"cnfStyle\":\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\n                    break;\n\n                case \"framePr\":\n                    this.parseFrame(c, paragraph);\n                    break;\n\n                case \"rPr\":\n                    //TODO ignore\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseFrame(node: Element, paragraph: ParagraphElement) {\n        var dropCap = xml.stringAttr(node, \"dropCap\");\n\n        if (dropCap == \"drop\")\n            paragraph.cssStyle[\"float\"] = \"left\";\n    }\n\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\n        var anchor = xml.stringAttr(node, \"anchor\");\n\n        if (anchor)\n            result.href = \"#\" + anchor;\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"r\":\n                    result.children.push(this.parseRun(c, result));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"t\":\n                    result.children.push(<TextElement>{ \n                        type: DomType.Text, \n                        text: c.textContent \n                    });//.replace(\" \", \"\\u00A0\"); // TODO\n                    break;\n                \n                case \"fldChar\":\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\n                    break;\n\n                case \"br\":\n                    result.children.push(<BreakElement>{ \n                        type: DomType.Break, \n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\n                    });\n                    break;\n\n                case \"lastRenderedPageBreak\":\n                    result.children.push(<BreakElement>{ \n                        type: DomType.Break, \n                        break: \"page\"\n                    });\n                    break;\n                \n                case \"sym\":\n                    result.children.push(<SymbolElement>{ \n                        type: DomType.Symbol, \n                        font: xml.stringAttr(c, \"font\"),\n                        char: xml.stringAttr(c, \"char\")\n                    });\n                    break;\n\n                case \"tab\":\n                    result.children.push({ type: DomType.Tab });\n                    break;\n\n                case \"instrText\":\n                    result.instrText = c.textContent;\n                    break;\n\n                case \"drawing\":\n                    let d = this.parseDrawing(c);\n\n                    if (d)\n                        result.children = [d];\n                    break;\n\n                case \"rPr\":\n                    this.parseRunProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseRunProperties(elem: Element, run: RunElement) {\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\n            switch (c.localName) {\n                case \"rStyle\":\n                    run.className = xml.className(c, \"val\");\n                    break;\n\n                case \"vertAlign\":\n                    switch (xml.stringAttr(c, \"val\")) {\n                        case \"subscript\": run.wrapper = \"sub\"; break;\n                        case \"superscript\": run.wrapper = \"sup\"; break;\n                    }\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseDrawing(node: Element): OpenXmlElement {\n        for (var n of globalXmlParser.elements(node)) {\n            switch (n.localName) {\n                case \"inline\":\n                case \"anchor\":\n                    return this.parseDrawingWrapper(n);\n            }\n        }\n    }\n\n    parseDrawingWrapper(node: Element): OpenXmlElement {\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\n        var isAnchor = node.localName == \"anchor\";\n\n        //TODO\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\n\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \n        let simplePos = xml.boolAttr(node, \"simplePos\");\n\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\n\n        for (var n of globalXmlParser.elements(node)) {\n            switch (n.localName) {\n                case \"simplePos\":\n                    if (simplePos) {\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\n                    }\n                    break;\n\n                case \"extent\":\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\n                    break;\n\n                case \"positionH\":\n                case \"positionV\":\n                    if (!simplePos) {\n                        let pos = n.localName == \"positionH\" ? posX : posY;\n                        var alignNode = globalXmlParser.element(n, \"align\");\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\n\n                        if (alignNode)\n                            pos.align = alignNode.textContent;\n\n                        if (offsetNode)\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\n                    }\n                    break;\n\n                case \"wrapTopAndBottom\":\n                    wrapType = \"wrapTopAndBottom\";\n                    break;\n                \n                case \"wrapNone\":\n                    wrapType = \"wrapNone\";\n                    break;\n\n                case \"graphic\":\n                    var g = this.parseGraphic(n);\n\n                    if (g)\n                        result.children.push(g);\n                    break;\n            }\n        }\n\n        if (wrapType == \"wrapTopAndBottom\") {\n            result.cssStyle['display'] = 'block';\n\n            if (posX.align) {\n                result.cssStyle['text-align'] = posX.align;\n                result.cssStyle['width'] = \"100%\";\n            }\n        }\n        else if(wrapType == \"wrapNone\") {\n            result.cssStyle['display'] = 'block';\n            result.cssStyle['position'] = 'relative';\n            result.cssStyle[\"width\"] = \"0px\";\n            result.cssStyle[\"height\"] = \"0px\";\n\n            if(posX.offset)\n                result.cssStyle[\"left\"] = posX.offset;\n            if(posY.offset)\n                result.cssStyle[\"top\"] = posY.offset;\n        }\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\n            result.cssStyle[\"float\"] = posX.align;\n        }\n\n        return result;\n    }\n\n    parseGraphic(elem: Element): OpenXmlElement {\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\n\n        for (let n of globalXmlParser.elements(graphicData)) {\n            switch (n.localName) {\n                case \"pic\":\n                    return this.parsePicture(n);\n            }\n        }\n\n        return null;\n    }\n\n    parsePicture(elem: Element): IDomImage {\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\n        var blip = globalXmlParser.element(blipFill, \"blip\");\n\n        result.src = xml.stringAttr(blip, \"embed\");\n\n        var spPr = globalXmlParser.element(elem, \"spPr\");\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\n\n        result.cssStyle[\"position\"] = \"relative\";\n\n        for (var n of globalXmlParser.elements(xfrm)) {\n            switch (n.localName) {\n                case \"ext\":\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\n                    break;\n\n                case \"off\":\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    parseTable(node: Element): IDomTable {\n        var result: IDomTable = { type: DomType.Table, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"tr\":\n                    result.children.push(this.parseTableRow(c));\n                    break;\n\n                case \"tblGrid\":\n                    result.columns = this.parseTableColumns(c);\n                    break;\n\n                case \"tblPr\":\n                    this.parseTableProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableColumns(node: Element): IDomTableColumn[] {\n        var result = [];\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"gridCol\":\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableProperties(elem: Element, table: IDomTable) {\n        table.cssStyle = {};\n        table.cellStyle = {};\n\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\n            switch (c.localName) {\n                case \"tblStyle\":\n                    table.className = xml.className(c, \"val\");\n                    break;\n\n                case \"tblLook\":\n                    utils.addElementClass(table, values.classNameOftblLook(c));\n                    break;\n\n                case \"tblpPr\":\n                    this.parseTablePosition(c, table);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n\n        switch (table.cssStyle[\"text-align\"]) {\n            case \"center\":\n                delete table.cssStyle[\"text-align\"];\n                table.cssStyle[\"margin-left\"] = \"auto\";\n                table.cssStyle[\"margin-right\"] = \"auto\";\n                break;\n\n            case \"right\":\n                delete table.cssStyle[\"text-align\"];\n                table.cssStyle[\"margin-left\"] = \"auto\";\n                break;\n        }\n    }\n\n    parseTablePosition(node: Element, table: IDomTable) {\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\n\n        table.cssStyle[\"float\"] = 'left';\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\n    }\n\n    parseTableRow(node: Element): IDomTableRow {\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"tc\":\n                    result.children.push(this.parseTableCell(c));\n                    break;\n\n                case \"trPr\":\n                    this.parseTableRowProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\n            switch (c.localName) {\n                case \"cnfStyle\":\n                    row.className = values.classNameOfCnfStyle(c);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseTableCell(node: Element): OpenXmlElement {\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"tbl\":\n                    result.children.push(this.parseTable(c));\n                    break;\n\n                case \"p\":\n                    result.children.push(this.parseParagraph(c));\n                    break;\n\n                case \"tcPr\":\n                    this.parseTableCellProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\n            switch (c.localName) {\n                case \"gridSpan\":\n                    cell.span = xml.intAttr(c, \"val\", null);\n                    break;\n\n                case \"vMerge\": //TODO\n                    break;\n\n                case \"cnfStyle\":\n                    cell.className = values.classNameOfCnfStyle(c);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\n        style = style || {};\n\n\n        xml.foreach(elem, c => {\n            switch (c.localName) {\n                case \"jc\":\n                    style[\"text-align\"] = values.valueOfJc(c);\n                    break;\n\n                case \"textAlignment\":\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\n                    break;\n\n                case \"color\":\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\n                    break;\n\n                case \"sz\":\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\n                    break;\n\n                case \"shd\":\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\n                    break;\n\n                case \"highlight\":\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\n                    break;\n\n                case \"tcW\":\n                    if (this.ignoreWidth)\n                        break;\n\n                case \"tblW\":\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\n                    break;\n\n                case \"trHeight\":\n                    this.parseTrHeight(c, style);\n                    break;\n\n                case \"strike\":\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\n                    break;\n\n                case \"b\":\n                    style[\"font-weight\"] = values.valueOfBold(c);\n                    break;\n\n                case \"i\":\n                    style[\"font-style\"] = \"italic\";\n                    break;\n\n                case \"u\":\n                    this.parseUnderline(c, style);\n                    break;\n\n                case \"ind\":\n                case \"tblInd\":\n                    this.parseIndentation(c, style);\n                    break;\n\n                case \"rFonts\":\n                    this.parseFont(c, style);\n                    break;\n\n                case \"tblBorders\":\n                    this.parseBorderProperties(c, childStyle || style);\n                    break;\n\n                case \"tblCellSpacing\":\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\n                    style[\"border-collapse\"] = \"separate\";\n                    break;\n\n                case \"pBdr\":\n                    this.parseBorderProperties(c, style);\n                    break;\n                \n                case \"bdr\":\n                    style[\"border\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"tcBorders\":\n                    this.parseBorderProperties(c, style);\n                    break;\n\n                case \"noWrap\":\n                    //TODO\n                    //style[\"white-space\"] = \"nowrap\";\n                    break;\n\n                case \"tblCellMar\":\n                case \"tcMar\":\n                    this.parseMarginProperties(c, childStyle || style);\n                    break;\n\n                case \"tblLayout\":\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\n                    break;\n\n                case \"vAlign\":\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\n                    break;\n\n                case \"spacing\":\n                    if (elem.localName == \"pPr\")\n                        this.parseSpacing(c, style);\n                    break;\n\n                case \"lang\":\n                case \"noProof\": //ignore spellcheck\n                case \"webHidden\": // maybe web-hidden should be implemented\n                    //TODO ignore\n                    break;\n\n                default:\n                    if (handler != null && !handler(c))\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\n                    break;\n            }\n        });\n\n        return style;\n    }\n\n    parseUnderline(node: Element, style: Record<string, string>) {\n        var val = xml.stringAttr(node, \"val\");\n\n        if (val == null || val == \"none\")\n            return;\n\n        switch (val) {\n            case \"dash\":\n            case \"dashDotDotHeavy\":\n            case \"dashDotHeavy\":\n            case \"dashedHeavy\":\n            case \"dashLong\":\n            case \"dashLongHeavy\":\n            case \"dotDash\":\n            case \"dotDotDash\":\n                style[\"text-decoration-style\"] = \"dashed\";\n                break;\n\n            case \"dotted\":\n            case \"dottedHeavy\":\n                style[\"text-decoration-style\"] = \"dotted\";\n                break;\n\n            case \"double\":\n                style[\"text-decoration-style\"] = \"double\";\n                break;\n\n            case \"single\":\n            case \"thick\":\n                style[\"text-decoration\"] = \"underline\";\n                break;\n\n            case \"wave\":\n            case \"wavyDouble\":\n            case \"wavyHeavy\":\n                style[\"text-decoration-style\"] = \"wavy\";\n                break;\n\n            case \"words\":\n                style[\"text-decoration\"] = \"underline\";\n                break;\n        }\n\n        var col = xml.colorAttr(node, \"color\");\n\n        if (col)\n            style[\"text-decoration-color\"] = col;\n    }\n\n    parseFont(node: Element, style: Record<string, string>) {\n        var ascii = xml.stringAttr(node, \"ascii\");\n\n        if (ascii)\n            style[\"font-family\"] = ascii;\n    }\n\n    parseIndentation(node: Element, style: Record<string, string>) {\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\n        var hanging = xml.sizeAttr(node, \"hanging\");\n        var left = xml.sizeAttr(node, \"left\");\n        var start = xml.sizeAttr(node, \"start\");\n        var right = xml.sizeAttr(node, \"right\");\n        var end = xml.sizeAttr(node, \"end\");\n\n        if (firstLine) style[\"text-indent\"] = firstLine;\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\n        if (left || start) style[\"margin-left\"] = left || start;\n        if (right || end) style[\"margin-right\"] = right || end;\n    }\n\n    parseSpacing(node: Element, style: Record<string, string>) {\n        var before = xml.sizeAttr(node, \"before\");\n        var after = xml.sizeAttr(node, \"after\");\n        var line = xml.intAttr(node, \"line\", null);\n        var lineRule = xml.stringAttr(node, \"lineRule\");\n\n        if (before) style[\"margin-top\"] = before;\n        if (after) style[\"margin-bottom\"] = after;\n        \n        if (line !== null) {\n            switch(lineRule) {\n                case \"auto\": \n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\n                    break;\n\n                case \"atLeast\":\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\n                    break;\n\n                default:\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\n                    break;\n            }\n        }\n    }\n\n    parseMarginProperties(node: Element, output: Record<string, string>) {\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"left\":\n                    output[\"padding-left\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"right\":\n                    output[\"padding-right\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"top\":\n                    output[\"padding-top\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"bottom\":\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\n                    break;\n            }\n        });\n    }\n\n    parseTrHeight(node: Element, output: Record<string, string>) {\n        switch (xml.stringAttr(node, \"hRule\")) {\n            case \"exact\":\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\n                break;\n\n            case \"atLeast\":\n            default:\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\n                // min-height doesn't work for tr\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \n                break;\n        }\n    }\n\n    parseBorderProperties(node: Element, output: Record<string, string>) {\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"start\":\n                case \"left\":\n                    output[\"border-left\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"end\":\n                case \"right\":\n                    output[\"border-right\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"top\":\n                    output[\"border-top\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"bottom\":\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\n                    break;\n            }\n        });\n    }\n}\n\nenum SizeType {\n    FontSize,\n    Dxa,\n    Emu,\n    Border,\n    Percent\n}\n\nclass xml {\n    static foreach(node: Element, cb: (n: Element) => void) {\n        for (var i = 0; i < node.childNodes.length; i++) {\n            let n = node.childNodes[i];\n\n            if (n.nodeType == 1)\n                cb(<Element>n);\n        }\n    }\n\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\n        var n = globalXmlParser.element(elem, nodeName)\n        return n ? xml.stringAttr(n, attrName) : null;\n    }\n\n    static stringAttr(node: Element, attrName: string) {\n        return globalXmlParser.attr(node, attrName);\n    }\n\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\n        var v = xml.stringAttr(node, attrName);\n\n        switch (v) {\n            case \"yellow\":\n                return v;\n\n            case \"auto\":\n                return autoColor;\n        }\n\n        return v ? `#${v}` : defValue;\n    }\n\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\n        return globalXmlParser.boolAttr(node, attrName, defValue);\n    }\n\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\n        var val = xml.stringAttr(node, attrName);\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\n    }\n\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\n    }\n\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\n        return xml.convertSize(node.textContent, type);\n    }\n\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\n        if (val == null || /.+p[xt]$/.test(val))\n            return val;\n\n        var intVal = parseInt(val);\n\n        switch (type) {\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\n        }\n\n        return val;\n    }\n\n    static className(node: Element, attrName: string) {\n        var val = xml.stringAttr(node, attrName);\n\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\n    }\n}\n\nclass values {\n    static valueOfBold(c: Element) {\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\n    }\n\n    static valueOfSize(c: Element, attr: string) {\n        var type: SizeType = SizeType.Dxa;\n\n        switch (xml.stringAttr(c, \"type\")) {\n            case \"dxa\": break;\n            case \"pct\": type = SizeType.Percent; break;\n        }\n\n        return xml.sizeAttr(c, attr, type);\n    }\n\n    static valueOfStrike(c: Element) {\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\n    }\n\n    static valueOfMargin(c: Element) {\n        return xml.sizeAttr(c, \"w\");\n    }\n\n    static valueOfBorder(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n\n        if (type == \"nil\")\n            return \"none\";\n\n        var color = xml.colorAttr(c, \"color\");\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\n\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\n    }\n\n    static valueOfTblLayout(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\n    }\n\n    static classNameOfCnfStyle(c: Element) {\n        let className = \"\";\n        let val = xml.stringAttr(c, \"val\");\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\n\n        if (val[0] == \"1\") className += \" first-row\";\n        if (val[1] == \"1\") className += \" last-row\";\n        if (val[2] == \"1\") className += \" first-col\";\n        if (val[3] == \"1\") className += \" last-col\";\n        if (val[4] == \"1\") className += \" odd-col\";\n        if (val[5] == \"1\") className += \" even-col\";\n        if (val[6] == \"1\") className += \" odd-row\";\n        if (val[7] == \"1\") className += \" even-row\";\n        if (val[8] == \"1\") className += \" ne-cell\";\n        if (val[9] == \"1\") className += \" nw-cell\";\n        if (val[10] == \"1\") className += \" se-cell\";\n        if (val[11] == \"1\") className += \" sw-cell\";\n\n        return className.trim();\n    }\n\n    static valueOfJc(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n\n        switch (type) {\n            case \"start\":\n            case \"left\": return \"left\";\n            case \"center\": return \"center\";\n            case \"end\":\n            case \"right\": return \"right\";\n            case \"both\": return \"justify\";\n        }\n\n        return type;\n    }\n\n    static valueOfTextAlignment(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n\n        switch (type) {\n            case \"auto\":\n            case \"baseline\": return \"baseline\";\n            case \"top\": return \"top\";\n            case \"center\": return \"middle\";\n            case \"bottom\": return \"bottom\";\n        }\n\n        return type;\n    }\n\n    static addSize(a: string, b: string): string {\n        if (a == null) return b;\n        if (b == null) return a;\n\n        return `calc(${a} + ${b})`; //TODO\n    }\n\n    static checkMask(num: number, mask: number) {\n        return (num & mask) == mask;\n    }\n\n    static classNameOftblLook(c: Element) {\n        let className = \"\";\n\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\n\n        return className.trim();\n    }\n}","import { Part } from \"../common/part\";\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\n\nexport class CorePropsPart extends Part {\n    props: CorePropsDeclaration;\n\n    parseXml(root: Element) {\n        this.props = parseCoreProps(root, this._package.xmlParser);\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport interface CorePropsDeclaration {\n    title: string,\n    description: string,\n    subject: string,\n    creator: string,\n    keywords: string,\n    language: string,\n    lastModifiedBy: string,\n    revision: number,\n}\n\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\n    const result = <CorePropsDeclaration>{};\n\n    for (let el of xmlParser.elements(root)) {\n        switch (el.localName) {\n            case \"title\": result.title = el.textContent; break;\n            case \"description\": result.description = el.textContent; break;\n            case \"subject\": result.subject = el.textContent; break;\n            case \"creator\": result.creator = el.textContent; break;\n            case \"keywords\": result.keywords = el.textContent; break;\n            case \"language\": result.language = el.textContent; break;\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\n        }\n    }\n\n    return result;\n}","import { Part } from \"../common/part\";\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\n\nexport class ExtendedPropsPart extends Part {\n    props: ExtendedPropsDeclaration;\n\n    parseXml(root: Element) {\n        this.props = parseExtendedProps(root, this._package.xmlParser);\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport interface ExtendedPropsDeclaration {\n    template: string,\n    totalTime: number,\n    pages: number,\n    words: number,\n    characters: number,\n    application: string,\n    lines: number,\n    paragraphs: number,\n    company: string,\n    appVersion: string\n}\n\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\n    const result = <ExtendedPropsDeclaration>{\n\n    };\n\n    for (let el of xmlParser.elements(root)) {\n        switch (el.localName) {\n            case \"Template\":\n                result.template = el.textContent;\n                break;\n            case \"Pages\":\n                result.pages = safeParseToInt(el.textContent);\n                break;\n            case \"Words\":\n                result.words = safeParseToInt(el.textContent);\n                break;\n            case \"Characters\":\n                result.characters = safeParseToInt(el.textContent);\n                break;\n            case \"Application\":\n                result.application = el.textContent;\n                break;\n            case \"Lines\":\n                result.lines = safeParseToInt(el.textContent);\n                break;\n            case \"Paragraphs\":\n                result.paragraphs = safeParseToInt(el.textContent);\n                break;\n            case \"Company\":\n                result.company = el.textContent;\n                break;\n            case \"AppVersion\":\n                result.appVersion = el.textContent;\n                break;\n        }\n    }\n\n    return result;\n}\n\nfunction safeParseToInt(value: string): number {\n    if (typeof value === 'undefined')\n        return;\n    return parseInt(value);\n}","import { WordDocument } from './word-document';\nimport { DocumentParser } from './document-parser';\nimport { HtmlRenderer } from './html-renderer';\n\nexport interface Options {\n    inWrapper: boolean;\n    ignoreWidth: boolean;\n    ignoreHeight: boolean;\n    ignoreFonts: boolean;\n    breakPages: boolean;\n    debug: boolean;\n    experimental: boolean;\n    className: string;\n    trimXmlDeclaration: boolean;\n}\n\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\n    var parser = new DocumentParser();\n    var renderer = new HtmlRenderer(window.document);\n\n    var options = { \n        ignoreHeight: false,\n        ignoreWidth: false,\n        ignoreFonts: false,\n        breakPages: true,\n        debug: false,\n        experimental: false,\n        className: \"docx\",\n        inWrapper: true,\n        trimXmlDeclaration: true,\n        ... userOptions\n    };\n\n    parser.ignoreWidth = options.ignoreWidth;\n    parser.debug = options.debug || parser.debug;\n\n    renderer.className = options.className || \"docx\";\n    renderer.inWrapper = options.inWrapper;\n\n    return WordDocument.load(data, parser, { \n        trimXmlDeclaration: options.trimXmlDeclaration\n    }).then(doc => {\n        renderer.render(doc, bodyContainer, styleContainer, options);\n        return doc;\n    })\n}","import { XmlParser } from \"../parser/xml-parser\";\nimport { DomType, OpenXmlElement } from \"./dom\";\n\nexport interface BookmarkStartElement extends OpenXmlElement {\n    id: string;\n    name: string;\n    colFirst: number;\n    colLast: number;\n}\n\nexport interface BookmarkEndElement extends OpenXmlElement {\n    id: string;\n}\n\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\n    return {\n        type: DomType.BookmarkStart,\n        id: xml.attr(elem, \"id\"),\n        name: xml.attr(elem, \"name\"),\n        colFirst: xml.intAttr(elem, \"colFirst\"),\n        colLast: xml.intAttr(elem, \"colLast\")\n    }\n}\n\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\n    return {\n        type: DomType.BookmarkEnd,\n        id: xml.attr(elem, \"id\")\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport const ns = {\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\n}\n\nexport type LengthType = \"px\" | \"pt\" | \"%\";\n\nexport interface Length {\n    value: number;\n    type: LengthType\n}\n\nexport interface Font {\n    name: string;\n    family: string;\n}\n\nexport interface CommonProperties {\n    fontSize: Length;\n    color: string;\n}\n\nexport type LengthUsageType = { mul: number, unit: LengthType };\n\nexport const LengthUsage: Record<string, LengthUsageType> = {\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\n    FontSize: { mul: 0.5, unit: \"pt\" },\n    Border: { mul: 0.125, unit: \"pt\" },\n    Point: { mul: 1, unit: \"pt\" },\n    Percent: { mul: 0.02, unit: \"%\" },\n    LineHeight: { mul: 1 / 240, unit: null }\n}\n\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\n}\n\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\n    if(elem.namespaceURI != ns.wordml)\n        return false;\n\n    switch(elem.localName) {\n        case \"color\": \n            props.color = xml.attr(elem, \"val\");\n            break;\n\n        case \"sz\":\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\n            break;\n\n        default:\n            return false;\n    }\n\n    return true;\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { DocumentElement } from \"./document\";\n\nexport class DocumentPart extends Part {\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n    \n    body: DocumentElement\n\n    parseXml(root: Element) {\n        this.body = this._documentParser.parseDocumentFile(root);\n    }\n}","export enum DomType {\n    Document = \"document\",\n    Paragraph = \"paragraph\",\n    Run = \"run\",\n    Break = \"break\",\n    Table = \"table\",\n    Row = \"row\",\n    Cell = \"cell\",\n    Hyperlink = \"hyperlink\",\n    Drawing = \"drawing\",\n    Image = \"image\",\n    Text = \"text\",\n    Tab = \"tab\",\n    Symbol = \"symbol\",\n    BookmarkStart = \"bookmarkStart\",\n    BookmarkEnd = \"bookmarkEnd\",\n    Footer = \"footer\",\n    Header = \"header\"\n}\n\nexport interface OpenXmlElement {\n    type: DomType;\n    children?: OpenXmlElement[];\n    cssStyle?: Record<string, string>;\n    className?: string;\n    parent?: OpenXmlElement;\n}\n\nexport interface IDomHyperlink extends OpenXmlElement {\n    href?: string;\n}\n\n\nexport interface BreakElement extends OpenXmlElement{\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\n}\n\nexport interface TextElement extends OpenXmlElement{\n    text: string;\n}\n\nexport interface SymbolElement extends OpenXmlElement {\n    font: string;\n    char: string;\n}\n\nexport interface IDomTable extends OpenXmlElement {\n    columns?: IDomTableColumn[];\n    cellStyle?: Record<string, string>;\n}\n\nexport interface IDomTableRow extends OpenXmlElement {\n}\n\nexport interface IDomTableCell extends OpenXmlElement {\n    span?: number;\n}\n\nexport interface IDomImage extends OpenXmlElement {\n    src: string;\n}\n\nexport interface IDomTableColumn {\n    width?: string;\n}\n\nexport interface IDomNumbering {\n    id: string;\n    level: number;\n    pStyle: Record<string, string>;\n    rStyle: Record<string, string>;\n    levelText?: string;\n    format?: string;\n    suff?: string;\n    bullet?: NumberingPicBullet;\n}\n\nexport interface NumberingPicBullet {\n    id: number;\n    src: string;\n    style?: string;\n}\n","import { XmlParser } from \"../parser/xml-parser\";\nimport { Length } from \"./common\";\n\nexport interface LineSpacing {\n    after: Length;\n    before: Length;\n    line: number;\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\n}\n\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\n    return {\n        before: xml.lengthAttr(elem, \"before\"),\n        after: xml.lengthAttr(elem, \"after\"),\n        line: xml.intAttr(elem, \"line\"),\n        lineRule: xml.attr(elem, \"lineRule\")\n    } as LineSpacing;\n}","import { OpenXmlElement } from \"./dom\";\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\nimport { Borders } from \"./border\";\nimport { parseSectionProperties, SectionProperties } from \"./section\";\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\nimport { XmlParser } from \"../parser/xml-parser\";\nimport { parseRunProperties, RunProperties } from \"./run\";\n\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\n}\n\nexport interface ParagraphProperties extends CommonProperties {\n    sectionProps: SectionProperties;\n    tabs: ParagraphTab[];\n    numbering: ParagraphNumbering;\n\n    border: Borders;\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\n    lineSpacing: LineSpacing;\n    keepLines: boolean;\n    keepNext: boolean;\n    pageBreakBefore: boolean;\n    outlineLevel: number;\n    styleName: string;\n\n    runProps: RunProperties;\n}\n\nexport interface ParagraphTab {\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\n    position: Length;\n}\n\nexport interface ParagraphNumbering {\n    id: string;\n    level: number;\n}\n\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\n    let result = <ParagraphProperties>{};\n\n    for(let el of xml.elements(elem)) {\n        parseParagraphProperty(el, result, xml);\n    }\n\n    return result;\n}\n\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\n    if (elem.namespaceURI != ns.wordml)\n        return false;\n\n    if(parseCommonProperty(elem, props, xml))\n        return true;\n\n    switch (elem.localName) {\n        case \"tabs\":\n            props.tabs = parseTabs(elem, xml);\n            break;\n\n        case \"sectPr\":\n            props.sectionProps = parseSectionProperties(elem, xml);\n            break;\n\n        case \"numPr\":\n            props.numbering = parseNumbering(elem, xml);\n            break;\n        \n        case \"spacing\":\n            props.lineSpacing = parseLineSpacing(elem, xml);\n            return false; // TODO\n            break;\n\n        case \"textAlignment\":\n            props.textAlignment = xml.attr(elem, \"val\");\n            return false; //TODO\n            break;\n\n        case \"keepNext\":\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\n            break;\n    \n        case \"keepNext\":\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\n            break;\n        \n        case \"pageBreakBefore\":\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\n            break;\n        \n        case \"outlineLvl\":\n            props.outlineLevel = xml.intAttr(elem, \"val\");\n            break;\n\n        case \"pStyle\":\n            props.styleName = xml.attr(elem, \"val\");\n            break;\n\n        case \"rPr\":\n            props.runProps = parseRunProperties(elem, xml);\n            break;\n        \n        default:\n            return false;\n    }\n\n    return true;\n}\n\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\n    return xml.elements(elem, \"tab\")\n        .map(e => <ParagraphTab>{\n            position: xml.lengthAttr(e, \"pos\"),\n            leader: xml.attr(e, \"leader\"),\n            style: xml.attr(e, \"val\")\n        });\n}\n\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\n    var result = <ParagraphNumbering>{};\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"numId\":\n                result.id = xml.attr(e, \"val\");\n                break;\n\n            case \"ilvl\":\n                result.level = xml.intAttr(e, \"val\");\n                break;\n        }\n    }\n\n    return result;\n}","import { XmlParser } from \"../parser/xml-parser\";\nimport { CommonProperties, parseCommonProperty } from \"./common\";\nimport { OpenXmlElement } from \"./dom\";\n\nexport interface RunElement extends OpenXmlElement, RunProperties {\n    id?: string;\n    wrapper?: string;\n    href?: string;\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\n    instrText?: string;\n}\n\nexport interface RunProperties extends CommonProperties {\n\n}\n\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\n    let result = <RunProperties>{};\n\n    for(let el of xml.elements(elem)) {\n        parseRunProperty(el, result, xml);\n    }\n\n    return result;\n}\n\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\n    if (parseCommonProperty(elem, props, xml))\n        return true;\n\n    return false;\n}","import { XmlParser } from \"../parser/xml-parser\";\nimport { Length } from \"./common\";\n\nexport interface Column {\n    space: Length;\n    width: Length;\n}\n\nexport interface Columns {\n    space: Length;\n    numberOfColumns: number;\n    separator: boolean;\n    equalWidth: boolean;\n    columns: Column[];\n}\n\nexport interface PageSize {\n    width: Length, \n    height: Length, \n    orientation: \"landscape\" | string \n}\n\nexport interface PageMargins {\n    top: Length;\n    right: Length;\n    bottom: Length;\n    left: Length;\n    header: Length;\n    footer: Length;\n    gutter: Length;\n}\n\nexport enum SectionType {\n    Continuous = \"continuous\",\n    NextPage = \"nextPage\", \n    NextColumn = \"nextColumn\",\n    EvenPage = \"evenPage\",\n    OddPage = \"oddPage\",\n}\n\nexport interface SectionProperties {\n    type: SectionType | string;\n    pageSize: PageSize,\n    pageMargins: PageMargins,\n    columns: Columns;\n}\n\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\n    var section = <SectionProperties>{};\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"pgSz\":\n                section.pageSize = {\n                    width: xml.lengthAttr(e, \"w\"),\n                    height: xml.lengthAttr(e, \"h\"),\n                    orientation: xml.attr(e, \"orient\")\n                }\n                break;\n\n            case \"type\":\n                section.type = xml.attr(e, \"val\");\n                break;\n\n            case \"pgMar\":\n                section.pageMargins = {\n                    left: xml.lengthAttr(e, \"left\"),\n                    right: xml.lengthAttr(e, \"right\"),\n                    top: xml.lengthAttr(e, \"top\"),\n                    bottom: xml.lengthAttr(e, \"bottom\"),\n                    header: xml.lengthAttr(e, \"header\"),\n                    footer: xml.lengthAttr(e, \"footer\"),\n                    gutter: xml.lengthAttr(e, \"gutter\"),\n                };\n                break;\n\n            case \"cols\":\n                section.columns = parseColumns(e, xml);\n                break;\n        }\n    }\n\n    return section;\n}\n\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\n    return {\n        numberOfColumns: xml.intAttr(elem, \"num\"),\n        space: xml.lengthAttr(elem, \"space\"),\n        separator: xml.boolAttr(elem, \"sep\"),\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\n        columns: xml.elements(elem, \"col\")\n            .map(e => <Column>{\n                width: xml.lengthAttr(e, \"w\"),\n                space: xml.lengthAttr(e, \"space\")\n            })\n    };\n}","import { Part } from \"../common/part\";\nimport { FontDeclaration, parseFonts } from \"./fonts\";\n\nexport class FontTablePart extends Part {\n    fonts: FontDeclaration[];\n\n    parseXml(root: Element) {\n        this.fonts = parseFonts(root, this._package.xmlParser);\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport interface FontDeclaration {\n    name: string,\n    altName: string,\n    family: string,\n    fontKey: string,\n    refId: string\n}\n\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\n}\n\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\n    let result = <FontDeclaration>{\n        name: xmlParser.attr(elem, \"name\")\n    };\n\n    for (let el of xmlParser.elements(elem)) {\n        switch (el.localName) {\n            case \"family\":\n                result.family = xmlParser.attr(el, \"val\");\n                break;\n\n            case \"altName\":\n                result.altName = xmlParser.attr(el, \"val\");\n                break;\n\n            case \"embedRegular\":\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\n                result.refId = xmlParser.attr(el, \"id\");\n                break;\n        }\n    }\n\n    return result;\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { WmlFooter } from \"./footer\";\n\nexport class FooterPart extends Part {\n    footerElement: WmlFooter;\n    \n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n    \n    parseXml(root: Element) {\n        this.footerElement = this._documentParser.parseFooter(root);\n    }\n}","import { DomType, OpenXmlElement } from \"../dom/dom\";\n\nexport class WmlFooter implements OpenXmlElement {\n    type: DomType = DomType.Footer;\n    children?: OpenXmlElement[] = [];\n    cssStyle?: Record<string, string> = {};\n    className?: string;\n    parent?: OpenXmlElement;\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { WmlHeader } from \"./header\";\n\nexport class HeaderPart extends Part {\n    headerElement: WmlHeader;\n\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    parseXml(root: Element) {\n        this.headerElement = this._documentParser.parseHeader(root);\n    }\n}","import { DomType, OpenXmlElement } from \"../dom/dom\";\n\nexport class WmlHeader implements OpenXmlElement {\n    type: DomType = DomType.Header;\n    children?: OpenXmlElement[] = [];\n    cssStyle?: Record<string, string> = {};\n    className?: string;\n    parent?: OpenXmlElement;\n}","import { WordDocument } from './word-document';\nimport {\n    DomType, IDomTable, IDomNumbering,\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement\n} from './dom/dom';\nimport { Length, CommonProperties } from './dom/common';\nimport { Options } from './docx-preview';\nimport { DocumentElement } from './dom/document';\nimport { ParagraphElement } from './dom/paragraph';\nimport { appendClass } from './utils';\nimport { updateTabStop } from './javascript';\nimport { FontTablePart } from './font-table/font-table';\nimport { SectionProperties } from './dom/section';\nimport { RunElement, RunProperties } from './dom/run';\nimport { BookmarkStartElement } from './dom/bookmark';\nimport { IDomStyle } from './dom/style';\n\nexport class HtmlRenderer {\n\n    inWrapper: boolean = true;\n    className: string = \"docx\";\n    document: WordDocument;\n    options: Options;\n    styleMap: any;\n\n    constructor(public htmlDocument: Document) {\n    }\n\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\n        this.document = document;\n        this.options = options;\n        this.styleMap = null;\n\n        styleContainer = styleContainer || bodyContainer;\n\n        removeAllElements(styleContainer);\n        removeAllElements(bodyContainer);\n\n        appendComment(styleContainer, \"docxjs library predefined styles\");\n        styleContainer.appendChild(this.renderDefaultStyle());\n\n        if (document.stylesPart != null) {\n            this.styleMap = this.processStyles(document.stylesPart.styles);\n\n            appendComment(styleContainer, \"docx document styles\");\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\n        }\n\n        if (document.numberingPart) {\n            appendComment(styleContainer, \"docx document numbering styles\");\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\n        }\n\n        if (!options.ignoreFonts && document.fontTablePart)\n            this.renderFontTable(document.fontTablePart, styleContainer);\n\n        var sectionElements = this.renderSections(document.documentPart.body);\n\n        if (this.inWrapper) {\n            var wrapper = this.renderWrapper();\n            appentElements(wrapper, sectionElements);\n            bodyContainer.appendChild(wrapper);\n        }\n        else {\n            appentElements(bodyContainer, sectionElements);\n        }\n    }\n\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\n        for (let f of fontsPart.fonts.filter(x => x.refId)) {\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\n                var cssTest = `@font-face {\n                    font-family: \"${f.name}\";\n                    src: url(${fontData});\n                }`;\n\n                appendComment(styleContainer, `Font ${f.name}`);\n                styleContainer.appendChild(createStyleElement(cssTest));\n            });\n        }\n    }\n\n    processClassName(className: string) {\n        if (!className)\n            return this.className;\n\n        return `${this.className}_${className}`;\n    }\n\n    processStyles(styles: IDomStyle[]) {\n        var stylesMap: Record<string, IDomStyle> = {};\n\n        for (let style of styles.filter(x => x.id != null)) {\n            stylesMap[style.id] = style;\n        }\n\n        for (let style of styles.filter(x => x.basedOn)) {\n            var baseStyle = stylesMap[style.basedOn];\n\n            if (baseStyle) {\n                for (let styleValues of style.styles) {\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\n\n                    if (baseValues && baseValues.length > 0)\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\n                }\n            }\n            else if (this.options.debug)\n                console.warn(`Can't find base style ${style.basedOn}`);\n        }\n\n        for (let style of styles) {\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\n        }\n\n        return stylesMap;\n    }\n\n    processElement(element: OpenXmlElement) {\n        if (element.children) {\n            for (var e of element.children) {\n                e.className = this.processClassName(e.className);\n                e.parent = element;\n\n                if (e.type == DomType.Table) {\n                    this.processTable(e);\n                }\n                else {\n                    this.processElement(e);\n                }\n            }\n        }\n    }\n\n    processTable(table: IDomTable) {\n        for (var r of table.children) {\n            for (var c of r.children) {\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\n                ]);\n\n                this.processElement(c);\n            }\n        }\n    }\n\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\n        if (!input)\n            return output;\n\n        if (output == null) output = {};\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\n\n        for (var key of attrs) {\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\n                output[key] = input[key];\n        }\n\n        return output;\n    }\n\n    createSection(className: string, props: SectionProperties) {\n        var elem = this.htmlDocument.createElement(\"section\");\n\n        elem.className = className;\n\n        if (props) {\n            if (props.pageMargins) {\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\n            }\n\n            if (props.pageSize) {\n                if (!this.options.ignoreWidth)\n                    elem.style.width = this.renderLength(props.pageSize.width);\n                if (!this.options.ignoreHeight)\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\n            }\n\n            if (props.columns && props.columns.numberOfColumns) {\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\n                elem.style.columnGap = this.renderLength(props.columns.space);\n\n                if (props.columns.separator) {\n                    elem.style.columnRule = \"1px solid black\";\n                }\n            }\n        }\n\n        return elem;\n    }\n\n    renderSections(document: DocumentElement): HTMLElement[] {\n        var result = [];\n\n        this.processElement(document);\n\n        for (let section of this.splitBySection(document.children)) {\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\n            this.renderElements(section.elements, document, sectionElement);\n            result.push(sectionElement);\n        }\n\n        return result;\n    }\n\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\n        var current = { sectProps: null, elements: [] };\n        var result = [current];\n\n        for (let elem of elements) {\n            if (elem.type == DomType.Paragraph) {\n                const styleName = (elem as ParagraphElement).styleName;\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\n\n                if (s?.paragraphProps?.pageBreakBefore) {\n                    current.sectProps = sectProps;\n                    current = { sectProps: null, elements: [] };\n                    result.push(current);\n                }\n            }\n\n            current.elements.push(elem);\n\n            if (elem.type == DomType.Paragraph) {\n                const p = elem as ParagraphElement;\n\n                var sectProps = p.sectionProps;\n                var pBreakIndex = -1;\n                var rBreakIndex = -1;\n\n                if (this.options.breakPages && p.children) {\n                    pBreakIndex = p.children.findIndex(r => {\n                        rBreakIndex = r.children?.findIndex(t => (t as BreakElement).break == \"page\") ?? -1;\n                        return rBreakIndex != -1;\n                    });\n                }\n\n                if (sectProps || pBreakIndex != -1) {\n                    current.sectProps = sectProps;\n                    current = { sectProps: null, elements: [] };\n                    result.push(current);\n                }\n\n                if (pBreakIndex != -1) {\n                    let breakRun = p.children[pBreakIndex];\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\n\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\n                        var children = elem.children;\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\n                        elem.children = children.slice(0, pBreakIndex);\n                        current.elements.push(newParagraph);\n\n                        if (splitRun) {\n                            let runChildren = breakRun.children;\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\n                            elem.children.push(newRun);\n                            breakRun.children = runChildren.slice(rBreakIndex);\n                        }\n                    }\n                }\n            }\n        }\n\n        let currentSectProps = null;\n\n        for (let i = result.length - 1; i >= 0; i--) {\n            if (result[i].sectProps == null) {\n                result[i].sectProps = currentSectProps;\n            } else {\n                currentSectProps = result[i].sectProps\n            }\n        }\n\n        return result;\n    }\n\n    renderLength(l: Length): string {\n        return l ? `${l.value}${l.type}` : null;\n    }\n\n    renderWrapper() {\n        var wrapper = document.createElement(\"div\");\n\n        wrapper.className = `${this.className}-wrapper`\n\n        return wrapper;\n    }\n\n    renderDefaultStyle() {\n        var c = this.className;\n        var styleText = `\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \n.${c}-wrapper section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\n.${c} { color: black; }\nsection.${c} { box-sizing: border-box; }\n.${c} table { border-collapse: collapse; }\n.${c} table td, .${c} table th { vertical-align: top; }\n.${c} p { margin: 0pt; min-height: 1em; }\n`;\n\n        return createStyleElement(styleText);\n    }\n\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\n    //     let css = \"\";\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\n    //     const topCounters = [];\n\n    //     for(let num of numberingPart.numberings) {\n    //         const absNum = numberingMap[num.abstractId];\n\n    //         for(let lvl of absNum.levels) {\n    //             const className = this.numberingClass(num.id, lvl.level);\n    //             let listStyleType = \"none\";\n\n    //             if(lvl.text && lvl.format == 'decimal') {\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\n\n    //                 if (lvl.level > 0) {\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\n    //                         \"counter-reset\": counter\n    //                     });\n    //                 } else {\n    //                     topCounters.push(counter);\n    //                 }\n\n    //                 css += this.styleToString(`p.${className}:before`, {\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\n    //                     \"counter-increment\": counter\n    //                 });\n    //             } else if(lvl.bulletPictureId) {\n    //                 let pict = bulletMap[lvl.bulletPictureId];\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\n\n    //                 css += this.styleToString(`p.${className}:before`, {\n    //                     \"content\": \"' '\",\n    //                     \"display\": \"inline-block\",\n    //                     \"background\": `var(${variable})`\n    //                 }, pict.style);\n\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\n    //                     container.appendChild(createStyleElement(text));\n    //                 });\n    //             } else {\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\n    //             }\n\n    //             css += this.styleToString(`p.${className}`, {\n    //                 \"display\": \"list-item\",\n    //                 \"list-style-position\": \"inside\",\n    //                 \"list-style-type\": listStyleType,\n    //                 //TODO\n    //                 //...num.style\n    //             });\n    //         }\n    //     }\n\n    //     if (topCounters.length > 0) {\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\n    //             \"counter-reset\": topCounters.join(\" \")\n    //         });\n    //     }\n\n    //     return createStyleElement(css);\n    // }\n\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\n        var styleText = \"\";\n        var rootCounters = [];\n\n        for (var num of numberings) {\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\n            var listStyleType = \"none\";\n\n            if (num.bullet) {\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\n\n                styleText += this.styleToString(`${selector}:before`, {\n                    \"content\": \"' '\",\n                    \"display\": \"inline-block\",\n                    \"background\": `var(${valiable})`\n                }, num.bullet.style);\n\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\n                    styleContainer.appendChild(createStyleElement(text));\n                });\n            }\n            else if (num.levelText) {\n                let counter = this.numberingCounter(num.id, num.level);\n\n                if (num.level > 0) {\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\n                        \"counter-reset\": counter\n                    });\n                }\n                else {\n                    rootCounters.push(counter);\n                }\n\n                styleText += this.styleToString(`${selector}:before`, {\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\n                    \"counter-increment\": counter,\n                    ...num.rStyle,\n                });\n            }\n            else {\n                listStyleType = this.numFormatToCssValue(num.format);\n            }\n\n            styleText += this.styleToString(selector, {\n                \"display\": \"list-item\",\n                \"list-style-position\": \"inside\",\n                \"list-style-type\": listStyleType,\n                ...num.pStyle\n            });\n        }\n\n        if (rootCounters.length > 0) {\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\n                \"counter-reset\": rootCounters.join(\" \")\n            });\n        }\n\n        return createStyleElement(styleText);\n    }\n\n    renderStyles(styles: IDomStyle[]): HTMLElement {\n        var styleText = \"\";\n        var stylesMap = this.styleMap;\n\n        for (let style of styles) {\n            var subStyles = style.styles;\n\n            if (style.linked) {\n                var linkedStyle = style.linked && stylesMap[style.linked];\n\n                if (linkedStyle)\n                    subStyles = subStyles.concat(linkedStyle.styles);\n                else if (this.options.debug)\n                    console.warn(`Can't find linked style ${style.linked}`);\n            }\n\n            for (var subStyle of subStyles) {\n                var selector = \"\";\n\n                if (style.target == subStyle.target)\n                    selector += `${style.target}.${style.cssName}`;\n                else if (style.target)\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\n                else\n                    selector += `.${style.cssName} ${subStyle.target}`;\n\n                if (style.isDefault && style.target)\n                    selector = `.${this.className} ${style.target}, ` + selector;\n\n                styleText += this.styleToString(selector, subStyle.values);\n            }\n        }\n\n        return createStyleElement(styleText);\n    }\n\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\n        switch (elem.type) {\n            case DomType.Paragraph:\n                return this.renderParagraph(<ParagraphElement>elem);\n\n            case DomType.BookmarkStart:\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\n\n            case DomType.BookmarkEnd:\n                return null;\n\n            case DomType.Run:\n                return this.renderRun(<RunElement>elem);\n\n            case DomType.Table:\n                return this.renderTable(elem);\n\n            case DomType.Row:\n                return this.renderTableRow(elem);\n\n            case DomType.Cell:\n                return this.renderTableCell(elem);\n\n            case DomType.Hyperlink:\n                return this.renderHyperlink(elem);\n\n            case DomType.Drawing:\n                return this.renderDrawing(<IDomImage>elem);\n\n            case DomType.Image:\n                return this.renderImage(<IDomImage>elem);\n\n            case DomType.Text:\n                return this.renderText(<TextElement>elem);\n\n            case DomType.Tab:\n                return this.renderTab(elem);\n\n            case DomType.Symbol:\n                return this.renderSymbol(<SymbolElement>elem);\n\n            case DomType.Break:\n                return this.renderBreak(<BreakElement>elem);\n        }\n\n        return null;\n    }\n\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\n        return this.renderElements(elem.children, elem, into);\n    }\n\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\n        if (elems == null)\n            return null;\n\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\n\n        if (into)\n            for (let c of result)\n                into.appendChild(c);\n\n        return result;\n    }\n\n    renderParagraph(elem: ParagraphElement) {\n        var result = this.htmlDocument.createElement(\"p\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        this.renderCommonProeprties(result.style, elem);\n\n        if (elem.numbering) {\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\n            result.className = appendClass(result.className, numberingClass);\n        }\n\n        if (elem.styleName) {\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\n            result.className = appendClass(result.className, styleClassName);\n        }\n\n        return result;\n    }\n\n    renderRunProperties(style: any, props: RunProperties) {\n        this.renderCommonProeprties(style, props);\n    }\n\n    renderCommonProeprties(style: any, props: CommonProperties) {\n        if (props == null)\n            return;\n\n        if (props.color) {\n            style[\"color\"] = props.color;\n        }\n\n        if (props.fontSize) {\n            style[\"font-size\"] = this.renderLength(props.fontSize);\n        }\n    }\n\n    renderHyperlink(elem: IDomHyperlink) {\n        var result = this.htmlDocument.createElement(\"a\");\n\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (elem.href)\n            result.href = elem.href\n\n        return result;\n    }\n\n    renderDrawing(elem: IDomImage) {\n        var result = this.htmlDocument.createElement(\"div\");\n\n        result.style.display = \"inline-block\";\n        result.style.position = \"relative\";\n        result.style.textIndent = \"0px\";\n\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        return result;\n    }\n\n    renderImage(elem: IDomImage) {\n        let result = this.htmlDocument.createElement(\"img\");\n\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (this.document) {\n            this.document.loadDocumentImage(elem.src).then(x => {\n                result.src = x;\n            });\n        }\n\n        return result;\n    }\n\n    renderText(elem: TextElement) {\n        const text = elem.text ? elem.text.replace(/ /g, '\\u00A0') : '';\n        return this.htmlDocument.createTextNode(text);\n    }\n\n    renderBreak(elem: BreakElement) {\n        if (elem.break == \"textWrapping\") {\n            return this.htmlDocument.createElement(\"br\");\n        }\n\n        return null;\n    }\n\n    renderSymbol(elem: SymbolElement) {\n        var span = this.htmlDocument.createElement(\"span\");\n        span.style.fontFamily = elem.font;\n        span.innerHTML = `&#x${elem.char};`\n        return span;\n    }\n\n    renderTab(elem: OpenXmlElement) {\n        var tabSpan = this.htmlDocument.createElement(\"span\");\n\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\n\n        if (this.options.experimental) {\n            setTimeout(() => {\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\n\n                if (paragraph.tabs == null)\n                    return;\n\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\n                tabSpan.style.display = \"inline-block\";\n                updateTabStop(tabSpan, paragraph.tabs);\n            }, 0);\n        }\n\n        return tabSpan;\n    }\n\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\n        var result = this.htmlDocument.createElement(\"span\");\n        result.id = elem.name;\n        return result;\n    }\n\n    renderRun(elem: RunElement) {\n        if (elem.fldCharType || elem.instrText)\n            return null;\n\n        var result = this.htmlDocument.createElement(\"span\");\n\n        if (elem.id)\n            result.id = elem.id;\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (elem.href) {\n            var link = this.htmlDocument.createElement(\"a\");\n\n            link.href = elem.href;\n            link.appendChild(result);\n\n            return link;\n        }\n        else if (elem.wrapper) {\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\n            wrapper.appendChild(result);\n            return wrapper;\n        }\n\n        return result;\n    }\n\n    renderTable(elem: IDomTable) {\n        let result = this.htmlDocument.createElement(\"table\");\n\n        if (elem.columns)\n            result.appendChild(this.renderTableColumns(elem.columns));\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        return result;\n    }\n\n    renderTableColumns(columns: IDomTableColumn[]) {\n        let result = this.htmlDocument.createElement(\"colGroup\");\n\n        for (let col of columns) {\n            let colElem = this.htmlDocument.createElement(\"col\");\n\n            if (col.width)\n                colElem.style.width = col.width;\n\n            result.appendChild(colElem);\n        }\n\n        return result;\n    }\n\n    renderTableRow(elem: OpenXmlElement) {\n        let result = this.htmlDocument.createElement(\"tr\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        return result;\n    }\n\n    renderTableCell(elem: IDomTableCell) {\n        let result = this.htmlDocument.createElement(\"td\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (elem.span) result.colSpan = elem.span;\n\n        return result;\n    }\n\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\n        if (style == null)\n            return;\n\n        for (let key in style) {\n            if (style.hasOwnProperty(key)) {\n                ouput.style[key] = style[key];\n            }\n        }\n    }\n\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\n        if (input.className)\n            ouput.className = input.className;\n    }\n\n    numberingClass(id: string, lvl: number) {\n        return `${this.className}-num-${id}-${lvl}`;\n    }\n\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\n        let result = selectors + \" {\\r\\n\";\n\n        for (const key in values) {\n            result += `  ${key}: ${values[key]};\\r\\n`;\n        }\n\n        if (cssText)\n            result += \";\" + cssText;\n\n        return result + \"}\\r\\n\";\n    }\n\n    numberingCounter(id: string, lvl: number) {\n        return `${this.className}-num-${id}-${lvl}`;\n    }\n\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\n        const suffMap = {\n            \"tab\": \"\\\\9\",\n            \"space\": \"\\\\a0\",            \n        };\n\n        var result = text.replace(/%\\d*/g, s => {\n            let lvl = parseInt(s.substring(1), 10) - 1;\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\n        });\n\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\n    }\n\n    numFormatToCssValue(format: string) {\n        var mapping = {\n            \"none\": \"none\",\n            \"bullet\": \"disc\",\n            \"decimal\": \"decimal\",\n            \"lowerLetter\": \"lower-alpha\",\n            \"upperLetter\": \"upper-alpha\",\n            \"lowerRoman\": \"lower-roman\",\n            \"upperRoman\": \"upper-roman\",\n        };\n\n        return mapping[format] || format;\n    }\n\n    escapeClassName(className: string) {\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\n    }\n}\n\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\n    for (let c of children)\n        container.appendChild(c);\n}\n\nfunction removeAllElements(elem: HTMLElement) {\n    while (elem.firstChild) {\n        elem.removeChild(elem.firstChild);\n    }\n}\n\nfunction createStyleElement(cssText: string) {\n    var styleElement = document.createElement(\"style\");\n    styleElement.innerHTML = cssText;\n    return styleElement;\n}\n\nfunction appendComment(elem: HTMLElement, comment: string) {\n    elem.appendChild(document.createComment(comment));\n}\n\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\n    var parent = elem.parent;\n\n    while (parent != null && parent.type != type)\n        parent = parent.parent;\n\n    return <T>parent;\n}","import { ParagraphTab } from \"./dom/paragraph\";\n\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\n\n    let p = elem.closest(\"p\");\n\n    let tbb = elem.getBoundingClientRect();\n    let pbb = p.getBoundingClientRect();\n\n    let left = (tbb.left - pbb.left) * pixelToPoint;\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\n\n    if(tab == null)\n        return;\n\n    elem.style.display = \"inline-block\";\n    elem.style.width = `${(tab.position.value - left)}pt`;    \n\n    switch (tab.leader) {\n        case \"dot\":\n        case \"middleDot\":\n            elem.style.borderBottom = \"1px black dotted\";\n            break;\n\n        case \"hyphen\":\n        case \"heavy\":\n        case \"underscore\":\n            elem.style.borderBottom = \"1px black solid\";\n            break;\n    }\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { IDomNumbering } from \"../dom/dom\";\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\n\nexport class NumberingPart extends Part implements NumberingPartProperties {\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    numberings: Numbering[];\n    abstractNumberings: AbstractNumbering[];\n    bulletPictures: NumberingBulletPicture[];\n    \n    domNumberings: IDomNumbering[];\n\n    parseXml(root: Element) {\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \n    }\n}","import { NumberingPicBullet } from \"../dom/dom\";\nimport { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\nimport { XmlParser } from \"../parser/xml-parser\";\n\nexport interface NumberingPartProperties {\n    numberings: Numbering[];\n    abstractNumberings: AbstractNumbering[];\n    bulletPictures: NumberingBulletPicture[];\n}\n\nexport interface Numbering {\n    id: string;\n    abstractId: string;\n    overrides: NumberingLevelOverride[];\n}\n\nexport interface NumberingLevelOverride {\n    level: number;\n    start: number;\n    numberingLevel: NumberingLevel;\n}\n\nexport interface AbstractNumbering {\n    id: string;\n    name: string;\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\n    levels: NumberingLevel[];\n    numberingStyleLink: string;\n    styleLink: string;\n}\n\nexport interface NumberingLevel {\n    level: number;\n    start: string;\n    restart: number;\n    format: 'lowerRoman' | 'lowerLetter' | string;\n    text: string;\n    justification: string;\n    bulletPictureId: string;\n    paragraphProps: ParagraphProperties;\n    runProps: RunProperties;\n}\n\nexport interface NumberingBulletPicture {\n    id: string;\n    referenceId: string;\n    style: string;\n}\n\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\n    let result: NumberingPartProperties = {\n        numberings: [],\n        abstractNumberings: [],\n        bulletPictures: []\n    }\n    \n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"num\":\n                result.numberings.push(parseNumbering(e, xml));\n                break;\n            case \"abstractNum\":\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\n                break;\n            case \"numPicBullet\":\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\n    let result = <Numbering>{\n        id: xml.attr(elem, 'numId'),\n        overrides: []\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"abstractNumId\":\n                result.abstractId = xml.attr(e, \"val\");\n                break;\n            case \"lvlOverride\":\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\n    let result = <AbstractNumbering>{\n        id: xml.attr(elem, 'abstractNumId'),\n        levels: []\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"name\":\n                result.name = xml.attr(e, \"val\");\n                break;\n            case \"multiLevelType\":\n                result.multiLevelType = xml.attr(e, \"val\");\n                break;\n            case \"numStyleLink\":\n                result.numberingStyleLink = xml.attr(e, \"val\");\n                break;\n            case \"styleLink\":\n                result.styleLink = xml.attr(e, \"val\");\n                break;\n            case \"lvl\":\n                result.levels.push(parseNumberingLevel(e, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\n    let result = <NumberingLevel>{\n        level: xml.intAttr(elem, 'ilvl')\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"start\":\n                result.start = xml.attr(e, \"val\");\n                break;\n            case \"lvlRestart\":\n                result.restart = xml.intAttr(e, \"val\");\n                break;\n            case \"numFmt\":\n                result.format = xml.attr(e, \"val\");\n                break;\n            case \"lvlText\":\n                result.text = xml.attr(e, \"val\");\n                break;\n            case \"lvlJc\":\n                result.justification = xml.attr(e, \"val\");\n                break;\n            case \"lvlPicBulletId\":\n                result.bulletPictureId = xml.attr(e, \"val\");\n                break;\n            case \"pPr\":\n                result.paragraphProps = parseParagraphProperties(e, xml);\n                break;\n            case \"rPr\":\n                result.runProps = parseRunProperties(e, xml);\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\n    let result = <NumberingLevelOverride>{\n        level: xml.intAttr(elem, 'ilvl')\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"startOverride\":\n                result.start = xml.intAttr(e, \"val\");\n                break;\n            case \"lvl\":\n                result.numberingLevel = parseNumberingLevel(e, xml);\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\n    //TODO\n    var pict = xml.element(elem, \"pict\");\n    var shape = pict && xml.element(pict, \"shape\");\n    var imagedata = shape && xml.element(shape, \"imagedata\");\n\n    return imagedata ? {\n        id: xml.attr(elem, \"numPicBulletId\"),\n        referenceId: xml.attr(imagedata, \"id\"),\n        style: xml.attr(shape, \"style\")\n    } : null;\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../dom/common\";\n\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\n    if (trimXmlDeclaration)\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\n    \n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \n    const errorText = hasXmlParserError(result);\n\n    if (errorText)\n        throw new Error(errorText);\n\n    return result;\n}\n\nfunction hasXmlParserError(doc: Document) {\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\n}\n\nexport function serializeXmlString(elem: Node): string {\n    return new XMLSerializer().serializeToString(elem);\n}\n\nexport class XmlParser {\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\n        if (skipDeclaration)\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\n\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\n    }\n\n    elements(elem: Element, localName: string = null): Element[] {\n        const result = [];\n\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\n            let c = elem.childNodes.item(i);\n\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\n                result.push(c);\n        }\n\n        return result;\n    }\n\n    element(elem: Element, localName: string): Element {\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\n            let c = elem.childNodes.item(i);\n\n            if (c.nodeType == 1 && (c as Element).localName == localName)\n                return c as Element;\n        }\n\n        return null;\n    }\n\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\n        var el = this.element(elem, localName);\n        return el ? this.attr(el, attrLocalName) : undefined;\n    }\n\n    attr(elem: Element, localName: string): string {\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\n            let a = elem.attributes.item(i);\n\n            if (a.localName == localName)\n                return a.value;\n        }\n\n        return null;\n    }\n\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\n        var val = this.attr(node, attrName);\n        return val ? parseInt(val) : defaultValue;\n    }\n\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\n        var val = this.attr(node, attrName);\n        return val ? parseFloat(val) : defaultValue;\n    }\n\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\n        var v = this.attr(node, attrName);\n\n        switch (v) {\n            case \"1\": return true;\n            case \"0\": return false;\n            default: return defaultValue;\n        }\n    }\n\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\n        return convertLength(this.attr(node, attrName), usage);\n    }\n}\n\nconst globalXmlParser = new XmlParser();\n\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { IDomStyle } from \"../dom/style\";\n\nexport class StylesPart extends Part {\n    styles: IDomStyle[];\n\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    parseXml(root: Element) {\n        this.styles = this._documentParser.parseStylesFile(root);     \n    }\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DmlTheme, parseTheme } from \"./theme\";\n\nexport class ThemePart extends Part {\n    theme: DmlTheme;\n\n    constructor(pkg: OpenXmlPackage, path: string) {\n        super(pkg, path);\n    }\n\n    parseXml(root: Element) {\n        this.theme = parseTheme(root, this._package.xmlParser);\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport class DmlTheme {\n    colorScheme: DmlColorScheme;\n    fontScheme: DmlFontScheme;\n}\n\nexport interface DmlColorScheme {\n    name: string;\n    colors: Record<string, string>;\n}\n\nexport interface DmlFontScheme {\n    name: string;\n    majorFont: DmlFormInfo,\n    minorFont: DmlFormInfo\n}\n\nexport interface DmlFormInfo {\n    latinTypeface: string;\n    eaTypeface: string;\n    csTypeface: string;\n}\n\nexport function parseTheme(elem: Element, xml: XmlParser) {\n    var result = new DmlTheme();\n    var themeElements = xml.element(elem, \"themeElements\");\n\n    for (let el of xml.elements(themeElements)) {\n        switch(el.localName) {\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\n    var result: DmlColorScheme = { \n        name: xml.attr(elem, \"name\"),\n        colors: {}\n    };\n\n    for (let el of xml.elements(elem)) {\n        var srgbClr = xml.element(el, \"srgbClr\");\n        var sysClr = xml.element(el, \"sysClr\");\n\n        if (srgbClr) {\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\n        }\n        else if (sysClr) {\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\n        }\n    }\n\n    return result;\n}\n\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\n    var result: DmlFontScheme = { \n        name: xml.attr(elem, \"name\"),\n    } as DmlFontScheme;\n\n    for (let el of xml.elements(elem)) {\n        switch (el.localName) {\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\n    return {\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\n    };\n}","import { OpenXmlElement } from \"./dom/dom\";\n\nexport function addElementClass(element: OpenXmlElement, className: string): string {\n    return element.className = appendClass(element.className, className);\n}\n\nexport function appendClass(classList: string, className: string): string {\n    return (!classList) ? className : `${classList} ${className}`\n}\n\nexport function splitPath(path: string): [string, string] {\n    let si = path.lastIndexOf('/') + 1;\n    let folder = si == 0 ? \"\" : path.substring(0, si);\n    let fileName = si == 0 ? path : path.substring(si);\n\n    return [folder, fileName];\n}\n\nexport function resolvePath(path: string, base: string): string {\n    try {\n        const prefix = \"file://docx/\";\n        const url = new URL(path, prefix + base).toString();\n        return url.substr(prefix.length);\n    } catch {\n        return `${base}${path}`;\n    }\n}\n\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\n    return array.reduce((a, x) => {\n        a[by(x)] = x;\n        return a;\n    }, {});\n}\n\nexport function isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target, ...sources) {\n    if (!sources.length) \n        return target;\n    \n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                const val = target[key] ?? (target[key] = {});\n                mergeDeep(val, source[key]);\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}","import { OutputType } from \"jszip\";\n\nimport { DocumentParser } from './document-parser';\nimport { Relationship, RelationshipTypes } from './common/relationship';\nimport { Part } from './common/part';\nimport { FontTablePart } from './font-table/font-table';\nimport { OpenXmlPackage } from './common/open-xml-package';\nimport { DocumentPart } from './dom/document-part';\nimport { resolvePath, splitPath } from './utils';\nimport { NumberingPart } from './numbering/numbering-part';\nimport { StylesPart } from './styles/styles-part';\nimport { FooterPart } from \"./footer/footer-part\";\nimport { HeaderPart } from \"./header/header-part\";\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\nimport { CorePropsPart } from \"./document-props/core-props-part\";\nimport { ThemePart } from \"./theme/theme-part\";\n\nconst topLevelRels = [\n    { type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\n    { type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\n    { type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\n];\n\nexport class WordDocument {\n    private _package: OpenXmlPackage;\n    private _parser: DocumentParser;\n    \n    rels: Relationship[];\n    parts: Part[] = [];\n    partsMap: Record<string, Part> = {};\n\n    documentPart: DocumentPart;\n    fontTablePart: FontTablePart;\n    numberingPart: NumberingPart;\n    stylesPart: StylesPart;\n    corePropsPart: CorePropsPart;\n    extendedPropsPart: ExtendedPropsPart;\n\n    static load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\n        var d = new WordDocument();\n\n        d._parser = parser;\n\n        return OpenXmlPackage.load(blob, options)\n            .then(pkg => {\n                d._package = pkg;\n\n                return d._package.loadRelationships();\n            }).then(rels => {\n                d.rels = rels;\n\n                const tasks = topLevelRels.map(rel => {\n                    const r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \n                    return d.loadRelationshipPart(r.target, r.type);\n                });\n\n                return Promise.all(tasks);\n            }).then(() => d);\n    }\n\n    save(type = \"blob\"): Promise<any> {\n        return this._package.save(type);\n    }\n\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\n        if (this.partsMap[path])\n            return Promise.resolve(this.partsMap[path]);\n\n        if (!this._package.get(path))\n            return Promise.resolve(null);\n\n        let part: Part = null;\n\n        switch(type) {\n            case RelationshipTypes.OfficeDocument:\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.FontTable:\n                this.fontTablePart = part = new FontTablePart(this._package, path);\n                break;\n\n            case RelationshipTypes.Numbering:\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Styles:\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Theme:\n                part = new ThemePart(this._package, path);\n                break;\n    \n            case RelationshipTypes.Footer:\n                part = new FooterPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Header:\n                part = new HeaderPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.CoreProperties:\n                this.corePropsPart = part = new CorePropsPart(this._package, path);\n                break;\n\n            case RelationshipTypes.ExtendedProperties:\n                this.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\n                break;\n        }\n\n        if (part == null)\n            return Promise.resolve(null);\n\n        this.partsMap[path] = part;\n        this.parts.push(part);\n\n        return part.load().then(() => {\n            if (part.rels == null || part.rels.length == 0)\n                return part;\n\n            const [folder] = splitPath(part.path); \n            const rels = part.rels.map(rel => {\n                return this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\n            });\n\n            return Promise.all(rels).then(() => part);\n        });\n    }\n\n    loadDocumentImage(id: string): PromiseLike<string> {\n        return this.loadResource(this.documentPart, id, \"blob\")\n            .then(x => x ? URL.createObjectURL(x) : null);\n    }\n\n    loadNumberingImage(id: string): PromiseLike<string> {\n        return this.loadResource(this.numberingPart, id, \"blob\")\n            .then(x => x ? URL.createObjectURL(x) : null);\n    }\n\n    loadFont(id: string, key: string): PromiseLike<string> {\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\n    }\n\n    getPathById(part: Part, id: string): string {\n        const rel = part.rels.find(x => x.id == id);\n        const [folder] = splitPath(part.path); \n        return rel ? resolvePath(rel.target, folder) : null;\n    }\n\n    private loadResource(part: Part, id: string, outputType: OutputType) {\n        const path = this.getPathById(part, id);\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\n    }\n}\n\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\n    const len = 16;\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\n    const numbers = new Array(len);\n    \n    for(let i = 0; i < len; i ++)\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\n\n    for (let i = 0; i < 32; i++)\n        data[i] = data[i] ^ numbers[i % len]\n\n    return data;\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__290__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__290__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","skipDeclaration","ignoreWidth","debug","parseFooter","result","WmlFooter","children","parseBodyElements","parseHeader","WmlHeader","parseDocumentFile","xbody","element","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","foreach","elem","localName","push","parseParagraph","parseTable","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyle","rStyle","suff","bullet","filter","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","Break","break","Symbol","font","char","Tab","instrText","d","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","test","intVal","Border","Percent","replace","trim","a","b","checkMask","num","mask","parseCoreProps","CorePropsPart","el","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseExtendedProps","ExtendedPropsPart","safeParseToInt","value","template","pages","words","characters","application","lines","paragraphs","company","appVersion","data","bodyContainer","styleContainer","userOptions","parser","renderer","HtmlRenderer","window","document","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","WordDocument","doc","render","BookmarkStart","colFirst","colLast","BookmarkEnd","ns","wordml","LengthUsage","mul","unit","Point","LineHeight","usage","namespaceURI","fontSize","lengthAttr","pkg","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","SectionType","section","pageSize","height","orientation","pageMargins","top","bottom","header","footer","gutter","fonts","parseFonts","FontTablePart","family","altName","fontKey","refId","footerElement","FooterPart","Footer","headerElement","HeaderPart","Header","htmlDocument","styleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appentElements","fontsPart","f","loadFont","fontData","cssTest","createStyleElement","processClassName","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","attrs","Object","getOwnPropertyNames","key","hasOwnProperty","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","p","pBreakIndex","rBreakIndex","findIndex","r","t","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","numberings","listStyleType","styleText","rootCounters","numberingClass","toLowerCase","styleToString","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","numformat","substring","container","firstChild","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","borderBottom","assign","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","parse","item","elementAttr","attrLocalName","undefined","attributes","defaultValue","floatAttr","parseFloat","convertLength","globalXmlParser","StylesPart","theme","parseTheme","ThemePart","parseColorScheme","colors","srgbClr","sysClr","parseFontScheme","majorFont","parseFontInfo","minorFont","latinTypeface","eaTypeface","csTypeface","DmlTheme","themeElements","colorScheme","fontScheme","classList","isObject","Array","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","mergeDeep","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","part","FontTable","Numbering","Styles","Theme","corePropsPart","extendedPropsPart","folder","resolvePath","loadResource","createObjectURL","Blob","deobfuscate","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}