{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__290__) {\nreturn ","import JSZip = require(\"jszip\");\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class Package {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    load(path: string, type: \"xml\" | JSZip.OutputType): Promise<any> {\r\n        let file = this._zip.files[path];\r\n\r\n        if (file == null)\r\n            return Promise.resolve(null);\r\n\r\n        if (type == \"xml\")\r\n            return file.async(\"string\").then(t => this.xmlParser.parse(t));\r\n\r\n        return file.async(type);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"xml\").then(xml => {\r\n            return xml == null ? null : parseRelationships(xml, this.xmlParser);\r\n        })\r\n    }\r\n}","import { Package } from \"./package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    rels: Relationship[];\r\n\r\n    constructor(public path: string) {\r\n    }\r\n\r\n    load(pkg: Package): Promise<any> {\r\n        return pkg.loadRelationships(this.path).then(rels => {\r\n            this.rels = rels;\r\n        })\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { RunElement } from './dom/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './dom/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlDoc: Element) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            cssStyle: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem, globalXmlParser);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xstyles: Element): IDomStyle[] {\r\n        var result = [];\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n                \r\n                case \"next\":\r\n                    result.next = xml.className(n, \"val\");\r\n                    break;\r\n    \r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"page\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Point: { mul: 1, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                this.body = this._documentParser.parseDocumentFile(xml);\r\n            });\r\n    }\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    load(pkg: Package): Promise<void> {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(el => {\r\n                this.fonts = parseFonts(el, pkg.xmlParser);\r\n            });\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { WordDocument } from './word-document';\r\nimport {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { appendClass } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement, RunProperties } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n    styleMap: any;\r\n\r\n    constructor(public htmlDocument: Document) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n        this.styleMap = null;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n\r\n        if (document.stylesPart != null) {\r\n            this.styleMap = this.processStyles(document.stylesPart.styles);\r\n\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if (!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for (let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n\r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for (let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n\r\n        for (let elem of elements) {\r\n            if (elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\r\n\r\n                if (s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if (elem.type == DomType.Paragraph) {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n\r\n                if (this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(t => (t as BreakElement).break == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n\r\n                if (sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if (pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if (splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var c = this.className;\r\n        var styleText = `\r\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n.${c}-wrapper section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n.${c} { color: black; }\r\nsection.${c} { box-sizing: border-box; }\r\n.${c} table { border-collapse: collapse; }\r\n.${c} table td, .${c} table th { vertical-align: top; }\r\n.${c} p { margin: 0pt; }\r\n`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n\r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.styleMap;\r\n\r\n        for (let style of styles) {\r\n            var subStyles = style.styles;\r\n\r\n            if (style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if (this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n\r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n\r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n\r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n\r\n            case DomType.Break:\r\n                return this.renderBreak(<BreakElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if (elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if (into)\r\n            for (let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties) {\r\n        if (props == null)\r\n            return;\r\n\r\n        if (props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderBreak(elem: BreakElement) {\r\n        if (elem.break == \"textWrapping\") {\r\n            return this.htmlDocument.createElement(\"br\");\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n\r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if (this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n\r\n                if (paragraph.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if (elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n\r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                Object.assign(this, parseNumberingPart(xml, pkg.xmlParser));\r\n                this.domNumberings = this._documentParser.parseNumberingFile(xml);\r\n            })\r\n    }\r\n}","import { NumberingPicBullet } from \"../dom/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../dom/common\";\r\n\r\nexport class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                this.styles = this._documentParser.parseStylesFile(xml);\r\n            })\r\n    }\r\n}","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { Package } from './common/package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\n\r\nexport class WordDocument {\r\n    private _package: Package;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return JSZip.loadAsync(blob)\r\n            .then(zip => {\r\n                d._package = new Package(zip);\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load(this._package).then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: JSZip.OutputType) {\r\n        let rel = part.rels.find(x => x.id == id);\r\n\r\n        if (rel == null)\r\n            return Promise.resolve(null);\r\n\r\n        let [fodler] = splitPath(part.path);\r\n\r\n        return this._package.load(fodler + rel.target, outputType);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__290__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(667);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__290__","_zip","xmlParser","XmlParser","exists","path","this","files","load","type","file","Promise","resolve","async","then","t","parse","loadRelationships","relsPath","splitPath","xml","parseRelationships","Package","pkg","rels","Part","RelationshipTypes","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","skipDeclaration","ignoreWidth","debug","parseDocumentFile","xmlDoc","result","DomType","Document","children","cssStyle","props","xbody","element","foreach","elem","localName","push","parseParagraph","parseTable","parseSectionProperties","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","bullet","filter","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","text","textContent","fldCharType","Break","break","Symbol","font","char","Tab","instrText","d","parseDrawing","parseRunProperties","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","FontSize","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","ascii","firstLine","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","cb","i","childNodes","length","nodeType","nodeName","attrName","defValue","autoColor","v","parseInt","Dxa","convertSize","indexOf","intVal","Border","Percent","replace","trim","a","b","checkMask","num","mask","data","bodyContainer","styleContainer","userOptions","parser","renderer","HtmlRenderer","window","document","options","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","WordDocument","doc","render","BookmarkStart","colFirst","colLast","BookmarkEnd","ns","wordml","LengthUsage","mul","unit","Point","LineHeight","usage","value","namespaceURI","fontSize","lengthAttr","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","SectionType","section","pageSize","height","orientation","pageMargins","top","bottom","header","footer","gutter","el","fonts","parseFonts","FontTablePart","family","altName","fontKey","refId","htmlDocument","styleMap","removeAllElements","appendComment","appendChild","renderDefaultStyle","stylesPart","processStyles","renderStyles","numberingPart","renderNumbering","domNumberings","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appentElements","fontsPart","f","loadFont","fontData","cssTest","createStyleElement","processClassName","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","input","attrs","Object","getOwnPropertyNames","key","hasOwnProperty","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","p","pBreakIndex","rBreakIndex","findIndex","r","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","loadNumberingImage","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","substring","container","firstChild","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","find","borderBottom","assign","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","numberingLevel","parseNumberingBulletPicture","referenceId","numberings","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","item","attributes","defaultValue","floatAttr","parseFloat","convertLength","globalXmlParser","StylesPart","classList","si","lastIndexOf","array","by","reduce","parts","partsMap","blob","_parser","JSZip","loadAsync","zip","_package","OfficeDocument","loadRelationshipPart","part","FontTable","Numbering","Styles","folder","rel","all","loadResource","URL","createObjectURL","Blob","deobfuscate","outputType","fodler","guidKey","trimmed","numbers","Array","substr","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}