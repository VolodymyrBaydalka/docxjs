{"version":3,"file":"docx-preview.min.js","mappings":"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","sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/./src/common/open-xml-package.ts","webpack://docx/./src/common/part.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/document-props/core-props-part.ts","webpack://docx/./src/document-props/core-props.ts","webpack://docx/./src/document-props/extended-props-part.ts","webpack://docx/./src/document-props/extended-props.ts","webpack://docx/./src/document/bookmark.ts","webpack://docx/./src/document/common.ts","webpack://docx/./src/document/document-part.ts","webpack://docx/./src/document/dom.ts","webpack://docx/./src/document/line-spacing.ts","webpack://docx/./src/document/paragraph.ts","webpack://docx/./src/document/run.ts","webpack://docx/./src/document/section.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/footer/footer-part.ts","webpack://docx/./src/footer/footer.ts","webpack://docx/./src/footnotes/footnote.ts","webpack://docx/./src/footnotes/footnotes-part.ts","webpack://docx/./src/header/header-part.ts","webpack://docx/./src/header/header.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/theme/theme-part.ts","webpack://docx/./src/theme/theme.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/word-document.ts","webpack://docx/external umd \"JSZip\"","webpack://docx/webpack/bootstrap","webpack://docx/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__290__) {\nreturn ","import * as JSZip from \"jszip\";\nimport { parseXmlString, XmlParser } from \"../parser/xml-parser\";\nimport { splitPath } from \"../utils\";\nimport { parseRelationships, Relationship } from \"./relationship\";\n\nexport interface OpenXmlPackageOptions {\n    trimXmlDeclaration: boolean,\n    keepOrigin: boolean,\n}\n\nexport class OpenXmlPackage {\n    xmlParser: XmlParser = new XmlParser();\n\n    constructor(private _zip: JSZip, public options: OpenXmlPackageOptions) {\n    }\n\n    get(path: string): any {\n        return this._zip.files[normalizePath(path)];\n    }\n\n    update(path: string, content: any) {\n        this._zip.file(path, content);\n    }\n\n    static load(input: Blob | any, options: OpenXmlPackageOptions): Promise<OpenXmlPackage> {\n        const jszipOptions: JSZip.JSZipLoadOptions = typeof input === \"string\" ? { base64: true } : undefined;\n        return JSZip.loadAsync(input, jszipOptions).then((zip) => new OpenXmlPackage(zip, options));\n    }\n\n    save(type: any = \"blob\"): Promise<any>  {\n        return this._zip.generateAsync({ type });\n    }\n\n    load(path: string, type: JSZip.OutputType = \"string\"): Promise<any> {\n        return this.get(path)?.async(type) ?? Promise.resolve(null);\n    }\n\n    loadRelationships(path: string = null): Promise<Relationship[]> {\n        let relsPath = `_rels/.rels`;\n\n        if (path != null) {\n            const [f, fn] = splitPath(path);\n            relsPath = `${f}_rels/${fn}.rels`;\n        }\n\n        return this.load(relsPath)\n            .then(txt => txt ? parseRelationships(this.parseXmlDocument(txt).firstElementChild, this.xmlParser) : null);\n    }\n\n    /** @internal */\n    parseXmlDocument(txt: string): Document {\n        return parseXmlString(txt, this.options.trimXmlDeclaration);\n    }\n}\n\nfunction normalizePath(path: string) {\n    return path.startsWith('/') ? path.substr(1) : path;\n}","import { serializeXmlString } from \"../parser/xml-parser\";\nimport { OpenXmlPackage } from \"./open-xml-package\";\nimport { Relationship } from \"./relationship\";\n\nexport class Part {\n    protected _xmlDocument: Document;\n\n    rels: Relationship[];\n\n    constructor(protected _package: OpenXmlPackage, public path: string) {\n    }\n\n    load(): Promise<any> {\n        return Promise.all([\n            this._package.loadRelationships(this.path).then(rels => {\n                this.rels = rels;\n            }),\n            this._package.load(this.path).then(text => {\n                const xmlDoc = this._package.parseXmlDocument(text);\n\n                if (this._package.options.keepOrigin) {\n                    this._xmlDocument = xmlDoc;\n                }\n\n                this.parseXml(xmlDoc.firstElementChild);\n            })\n        ]);\n    }\n\n    save() {\n        this._package.update(this.path, serializeXmlString(this._xmlDocument));\n    }\n\n    protected parseXml(root: Element) {\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport interface Relationship {\n    id: string,\n    type: RelationshipTypes | string,\n    target: string\n    targetMode: \"\" | string \n}\n\nexport enum RelationshipTypes {\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\",\n    Footnotes = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\",\n    Footer = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\",\n    Header = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\",\n    ExtendedProperties = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\",\n    CoreProperties = \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\"\n}\n\nexport function parseRelationships(root: Element, xml: XmlParser): Relationship[] {\n    return xml.elements(root).map(e => <Relationship>{\n        id: xml.attr(e, \"Id\"),\n        type: xml.attr(e, \"Type\"),\n        target: xml.attr(e, \"Target\"),\n        targetMode: xml.attr(e, \"TargetMode\")\n    });\n}","import {\n    DomType, IDomTable, IDomNumbering,\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement, FootnoteReferenceElement\n} from './document/dom';\nimport * as utils from './utils';\nimport { DocumentElement } from './document/document';\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './document/paragraph';\nimport { parseSectionProperties } from './document/section';\nimport globalXmlParser from './parser/xml-parser';\nimport { parseRunProperties, RunElement } from './document/run';\nimport { parseBookmarkEnd, parseBookmarkStart } from './document/bookmark';\nimport { IDomStyle, IDomSubStyle } from './document/style';\nimport { WmlFooter } from './footer/footer';\nimport { WmlHeader } from './header/header';\nimport { WmlFootnote } from './footnotes/footnote';\n\nexport var autos = {\n    shd: \"white\",\n    color: \"black\",\n    highlight: \"transparent\"\n};\n\nexport interface DocumentParserOptions {\n    ignoreWidth: boolean;\n    debug: boolean;\n}\n\nexport class DocumentParser {\n    options: DocumentParserOptions;\n\n    constructor(options?: Partial<DocumentParserOptions>) {\n        this.options = {\n            ignoreWidth: false,\n            debug: false,\n            ...options   \n        };\n    }\n\n    parseFootnotes(xmlDoc: Element): WmlFootnote[] {\n        var result = [];\n\n        for (let el of globalXmlParser.elements(xmlDoc, \"footnote\")) {\n            const footnote = new WmlFootnote();\n            footnote.id = globalXmlParser.attr(el, \"id\");\n            footnote.footnoteType = globalXmlParser.attr(el, \"type\");\n            footnote.children = this.parseBodyElements(el);\n            result.push(footnote);\n        }\n\n        return result;\n    }\n\n    parseFooter(xmlDoc: Element): WmlFooter {\n        var result = new WmlFooter();\n        result.children = this.parseBodyElements(xmlDoc);\n        return result;\n    }\n\n    parseHeader(xmlDoc: Element): WmlHeader {\n        var result = new WmlHeader();\n        result.children = this.parseBodyElements(xmlDoc);\n        return result;\n    }\n\n    parseDocumentFile(xmlDoc: Element): DocumentElement {\n        var xbody = globalXmlParser.element(xmlDoc, \"body\");\n        var background = globalXmlParser.element(xmlDoc, \"background\");\n        var sectPr = globalXmlParser.element(xbody, \"sectPr\");\n\n        return {\n            type: DomType.Document,\n            children: this.parseBodyElements(xbody),\n            props: sectPr ? parseSectionProperties(sectPr, globalXmlParser) : null,\n            cssStyle: background ? this.parseBackground(background) : {},\n        };\n    }\n\n    parseBackground(elem: Element): any {\n        var result = {};\n        var color = xml.colorAttr(elem, \"color\");\n\n        if (color) {\n            result[\"background-color\"] = color;\n        }\n\n        return result;\n    }\n\n    parseBodyElements(element: Element): OpenXmlElement[] {\n        var children = [];\n        \n        xml.foreach(element, elem => {\n            switch (elem.localName) {\n                case \"p\":\n                    children.push(this.parseParagraph(elem));\n                    break;\n\n                case \"tbl\":\n                    children.push(this.parseTable(elem));\n                    break;\n            }\n        });\n\n        return children;\n    }\n\n    parseStylesFile(xstyles: Element): IDomStyle[] {\n        var result = [];\n\n        xml.foreach(xstyles, n => {\n            switch (n.localName) {\n                case \"style\":\n                    result.push(this.parseStyle(n));\n                    break;\n\n                case \"docDefaults\":\n                    result.push(this.parseDefaultStyles(n));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseDefaultStyles(node: Element): IDomStyle {\n        var result = <IDomStyle>{\n            id: null,\n            name: null,\n            target: null,\n            basedOn: null,\n            styles: []\n        };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"rPrDefault\":\n                    var rPr = globalXmlParser.element(c, \"rPr\");\n\n                    if (rPr)\n                        result.styles.push({\n                            target: \"span\",\n                            values: this.parseDefaultProperties(rPr, {})\n                        });\n                    break;\n\n                case \"pPrDefault\":\n                    var pPr = globalXmlParser.element(c, \"pPr\");\n\n                    if (pPr)\n                        result.styles.push({\n                            target: \"p\",\n                            values: this.parseDefaultProperties(pPr, {})\n                        });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseStyle(node: Element): IDomStyle {\n        var result = <IDomStyle>{\n            id: xml.stringAttr(node, \"styleId\"),\n            isDefault: xml.boolAttr(node, \"default\"),\n            name: null,\n            target: null,\n            basedOn: null,\n            styles: [],\n            linked: null\n        };\n\n        switch (xml.stringAttr(node, \"type\")) {\n            case \"paragraph\": result.target = \"p\"; break;\n            case \"table\": result.target = \"table\"; break;\n            case \"character\": result.target = \"span\"; break;\n            //case \"numbering\": result.target = \"p\"; break;\n        }\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"basedOn\":\n                    result.basedOn = xml.className(n, \"val\");\n                    break;\n\n                case \"name\":\n                    result.name = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"link\":\n                    result.linked = xml.className(n, \"val\");\n                    break;\n                \n                case \"next\":\n                    result.next = xml.className(n, \"val\");\n                    break;\n    \n                case \"aliases\":\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\n                    break;\n\n                case \"pPr\":\n                    result.styles.push({\n                        target: \"p\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\n                    break;\n\n                case \"rPr\":\n                    result.styles.push({\n                        target: \"span\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    result.runProps = parseRunProperties(n, globalXmlParser);\n                    break;\n\n                case \"tblPr\":\n                case \"tcPr\":\n                    result.styles.push({\n                        target: \"td\", //TODO: maybe move to processor\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"tblStylePr\":\n                    for (let s of this.parseTableStyle(n))\n                        result.styles.push(s);\n                    break;\n\n                case \"rsid\":\n                case \"qFormat\":\n                case \"hidden\":\n                case \"semiHidden\":\n                case \"unhideWhenUsed\":\n                case \"autoRedefine\":\n                case \"uiPriority\":\n                    //TODO: ignore\n                    break;\n\n                default:\n                    this.options.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\n            }\n        });\n\n        return result;\n    }\n\n    parseTableStyle(node: Element): IDomSubStyle[] {\n        var result = [];\n\n        var type = xml.stringAttr(node, \"type\");\n        var selector = \"\";\n\n        switch (type) {\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\n            case \"firstCol\": selector = \"td.first-col\"; break;\n            case \"lastCol\": selector = \"td.last-col\"; break;\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\n            case \"band2Vert\": selector = \"td.even-col\"; break;\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\n            default: return [];\n        }\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"pPr\":\n                    result.push({\n                        target: selector + \" p\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"rPr\":\n                    result.push({\n                        target: selector + \" span\",\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n\n                case \"tblPr\":\n                case \"tcPr\":\n                    result.push({\n                        target: selector, //TODO: maybe move to processor\n                        values: this.parseDefaultProperties(n, {})\n                    });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\n        var result = [];\n        var mapping = {};\n        var bullets = [];\n\n        xml.foreach(xnums, n => {\n            switch (n.localName) {\n                case \"abstractNum\":\n                    this.parseAbstractNumbering(n, bullets)\n                        .forEach(x => result.push(x));\n                    break;\n\n                case \"numPicBullet\":\n                    bullets.push(this.parseNumberingPicBullet(n));\n                    break;\n\n                case \"num\":\n                    var numId = xml.stringAttr(n, \"numId\");\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\n                    mapping[abstractNumId] = numId;\n                    break;\n            }\n        });\n\n        result.forEach(x => x.id = mapping[x.id]);\n\n        return result;\n    }\n\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\n        var pict = globalXmlParser.element(elem, \"pict\");\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\n\n        return imagedata ? {\n            id: xml.intAttr(elem, \"numPicBulletId\"),\n            src: xml.stringAttr(imagedata, \"id\"),\n            style: xml.stringAttr(shape, \"style\")\n        } : null;\n    }\n\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\n        var result = [];\n        var id = xml.stringAttr(node, \"abstractNumId\");\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"lvl\":\n                    result.push(this.parseNumberingLevel(id, n, bullets));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\n        var result: IDomNumbering = {\n            id: id,\n            level: xml.intAttr(node, \"ilvl\"),\n            pStyleName: undefined,\n            pStyle: {},\n            rStyle: {},\n            suff: \"tab\"\n        };\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"pPr\":\n                    this.parseDefaultProperties(n, result.pStyle);\n                    break;\n\n                case \"rPr\":\n                    this.parseDefaultProperties(n, result.rStyle);\n                    break;\n\n                case \"lvlPicBulletId\":\n                    var id = xml.intAttr(n, \"val\");\n                    result.bullet = bullets.find(x => x.id == id);\n                    break;\n\n                case \"lvlText\":\n                    result.levelText = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"pStyle\":\n                    result.pStyleName = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"numFmt\":\n                    result.format = xml.stringAttr(n, \"val\");\n                    break;\n\n                case \"suff\":\n                    result.suff = xml.stringAttr(n, \"val\");\n                    break;\n                }\n        });\n\n        return result;\n    }\n\n\n    parseParagraph(node: Element): OpenXmlElement {\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"r\":\n                    result.children.push(this.parseRun(c, result));\n                    break;\n\n                case \"hyperlink\":\n                    result.children.push(this.parseHyperlink(c, result));\n                    break;\n\n                case \"bookmarkStart\":\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\n                    break;               \n\n                    case \"bookmarkEnd\":\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\n                    break;\n\n                case \"pPr\":\n                    this.parseParagraphProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\n                return true;\n\n            switch (c.localName) {\n                case \"pStyle\":\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\n                    break;\n\n                case \"cnfStyle\":\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\n                    break;\n\n                case \"framePr\":\n                    this.parseFrame(c, paragraph);\n                    break;\n\n                case \"rPr\":\n                    //TODO ignore\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseFrame(node: Element, paragraph: ParagraphElement) {\n        var dropCap = xml.stringAttr(node, \"dropCap\");\n\n        if (dropCap == \"drop\")\n            paragraph.cssStyle[\"float\"] = \"left\";\n    }\n\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\n        var anchor = xml.stringAttr(node, \"anchor\");\n\n        if (anchor)\n            result.href = \"#\" + anchor;\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"r\":\n                    result.children.push(this.parseRun(c, result));\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"t\":\n                    result.children.push(<TextElement>{ \n                        type: DomType.Text, \n                        text: c.textContent \n                    });//.replace(\" \", \"\\u00A0\"); // TODO\n                    break;\n                \n                case \"fldChar\":\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\n                    break;\n\n                case \"noBreakHyphen\":\n                    result.children.push({ type: DomType.NoBreakHyphen });\n                    break;\n\n                case \"br\":\n                    result.children.push(<BreakElement>{ \n                        type: DomType.Break, \n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\n                    });\n                    break;\n\n                case \"lastRenderedPageBreak\":\n                    result.children.push(<BreakElement>{ \n                        type: DomType.Break, \n                        break: \"lastRenderedPageBreak\"\n                    });\n                    break;\n                \n                case \"sym\":\n                    result.children.push(<SymbolElement>{ \n                        type: DomType.Symbol, \n                        font: xml.stringAttr(c, \"font\"),\n                        char: xml.stringAttr(c, \"char\")\n                    });\n                    break;\n\n                case \"tab\":\n                    result.children.push({ type: DomType.Tab });\n                    break;\n\n                case \"footnoteReference\":\n                    result.children.push(<FootnoteReferenceElement>{ \n                        type: DomType.FootnoteReference, \n                        id: xml.stringAttr(c, \"id\")\n                    });\n                    break;\n\n                case \"instrText\":\n                    result.instrText = c.textContent;\n                    break;\n\n                case \"drawing\":\n                    let d = this.parseDrawing(c);\n\n                    if (d)\n                        result.children = [d];\n                    break;\n\n                case \"rPr\":\n                    this.parseRunProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseRunProperties(elem: Element, run: RunElement) {\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\n            switch (c.localName) {\n                case \"rStyle\":\n                    run.className = xml.className(c, \"val\");\n                    break;\n\n                case \"vertAlign\":\n                    switch (xml.stringAttr(c, \"val\")) {\n                        case \"subscript\": run.verticalAlign = \"sub\"; break;\n                        case \"superscript\": run.verticalAlign = \"super\"; break;\n                    }\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseDrawing(node: Element): OpenXmlElement {\n        for (var n of globalXmlParser.elements(node)) {\n            switch (n.localName) {\n                case \"inline\":\n                case \"anchor\":\n                    return this.parseDrawingWrapper(n);\n            }\n        }\n    }\n\n    parseDrawingWrapper(node: Element): OpenXmlElement {\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\n        var isAnchor = node.localName == \"anchor\";\n\n        //TODO\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\n\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \n        let simplePos = xml.boolAttr(node, \"simplePos\");\n\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\n\n        for (var n of globalXmlParser.elements(node)) {\n            switch (n.localName) {\n                case \"simplePos\":\n                    if (simplePos) {\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\n                    }\n                    break;\n\n                case \"extent\":\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\n                    break;\n\n                case \"positionH\":\n                case \"positionV\":\n                    if (!simplePos) {\n                        let pos = n.localName == \"positionH\" ? posX : posY;\n                        var alignNode = globalXmlParser.element(n, \"align\");\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\n\n                        if (alignNode)\n                            pos.align = alignNode.textContent;\n\n                        if (offsetNode)\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\n                    }\n                    break;\n\n                case \"wrapTopAndBottom\":\n                    wrapType = \"wrapTopAndBottom\";\n                    break;\n                \n                case \"wrapNone\":\n                    wrapType = \"wrapNone\";\n                    break;\n\n                case \"graphic\":\n                    var g = this.parseGraphic(n);\n\n                    if (g)\n                        result.children.push(g);\n                    break;\n            }\n        }\n\n        if (wrapType == \"wrapTopAndBottom\") {\n            result.cssStyle['display'] = 'block';\n\n            if (posX.align) {\n                result.cssStyle['text-align'] = posX.align;\n                result.cssStyle['width'] = \"100%\";\n            }\n        }\n        else if(wrapType == \"wrapNone\") {\n            result.cssStyle['display'] = 'block';\n            result.cssStyle['position'] = 'relative';\n            result.cssStyle[\"width\"] = \"0px\";\n            result.cssStyle[\"height\"] = \"0px\";\n\n            if(posX.offset)\n                result.cssStyle[\"left\"] = posX.offset;\n            if(posY.offset)\n                result.cssStyle[\"top\"] = posY.offset;\n        }\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\n            result.cssStyle[\"float\"] = posX.align;\n        }\n\n        return result;\n    }\n\n    parseGraphic(elem: Element): OpenXmlElement {\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\n\n        for (let n of globalXmlParser.elements(graphicData)) {\n            switch (n.localName) {\n                case \"pic\":\n                    return this.parsePicture(n);\n            }\n        }\n\n        return null;\n    }\n\n    parsePicture(elem: Element): IDomImage {\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\n        var blip = globalXmlParser.element(blipFill, \"blip\");\n\n        result.src = xml.stringAttr(blip, \"embed\");\n\n        var spPr = globalXmlParser.element(elem, \"spPr\");\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\n\n        result.cssStyle[\"position\"] = \"relative\";\n\n        for (var n of globalXmlParser.elements(xfrm)) {\n            switch (n.localName) {\n                case \"ext\":\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\n                    break;\n\n                case \"off\":\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    parseTable(node: Element): IDomTable {\n        var result: IDomTable = { type: DomType.Table, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"tr\":\n                    result.children.push(this.parseTableRow(c));\n                    break;\n\n                case \"tblGrid\":\n                    result.columns = this.parseTableColumns(c);\n                    break;\n\n                case \"tblPr\":\n                    this.parseTableProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableColumns(node: Element): IDomTableColumn[] {\n        var result = [];\n\n        xml.foreach(node, n => {\n            switch (n.localName) {\n                case \"gridCol\":\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableProperties(elem: Element, table: IDomTable) {\n        table.cssStyle = {};\n        table.cellStyle = {};\n\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\n            switch (c.localName) {\n                case \"tblStyle\":\n                    table.className = xml.className(c, \"val\");\n                    break;\n\n                case \"tblLook\":\n                    utils.addElementClass(table, values.classNameOftblLook(c));\n                    break;\n\n                case \"tblpPr\":\n                    this.parseTablePosition(c, table);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n\n        switch (table.cssStyle[\"text-align\"]) {\n            case \"center\":\n                delete table.cssStyle[\"text-align\"];\n                table.cssStyle[\"margin-left\"] = \"auto\";\n                table.cssStyle[\"margin-right\"] = \"auto\";\n                break;\n\n            case \"right\":\n                delete table.cssStyle[\"text-align\"];\n                table.cssStyle[\"margin-left\"] = \"auto\";\n                break;\n        }\n    }\n\n    parseTablePosition(node: Element, table: IDomTable) {\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\n\n        table.cssStyle[\"float\"] = 'left';\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\n    }\n\n    parseTableRow(node: Element): IDomTableRow {\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"tc\":\n                    result.children.push(this.parseTableCell(c));\n                    break;\n\n                case \"trPr\":\n                    this.parseTableRowProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\n            switch (c.localName) {\n                case \"cnfStyle\":\n                    row.className = values.classNameOfCnfStyle(c);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseTableCell(node: Element): OpenXmlElement {\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\n\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"tbl\":\n                    result.children.push(this.parseTable(c));\n                    break;\n\n                case \"p\":\n                    result.children.push(this.parseParagraph(c));\n                    break;\n\n                case \"tcPr\":\n                    this.parseTableCellProperties(c, result);\n                    break;\n            }\n        });\n\n        return result;\n    }\n\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\n            switch (c.localName) {\n                case \"gridSpan\":\n                    cell.span = xml.intAttr(c, \"val\", null);\n                    break;\n\n                case \"vMerge\": //TODO\n                    break;\n\n                case \"cnfStyle\":\n                    cell.className = values.classNameOfCnfStyle(c);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        });\n    }\n\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\n        style = style || {};\n\n\n        xml.foreach(elem, c => {\n            switch (c.localName) {\n                case \"jc\":\n                    style[\"text-align\"] = values.valueOfJc(c);\n                    break;\n\n                case \"textAlignment\":\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\n                    break;\n\n                case \"color\":\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\n                    break;\n\n                case \"sz\":\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\n                    break;\n\n                case \"shd\":\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\n                    break;\n\n                case \"highlight\":\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\n                    break;\n\n                case \"tcW\":\n                    if (this.options.ignoreWidth)\n                        break;\n\n                case \"tblW\":\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\n                    break;\n\n                case \"trHeight\":\n                    this.parseTrHeight(c, style);\n                    break;\n\n                case \"strike\":\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\n                    break;\n\n                case \"b\":\n                    style[\"font-weight\"] = xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\";\n                    break;\n\n                case \"i\":\n                    style[\"font-style\"] = xml.boolAttr(c, \"val\", true) ? \"italic\" : \"normal\";\n                    break;\n                \n                case \"caps\":\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"uppercase\" : \"none\";\n                    break;\n\n                case \"smallCaps\":\n                    style[\"text-transform\"] = xml.boolAttr(c, \"val\", true) ? \"lowercase\" : \"none\";\n                    break;\n    \n                case \"u\":\n                    this.parseUnderline(c, style);\n                    break;\n\n                case \"ind\":\n                case \"tblInd\":\n                    this.parseIndentation(c, style);\n                    break;\n\n                case \"rFonts\":\n                    this.parseFont(c, style);\n                    break;\n\n                case \"tblBorders\":\n                    this.parseBorderProperties(c, childStyle || style);\n                    break;\n\n                case \"tblCellSpacing\":\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\n                    style[\"border-collapse\"] = \"separate\";\n                    break;\n\n                case \"pBdr\":\n                    this.parseBorderProperties(c, style);\n                    break;\n                \n                case \"bdr\":\n                    style[\"border\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"tcBorders\":\n                    this.parseBorderProperties(c, style);\n                    break;\n\n                case \"vanish\":\n                    if (xml.boolAttr(c, \"val\", true))\n                        style[\"display\"] = \"none\";\n                    break;\n\n                case \"noWrap\":\n                    //TODO\n                    //style[\"white-space\"] = \"nowrap\";\n                    break;\n\n                case \"tblCellMar\":\n                case \"tcMar\":\n                    this.parseMarginProperties(c, childStyle || style);\n                    break;\n\n                case \"tblLayout\":\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\n                    break;\n\n                case \"vAlign\":\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\n                    break;\n\n                case \"spacing\":\n                    if (elem.localName == \"pPr\")\n                        this.parseSpacing(c, style);\n                    break;\n\n                case \"lang\":\n                case \"noProof\": //ignore spellcheck\n                case \"webHidden\": // maybe web-hidden should be implemented\n                    //TODO ignore\n                    break;\n\n                default:\n                    if (handler != null && !handler(c))\n                        this.options.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\n                    break;\n            }\n        });\n\n        return style;\n    }\n\n    parseUnderline(node: Element, style: Record<string, string>) {\n        var val = xml.stringAttr(node, \"val\");\n\n        if (val == null)\n            return;\n\n        switch (val) {\n            case \"dash\":\n            case \"dashDotDotHeavy\":\n            case \"dashDotHeavy\":\n            case \"dashedHeavy\":\n            case \"dashLong\":\n            case \"dashLongHeavy\":\n            case \"dotDash\":\n            case \"dotDotDash\":\n                style[\"text-decoration-style\"] = \"dashed\";\n                break;\n\n            case \"dotted\":\n            case \"dottedHeavy\":\n                style[\"text-decoration-style\"] = \"dotted\";\n                break;\n\n            case \"double\":\n                style[\"text-decoration-style\"] = \"double\";\n                break;\n\n            case \"single\":\n            case \"thick\":\n                style[\"text-decoration\"] = \"underline\";\n                break;\n\n            case \"wave\":\n            case \"wavyDouble\":\n            case \"wavyHeavy\":\n                style[\"text-decoration-style\"] = \"wavy\";\n                break;\n\n            case \"words\":\n                style[\"text-decoration\"] = \"underline\";\n                break;\n\n            case \"none\":\n                style[\"text-decoration\"] = \"none\";\n                break;\n        }\n\n        var col = xml.colorAttr(node, \"color\");\n\n        if (col)\n            style[\"text-decoration-color\"] = col;\n    }\n\n    parseFont(node: Element, style: Record<string, string>) {\n        var ascii = xml.stringAttr(node, \"ascii\");\n        var asciiTheme = values.themeValue(node, \"asciiTheme\");\n\n        var fonts = [ascii, asciiTheme].filter(x => x).join(', ');\n\n        if (fonts.length > 0)\n            style[\"font-family\"] = fonts;\n    }\n\n    parseIndentation(node: Element, style: Record<string, string>) {\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\n        var hanging = xml.sizeAttr(node, \"hanging\");\n        var left = xml.sizeAttr(node, \"left\");\n        var start = xml.sizeAttr(node, \"start\");\n        var right = xml.sizeAttr(node, \"right\");\n        var end = xml.sizeAttr(node, \"end\");\n\n        if (firstLine) style[\"text-indent\"] = firstLine;\n        if (hanging) style[\"text-indent\"] = `-${hanging}`;\n        if (left || start) style[\"margin-left\"] = left || start;\n        if (right || end) style[\"margin-right\"] = right || end;\n    }\n\n    parseSpacing(node: Element, style: Record<string, string>) {\n        var before = xml.sizeAttr(node, \"before\");\n        var after = xml.sizeAttr(node, \"after\");\n        var line = xml.intAttr(node, \"line\", null);\n        var lineRule = xml.stringAttr(node, \"lineRule\");\n\n        if (before) style[\"margin-top\"] = before;\n        if (after) style[\"margin-bottom\"] = after;\n        \n        if (line !== null) {\n            switch(lineRule) {\n                case \"auto\": \n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\n                    break;\n\n                case \"atLeast\":\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\n                    break;\n\n                default:\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\n                    break;\n            }\n        }\n    }\n\n    parseMarginProperties(node: Element, output: Record<string, string>) {\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"left\":\n                    output[\"padding-left\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"right\":\n                    output[\"padding-right\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"top\":\n                    output[\"padding-top\"] = values.valueOfMargin(c);\n                    break;\n\n                case \"bottom\":\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\n                    break;\n            }\n        });\n    }\n\n    parseTrHeight(node: Element, output: Record<string, string>) {\n        switch (xml.stringAttr(node, \"hRule\")) {\n            case \"exact\":\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\n                break;\n\n            case \"atLeast\":\n            default:\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\n                // min-height doesn't work for tr\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \n                break;\n        }\n    }\n\n    parseBorderProperties(node: Element, output: Record<string, string>) {\n        xml.foreach(node, c => {\n            switch (c.localName) {\n                case \"start\":\n                case \"left\":\n                    output[\"border-left\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"end\":\n                case \"right\":\n                    output[\"border-right\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"top\":\n                    output[\"border-top\"] = values.valueOfBorder(c);\n                    break;\n\n                case \"bottom\":\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\n                    break;\n            }\n        });\n    }\n}\n\nenum SizeType {\n    FontSize,\n    Dxa,\n    Emu,\n    Border,\n    Percent\n}\n\nconst knownColors = ['black','blue','cyan','darkBlue','darkCyan','darkGray','darkGreen','darkMagenta','darkRed','darkYellow','green','lightGray','magenta','none','red','white','yellow'];\n\nclass xml {\n    static foreach(node: Element, cb: (n: Element) => void) {\n        for (var i = 0; i < node.childNodes.length; i++) {\n            let n = node.childNodes[i];\n\n            if (n.nodeType == Node.ELEMENT_NODE)\n                cb(<Element>n);\n        }\n    }\n\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\n        var n = globalXmlParser.element(elem, nodeName)\n        return n ? xml.stringAttr(n, attrName) : null;\n    }\n\n    static stringAttr(node: Element, attrName: string) {\n        return globalXmlParser.attr(node, attrName);\n    }\n\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\n        var v = xml.stringAttr(node, attrName);\n\n        if (v) {\n            if (v == \"auto\") {\n                return autoColor;\n            } else if (knownColors.includes(v)) {\n                return v;\n            }\n\n            return `#${v}`;\n        }\n\n        var themeColor = xml.stringAttr(node, \"themeColor\");\n\n        return themeColor ? `var(--docx-${themeColor}-color)` : defValue;\n    }\n\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\n        return globalXmlParser.boolAttr(node, attrName, defValue);\n    }\n\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\n        return globalXmlParser.intAttr(node, attrName, defValue);\n    }\n\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\n    }\n\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\n        return xml.convertSize(node.textContent, type);\n    }\n\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\n        if (val == null || /.+p[xt]$/.test(val))\n            return val;\n\n        var intVal = parseInt(val);\n\n        switch (type) {\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\n        }\n\n        return val;\n    }\n\n    static className(node: Element, attrName: string) {\n        var val = xml.stringAttr(node, attrName);\n\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\n    }\n}\n\nclass values {\n    static themeValue(c: Element, attr: string) {\n        var val = xml.stringAttr(c, attr); \n        return val ? `var(--docx-${val}-font)` : null;\n    }\n    \n    static valueOfBold(c: Element) {\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\n    }\n\n    static valueOfSize(c: Element, attr: string) {\n        var type: SizeType = SizeType.Dxa;\n\n        switch (xml.stringAttr(c, \"type\")) {\n            case \"dxa\": break;\n            case \"pct\": type = SizeType.Percent; break;\n            case \"auto\": return \"auto\";\n        }\n\n        return xml.sizeAttr(c, attr, type);\n    }\n\n    static valueOfStrike(c: Element) {\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\n    }\n\n    static valueOfMargin(c: Element) {\n        return xml.sizeAttr(c, \"w\");\n    }\n\n    static valueOfBorder(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n\n        if (type == \"nil\")\n            return \"none\";\n\n        var color = xml.colorAttr(c, \"color\");\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\n\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\n    }\n\n    static valueOfTblLayout(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\n    }\n\n    static classNameOfCnfStyle(c: Element) {\n        let className = \"\";\n        let val = xml.stringAttr(c, \"val\");\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\n\n        if (val[0] == \"1\") className += \" first-row\";\n        if (val[1] == \"1\") className += \" last-row\";\n        if (val[2] == \"1\") className += \" first-col\";\n        if (val[3] == \"1\") className += \" last-col\";\n        if (val[4] == \"1\") className += \" odd-col\";\n        if (val[5] == \"1\") className += \" even-col\";\n        if (val[6] == \"1\") className += \" odd-row\";\n        if (val[7] == \"1\") className += \" even-row\";\n        if (val[8] == \"1\") className += \" ne-cell\";\n        if (val[9] == \"1\") className += \" nw-cell\";\n        if (val[10] == \"1\") className += \" se-cell\";\n        if (val[11] == \"1\") className += \" sw-cell\";\n\n        return className.trim();\n    }\n\n    static valueOfJc(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n\n        switch (type) {\n            case \"start\":\n            case \"left\": return \"left\";\n            case \"center\": return \"center\";\n            case \"end\":\n            case \"right\": return \"right\";\n            case \"both\": return \"justify\";\n        }\n\n        return type;\n    }\n\n    static valueOfTextAlignment(c: Element) {\n        var type = xml.stringAttr(c, \"val\");\n\n        switch (type) {\n            case \"auto\":\n            case \"baseline\": return \"baseline\";\n            case \"top\": return \"top\";\n            case \"center\": return \"middle\";\n            case \"bottom\": return \"bottom\";\n        }\n\n        return type;\n    }\n\n    static addSize(a: string, b: string): string {\n        if (a == null) return b;\n        if (b == null) return a;\n\n        return `calc(${a} + ${b})`; //TODO\n    }\n\n    static checkMask(num: number, mask: number) {\n        return (num & mask) == mask;\n    }\n\n    static classNameOftblLook(c: Element) {\n        let className = \"\";\n\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\n\n        return className.trim();\n    }\n}","import { Part } from \"../common/part\";\nimport { CorePropsDeclaration, parseCoreProps } from \"./core-props\";\n\nexport class CorePropsPart extends Part {\n    props: CorePropsDeclaration;\n\n    parseXml(root: Element) {\n        this.props = parseCoreProps(root, this._package.xmlParser);\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport interface CorePropsDeclaration {\n    title: string,\n    description: string,\n    subject: string,\n    creator: string,\n    keywords: string,\n    language: string,\n    lastModifiedBy: string,\n    revision: number,\n}\n\nexport function parseCoreProps(root: Element, xmlParser: XmlParser): CorePropsDeclaration {\n    const result = <CorePropsDeclaration>{};\n\n    for (let el of xmlParser.elements(root)) {\n        switch (el.localName) {\n            case \"title\": result.title = el.textContent; break;\n            case \"description\": result.description = el.textContent; break;\n            case \"subject\": result.subject = el.textContent; break;\n            case \"creator\": result.creator = el.textContent; break;\n            case \"keywords\": result.keywords = el.textContent; break;\n            case \"language\": result.language = el.textContent; break;\n            case \"lastModifiedBy\": result.lastModifiedBy = el.textContent; break;\n            case \"revision\": el.textContent && (result.revision = parseInt(el.textContent)); break;\n        }\n    }\n\n    return result;\n}","import { Part } from \"../common/part\";\nimport { ExtendedPropsDeclaration, parseExtendedProps } from \"./extended-props\";\n\nexport class ExtendedPropsPart extends Part {\n    props: ExtendedPropsDeclaration;\n\n    parseXml(root: Element) {\n        this.props = parseExtendedProps(root, this._package.xmlParser);\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport interface ExtendedPropsDeclaration {\n    template: string,\n    totalTime: number,\n    pages: number,\n    words: number,\n    characters: number,\n    application: string,\n    lines: number,\n    paragraphs: number,\n    company: string,\n    appVersion: string\n}\n\nexport function parseExtendedProps(root: Element, xmlParser: XmlParser): ExtendedPropsDeclaration {\n    const result = <ExtendedPropsDeclaration>{\n\n    };\n\n    for (let el of xmlParser.elements(root)) {\n        switch (el.localName) {\n            case \"Template\":\n                result.template = el.textContent;\n                break;\n            case \"Pages\":\n                result.pages = safeParseToInt(el.textContent);\n                break;\n            case \"Words\":\n                result.words = safeParseToInt(el.textContent);\n                break;\n            case \"Characters\":\n                result.characters = safeParseToInt(el.textContent);\n                break;\n            case \"Application\":\n                result.application = el.textContent;\n                break;\n            case \"Lines\":\n                result.lines = safeParseToInt(el.textContent);\n                break;\n            case \"Paragraphs\":\n                result.paragraphs = safeParseToInt(el.textContent);\n                break;\n            case \"Company\":\n                result.company = el.textContent;\n                break;\n            case \"AppVersion\":\n                result.appVersion = el.textContent;\n                break;\n        }\n    }\n\n    return result;\n}\n\nfunction safeParseToInt(value: string): number {\n    if (typeof value === 'undefined')\n        return;\n    return parseInt(value);\n}","import { XmlParser } from \"../parser/xml-parser\";\nimport { DomType, OpenXmlElement } from \"./dom\";\n\nexport interface BookmarkStartElement extends OpenXmlElement {\n    id: string;\n    name: string;\n    colFirst: number;\n    colLast: number;\n}\n\nexport interface BookmarkEndElement extends OpenXmlElement {\n    id: string;\n}\n\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\n    return {\n        type: DomType.BookmarkStart,\n        id: xml.attr(elem, \"id\"),\n        name: xml.attr(elem, \"name\"),\n        colFirst: xml.intAttr(elem, \"colFirst\"),\n        colLast: xml.intAttr(elem, \"colLast\")\n    }\n}\n\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\n    return {\n        type: DomType.BookmarkEnd,\n        id: xml.attr(elem, \"id\")\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport const ns = {\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n    drawingml: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\n    picture: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\n}\n\nexport type LengthType = \"px\" | \"pt\" | \"%\";\n\nexport interface Length {\n    value: number;\n    type: LengthType\n}\n\nexport interface Font {\n    name: string;\n    family: string;\n}\n\nexport interface CommonProperties {\n    fontSize: Length;\n    color: string;\n}\n\nexport type LengthUsageType = { mul: number, unit: LengthType };\n\nexport const LengthUsage: Record<string, LengthUsageType> = {\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\n    FontSize: { mul: 0.5, unit: \"pt\" },\n    Border: { mul: 0.125, unit: \"pt\" },\n    Point: { mul: 1, unit: \"pt\" },\n    Percent: { mul: 0.02, unit: \"%\" },\n    LineHeight: { mul: 1 / 240, unit: null }\n}\n\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\n    if (!val) {\n        return null;\n    }\n\n    //\"simplified\" docx documents use pt's as units\n    if (val.endsWith('pt')) {\n        return { value: parseFloat(val), type: 'pt' };\n    }\n\n    if (val.endsWith('%')) {\n        return { value: parseFloat(val), type: '%' };\n    }\n\n    return { value: parseInt(val) * usage.mul, type: usage.unit };\n}\n\nexport function convertBoolean(v: string, defaultValue = false): boolean {\n    switch (v) {\n        case \"1\": return true;\n        case \"0\": return false;\n        case \"true\": return true;\n        case \"false\": return false;\n        default: return defaultValue;\n    }\n}\n\nexport function convertPercentage(val: string): number {\n    return val ? parseInt(val) / 100 : null;\n}\n\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\n    if(elem.namespaceURI != ns.wordml)\n        return false;\n\n    switch(elem.localName) {\n        case \"color\": \n            props.color = xml.attr(elem, \"val\");\n            break;\n\n        case \"sz\":\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\n            break;\n\n        default:\n            return false;\n    }\n\n    return true;\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { DocumentElement } from \"./document\";\n\nexport class DocumentPart extends Part {\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n    \n    body: DocumentElement\n\n    parseXml(root: Element) {\n        this.body = this._documentParser.parseDocumentFile(root);\n    }\n}","export enum DomType {\n    Document = \"document\",\n    Paragraph = \"paragraph\",\n    Run = \"run\",\n    Break = \"break\",\n    NoBreakHyphen = \"noBreakHyphen\",\n    Table = \"table\",\n    Row = \"row\",\n    Cell = \"cell\",\n    Hyperlink = \"hyperlink\",\n    Drawing = \"drawing\",\n    Image = \"image\",\n    Text = \"text\",\n    Tab = \"tab\",\n    Symbol = \"symbol\",\n    BookmarkStart = \"bookmarkStart\",\n    BookmarkEnd = \"bookmarkEnd\",\n    Footer = \"footer\",\n    Header = \"header\",\n    FootnoteReference = \"footnoteReference\", \n    Footnote = \"footnote\" \n}\n\nexport interface OpenXmlElement {\n    type: DomType;\n    children?: OpenXmlElement[];\n    cssStyle?: Record<string, string>;\n    className?: string;\n    parent?: OpenXmlElement;\n}\n\nexport interface IDomHyperlink extends OpenXmlElement {\n    href?: string;\n}\n\nexport interface FootnoteReferenceElement extends OpenXmlElement {\n    id: string;\n}\n\nexport interface BreakElement extends OpenXmlElement{\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\n}\n\nexport interface TextElement extends OpenXmlElement{\n    text: string;\n}\n\nexport interface SymbolElement extends OpenXmlElement {\n    font: string;\n    char: string;\n}\n\nexport interface IDomTable extends OpenXmlElement {\n    columns?: IDomTableColumn[];\n    cellStyle?: Record<string, string>;\n}\n\nexport interface IDomTableRow extends OpenXmlElement {\n}\n\nexport interface IDomTableCell extends OpenXmlElement {\n    span?: number;\n}\n\nexport interface IDomImage extends OpenXmlElement {\n    src: string;\n}\n\nexport interface IDomTableColumn {\n    width?: string;\n}\n\nexport interface IDomNumbering {\n    id: string;\n    level: number;\n    pStyleName: string;\n    pStyle: Record<string, string>;\n    rStyle: Record<string, string>;\n    levelText?: string;\n    format?: string;\n    suff?: string;\n    bullet?: NumberingPicBullet;\n}\n\nexport interface NumberingPicBullet {\n    id: number;\n    src: string;\n    style?: string;\n}\n","import { XmlParser } from \"../parser/xml-parser\";\nimport { Length } from \"./common\";\n\nexport interface LineSpacing {\n    after: Length;\n    before: Length;\n    line: number;\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\n}\n\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\n    return {\n        before: xml.lengthAttr(elem, \"before\"),\n        after: xml.lengthAttr(elem, \"after\"),\n        line: xml.intAttr(elem, \"line\"),\n        lineRule: xml.attr(elem, \"lineRule\")\n    } as LineSpacing;\n}","import { OpenXmlElement } from \"./dom\";\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\nimport { Borders } from \"./border\";\nimport { parseSectionProperties, SectionProperties } from \"./section\";\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\nimport { XmlParser } from \"../parser/xml-parser\";\nimport { parseRunProperties, RunProperties } from \"./run\";\n\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\n}\n\nexport interface ParagraphProperties extends CommonProperties {\n    sectionProps: SectionProperties;\n    tabs: ParagraphTab[];\n    numbering: ParagraphNumbering;\n\n    border: Borders;\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\n    lineSpacing: LineSpacing;\n    keepLines: boolean;\n    keepNext: boolean;\n    pageBreakBefore: boolean;\n    outlineLevel: number;\n    styleName: string;\n\n    runProps: RunProperties;\n}\n\nexport interface ParagraphTab {\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\n    position: Length;\n}\n\nexport interface ParagraphNumbering {\n    id: string;\n    level: number;\n}\n\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\n    let result = <ParagraphProperties>{};\n\n    for(let el of xml.elements(elem)) {\n        parseParagraphProperty(el, result, xml);\n    }\n\n    return result;\n}\n\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\n    if (elem.namespaceURI != ns.wordml)\n        return false;\n\n    if(parseCommonProperty(elem, props, xml))\n        return true;\n\n    switch (elem.localName) {\n        case \"tabs\":\n            props.tabs = parseTabs(elem, xml);\n            break;\n\n        case \"sectPr\":\n            props.sectionProps = parseSectionProperties(elem, xml);\n            break;\n\n        case \"numPr\":\n            props.numbering = parseNumbering(elem, xml);\n            break;\n        \n        case \"spacing\":\n            props.lineSpacing = parseLineSpacing(elem, xml);\n            return false; // TODO\n            break;\n\n        case \"textAlignment\":\n            props.textAlignment = xml.attr(elem, \"val\");\n            return false; //TODO\n            break;\n\n        case \"keepNext\":\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\n            break;\n    \n        case \"keepNext\":\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\n            break;\n        \n        case \"pageBreakBefore\":\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\n            break;\n        \n        case \"outlineLvl\":\n            props.outlineLevel = xml.intAttr(elem, \"val\");\n            break;\n\n        case \"pStyle\":\n            props.styleName = xml.attr(elem, \"val\");\n            break;\n\n        case \"rPr\":\n            props.runProps = parseRunProperties(elem, xml);\n            break;\n        \n        default:\n            return false;\n    }\n\n    return true;\n}\n\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\n    return xml.elements(elem, \"tab\")\n        .map(e => <ParagraphTab>{\n            position: xml.lengthAttr(e, \"pos\"),\n            leader: xml.attr(e, \"leader\"),\n            style: xml.attr(e, \"val\")\n        });\n}\n\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\n    var result = <ParagraphNumbering>{};\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"numId\":\n                result.id = xml.attr(e, \"val\");\n                break;\n\n            case \"ilvl\":\n                result.level = xml.intAttr(e, \"val\");\n                break;\n        }\n    }\n\n    return result;\n}","import { XmlParser } from \"../parser/xml-parser\";\nimport { CommonProperties, parseCommonProperty } from \"./common\";\nimport { OpenXmlElement } from \"./dom\";\n\nexport interface RunElement extends OpenXmlElement, RunProperties {\n    id?: string;\n    verticalAlign?: string;\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\n    instrText?: string;\n}\n\nexport interface RunProperties extends CommonProperties {\n\n}\n\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\n    let result = <RunProperties>{};\n\n    for(let el of xml.elements(elem)) {\n        parseRunProperty(el, result, xml);\n    }\n\n    return result;\n}\n\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\n    if (parseCommonProperty(elem, props, xml))\n        return true;\n\n    return false;\n}","import { XmlParser } from \"../parser/xml-parser\";\nimport { Length } from \"./common\";\n\nexport interface Column {\n    space: Length;\n    width: Length;\n}\n\nexport interface Columns {\n    space: Length;\n    numberOfColumns: number;\n    separator: boolean;\n    equalWidth: boolean;\n    columns: Column[];\n}\n\nexport interface PageSize {\n    width: Length, \n    height: Length, \n    orientation: \"landscape\" | string \n}\n\nexport interface PageMargins {\n    top: Length;\n    right: Length;\n    bottom: Length;\n    left: Length;\n    header: Length;\n    footer: Length;\n    gutter: Length;\n}\n\nexport enum SectionType {\n    Continuous = \"continuous\",\n    NextPage = \"nextPage\", \n    NextColumn = \"nextColumn\",\n    EvenPage = \"evenPage\",\n    OddPage = \"oddPage\",\n}\n\nexport interface FooterHeaderReference {\n    id: string;\n    type: string | \"first\" | \"even\" | \"default\";\n}\n\nexport interface SectionProperties {\n    type: SectionType | string;\n    pageSize: PageSize,\n    pageMargins: PageMargins,\n    columns: Columns;\n    footerRefs: FooterHeaderReference[];\n    headerRefs: FooterHeaderReference[];\n}\n\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\n    var section = <SectionProperties>{};\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"pgSz\":\n                section.pageSize = {\n                    width: xml.lengthAttr(e, \"w\"),\n                    height: xml.lengthAttr(e, \"h\"),\n                    orientation: xml.attr(e, \"orient\")\n                }\n                break;\n\n            case \"type\":\n                section.type = xml.attr(e, \"val\");\n                break;\n\n            case \"pgMar\":\n                section.pageMargins = {\n                    left: xml.lengthAttr(e, \"left\"),\n                    right: xml.lengthAttr(e, \"right\"),\n                    top: xml.lengthAttr(e, \"top\"),\n                    bottom: xml.lengthAttr(e, \"bottom\"),\n                    header: xml.lengthAttr(e, \"header\"),\n                    footer: xml.lengthAttr(e, \"footer\"),\n                    gutter: xml.lengthAttr(e, \"gutter\"),\n                };\n                break;\n\n            case \"cols\":\n                section.columns = parseColumns(e, xml);\n                break;\n\n            case \"headerReference\":\n                (section.headerRefs ?? (section.headerRefs = [])).push(parseFooterHeaderReference(e, xml)); \n                break;\n            \n            case \"footerReference\":\n                (section.footerRefs ?? (section.footerRefs = [])).push(parseFooterHeaderReference(e, xml)); \n                break;\n        }\n    }\n\n    return section;\n}\n\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\n    return {\n        numberOfColumns: xml.intAttr(elem, \"num\"),\n        space: xml.lengthAttr(elem, \"space\"),\n        separator: xml.boolAttr(elem, \"sep\"),\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\n        columns: xml.elements(elem, \"col\")\n            .map(e => <Column>{\n                width: xml.lengthAttr(e, \"w\"),\n                space: xml.lengthAttr(e, \"space\")\n            })\n    };\n}\n\nfunction parseFooterHeaderReference(elem: Element, xml: XmlParser): FooterHeaderReference {\n    return {\n        id: xml.attr(elem, \"id\"),\n        type: xml.attr(elem, \"type\"),\n    }\n}","import { WordDocument } from './word-document';\nimport { DocumentParser } from './document-parser';\nimport { HtmlRenderer } from './html-renderer';\n\nexport interface Options {\n    inWrapper: boolean;\n    ignoreWidth: boolean;\n    ignoreHeight: boolean;\n    ignoreFonts: boolean;\n    breakPages: boolean;\n    debug: boolean;\n    experimental: boolean;\n    className: string;\n    trimXmlDeclaration: boolean;\n    renderHeaders: boolean;\n    renderFooters: boolean;\n    renderFootnotes: boolean;\n    ignoreLastRenderedPageBreak: boolean;\n}\n\nexport const defaultOptions: Options = {\n    ignoreHeight: false,\n    ignoreWidth: false,\n    ignoreFonts: false,\n    breakPages: true,\n    debug: false,\n    experimental: false,\n    className: \"docx\",\n    inWrapper: true,\n    trimXmlDeclaration: true,\n    ignoreLastRenderedPageBreak: true,\n    renderHeaders: true,\n    renderFooters: true,\n    renderFootnotes: true\n}\n\nexport function praseAsync(data: Blob | any, userOptions: Partial<Options> = null): Promise<any>  {\n    const ops = { ...defaultOptions, ...userOptions };\n    return WordDocument.load(data, new DocumentParser(ops), ops);\n}\n\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null): Promise<any> {\n    const ops = { ...defaultOptions, ...userOptions };\n    const renderer = new HtmlRenderer(window.document);\n\n    return WordDocument\n        .load(data, new DocumentParser(ops), ops)\n        .then(doc => {\n            renderer.render(doc, bodyContainer, styleContainer, ops);\n            return doc;\n        });\n}","import { Part } from \"../common/part\";\nimport { FontDeclaration, parseFonts } from \"./fonts\";\n\nexport class FontTablePart extends Part {\n    fonts: FontDeclaration[];\n\n    parseXml(root: Element) {\n        this.fonts = parseFonts(root, this._package.xmlParser);\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nconst embedFontTypeMap = {\n    embedRegular: 'regular',\n    embedBold: 'bold',\n    embedItalic: 'italic',\n    embedBoldItalic: 'boldItalic',\n}\n\nexport interface FontDeclaration {\n    name: string,\n    altName: string,\n    family: string,\n    embedFontRefs: EmbedFontRef[];\n}\n\nexport interface EmbedFontRef {\n    id: string;\n    key: string;\n    type: 'regular' | 'bold' | 'italic' | 'boldItalic';\n}\n\nexport function parseFonts(root: Element, xml: XmlParser): FontDeclaration[] {\n    return xml.elements(root).map(el => parseFont(el, xml));\n}\n\nexport function parseFont(elem: Element, xml: XmlParser): FontDeclaration {\n    let result = <FontDeclaration>{\n        name: xml.attr(elem, \"name\"),\n        embedFontRefs: []\n    };\n\n    for (let el of xml.elements(elem)) {\n        switch (el.localName) {\n            case \"family\":\n                result.family = xml.attr(el, \"val\");\n                break;\n\n            case \"altName\":\n                result.altName = xml.attr(el, \"val\");\n                break;\n\n            case \"embedRegular\":\n            case \"embedBold\":\n            case \"embedItalic\":\n            case \"embedBoldItalic\":\n                result.embedFontRefs.push(parseEmbedFontRef(el, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseEmbedFontRef(elem: Element, xml: XmlParser): EmbedFontRef {\n    return { \n        id: xml.attr(elem, \"id\"), \n        key: xml.attr(elem, \"fontKey\"),\n        type: embedFontTypeMap[elem.localName]\n    };\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { WmlFooter } from \"./footer\";\n\nexport class FooterPart extends Part {\n    footerElement: WmlFooter;\n    \n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n    \n    parseXml(root: Element) {\n        this.footerElement = this._documentParser.parseFooter(root);\n    }\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\n\nexport class WmlFooter implements OpenXmlElement {\n    type: DomType = DomType.Footer;\n    children?: OpenXmlElement[] = [];\n    cssStyle?: Record<string, string> = {};\n    className?: string;\n    parent?: OpenXmlElement;\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\n\nexport class WmlFootnote implements OpenXmlElement {\n    id: string;\n    footnoteType: string;\n    type: DomType = DomType.Footnote;\n    children?: OpenXmlElement[] = [];\n    cssStyle?: Record<string, string> = {};\n    className?: string;\n    parent?: OpenXmlElement;\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { WmlFootnote } from \"./footnote\";\n\nexport class FootnotesPart extends Part {\n    private _documentParser: DocumentParser;\n\n    footnotes: WmlFootnote[]\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    parseXml(root: Element) {\n        this.footnotes = this._documentParser.parseFootnotes(root);\n    }\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { WmlHeader } from \"./header\";\n\nexport class HeaderPart extends Part {\n    headerElement: WmlHeader;\n\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    parseXml(root: Element) {\n        this.headerElement = this._documentParser.parseHeader(root);\n    }\n}","import { DomType, OpenXmlElement } from \"../document/dom\";\n\nexport class WmlHeader implements OpenXmlElement {\n    type: DomType = DomType.Header;\n    children?: OpenXmlElement[] = [];\n    cssStyle?: Record<string, string> = {};\n    className?: string;\n    parent?: OpenXmlElement;\n}","import { WordDocument } from './word-document';\nimport {\n    DomType, IDomTable, IDomNumbering,\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement, FootnoteReferenceElement\n} from './document/dom';\nimport { Length, CommonProperties } from './document/common';\nimport { Options } from './docx-preview';\nimport { DocumentElement } from './document/document';\nimport { ParagraphElement } from './document/paragraph';\nimport { appendClass, keyBy, mergeDeep } from './utils';\nimport { updateTabStop } from './javascript';\nimport { FontTablePart } from './font-table/font-table';\nimport { FooterHeaderReference, SectionProperties } from './document/section';\nimport { RunElement, RunProperties } from './document/run';\nimport { BookmarkStartElement } from './document/bookmark';\nimport { IDomStyle } from './document/style';\nimport { Part } from './common/part';\nimport { HeaderPart } from './header/header-part';\nimport { FooterPart } from './footer/footer-part';\nimport { WmlFootnote } from './footnotes/footnote';\nimport { ThemePart } from './theme/theme-part';\n\nexport class HtmlRenderer {\n\n    className: string = \"docx\";\n    document: WordDocument;\n    options: Options;\n    styleMap: Record<string, IDomStyle> = {};\n\n    footnoteMap: Record<string, WmlFootnote> = {};\n    currentFootnoteIds: string[];\n\n    constructor(public htmlDocument: Document) {\n    }\n\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\n        this.document = document;\n        this.options = options;\n        this.className = options.className;\n        this.styleMap = null;\n\n        styleContainer = styleContainer || bodyContainer;\n\n        removeAllElements(styleContainer);\n        removeAllElements(bodyContainer);\n\n        appendComment(styleContainer, \"docxjs library predefined styles\");\n        styleContainer.appendChild(this.renderDefaultStyle());\n\n        if (document.themePart) {\n            appendComment(styleContainer, \"docxjs document theme values\");\n            this.renderTheme(document.themePart, styleContainer);\n        }\n\n        if (document.stylesPart != null) {\n            this.styleMap = this.processStyles(document.stylesPart.styles);\n\n            appendComment(styleContainer, \"docxjs document styles\");\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\n        }\n\n        if (document.numberingPart) {\n            this.prodessNumberings(document.numberingPart.domNumberings);\n\n            appendComment(styleContainer, \"docxjs document numbering styles\");\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\n        }\n\n        if (document.footnotesPart) {\n            this.footnoteMap = keyBy(document.footnotesPart.footnotes, x => x.id);\n        }\n\n        if (!options.ignoreFonts && document.fontTablePart)\n            this.renderFontTable(document.fontTablePart, styleContainer);\n\n        var sectionElements = this.renderSections(document.documentPart.body);\n\n        if (this.options.inWrapper) {\n            bodyContainer.appendChild(this.renderWrapper(sectionElements));\n        } else {\n            appendChildren(bodyContainer, sectionElements);\n        }\n    }\n\n    renderTheme(themePart: ThemePart, styleContainer: HTMLElement) {\n        const variables = {};\n        const fontScheme = themePart.theme?.fontScheme;\n\n        if (fontScheme) {\n            if (fontScheme.majorFont) {\n                variables['--docx-majorHAnsi-font'] = fontScheme.majorFont.latinTypeface;\n            }\n\n            if (fontScheme.minorFont) {\n                variables['--docx-minorHAnsi-font'] = fontScheme.minorFont.latinTypeface;\n            }\n        }\n\n        const colorScheme = themePart.theme?.colorScheme;\n\n        if (colorScheme) {\n            for (let [k, v] of Object.entries(colorScheme.colors)) {\n                variables[`--docx-${k}-color`] = `#${v}`;\n            }\n        }\n\n        const cssText = this.styleToString(`.${this.className}`, variables);\n        styleContainer.appendChild(createStyleElement(cssText));\n    }\n\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\n        for (let f of fontsPart.fonts) {\n            for (let ref of f.embedFontRefs) {\n                this.document.loadFont(ref.id, ref.key).then(fontData => {\n                    var cssValues = {\n                        'font-family': f.name,\n                        'src': `url(${fontData})`\n                    };\n\n                    if (ref.type == \"bold\" || ref.type == \"boldItalic\") {\n                        cssValues['font-weight'] = 'bold';\n                    }\n\n                    if (ref.type == \"italic\" || ref.type == \"boldItalic\") {\n                        cssValues['font-style'] = 'italic';\n                    }\n\n                    appendComment(styleContainer, `docxjs ${f.name} font`);\n                    const cssText = this.styleToString(\"@font-face\", cssValues);\n                    styleContainer.appendChild(createStyleElement(cssText));\n                });\n            }\n        }\n    }\n\n    processClassName(className: string) {\n        if (!className)\n            return this.className;\n\n        return `${this.className}_${className}`;\n    }\n\n    processStyles(styles: IDomStyle[]) {\n        const stylesMap = keyBy(styles.filter(x => x.id != null), x => x.id);\n\n        for (let style of styles.filter(x => x.basedOn)) {\n            var baseStyle = stylesMap[style.basedOn];\n\n            if (baseStyle) {\n                style.paragraphProps = mergeDeep(style.paragraphProps, baseStyle.paragraphProps);\n                style.runProps = mergeDeep(style.runProps, baseStyle.runProps);\n\n                for (let styleValues of style.styles) {\n                    var baseValues = baseStyle.styles.find(x => x.target == styleValues.target);\n\n                    if (baseValues) {\n                        this.copyStyleProperties(baseValues.values, styleValues.values);\n                    }\n                }\n            }\n            else if (this.options.debug)\n                console.warn(`Can't find base style ${style.basedOn}`);\n        }\n\n        for (let style of styles) {\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\n        }\n\n        return stylesMap;\n    }\n\n    prodessNumberings(numberings: IDomNumbering[]) {\n        for (let num of numberings.filter(n => n.pStyleName)) {\n            const style = this.styleMap[num.pStyleName];\n\n            if (style.paragraphProps?.numbering) {\n                style.paragraphProps.numbering.level = num.level;\n            }\n        }\n    }\n\n    processElement(element: OpenXmlElement) {\n        if (element.children) {\n            for (var e of element.children) {\n                e.className = this.processClassName(e.className);\n                e.parent = element;\n\n                if (e.type == DomType.Table) {\n                    this.processTable(e);\n                }\n                else {\n                    this.processElement(e);\n                }\n            }\n        }\n    }\n\n    processTable(table: IDomTable) {\n        for (var r of table.children) {\n            for (var c of r.children) {\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\n                ]);\n\n                this.processElement(c);\n            }\n        }\n    }\n\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\n        if (!input)\n            return output;\n\n        if (output == null) output = {};\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\n\n        for (var key of attrs) {\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\n                output[key] = input[key];\n        }\n\n        return output;\n    }\n\n    createSection(className: string, props: SectionProperties) {\n        var elem = this.createElement(\"section\", { className });\n\n        if (props) {\n            if (props.pageMargins) {\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\n            }\n\n            if (props.pageSize) {\n                if (!this.options.ignoreWidth)\n                    elem.style.width = this.renderLength(props.pageSize.width);\n                if (!this.options.ignoreHeight)\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\n            }\n\n            if (props.columns && props.columns.numberOfColumns) {\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\n                elem.style.columnGap = this.renderLength(props.columns.space);\n\n                if (props.columns.separator) {\n                    elem.style.columnRule = \"1px solid black\";\n                }\n            }\n        }\n\n        return elem;\n    }\n\n    renderSections(document: DocumentElement): HTMLElement[] {\n        const result = [];\n\n        this.processElement(document);\n\n        for (let section of this.splitBySection(document.children)) {\n            this.currentFootnoteIds = [];\n\n            const props = section.sectProps || document.props;\n            const sectionElement = this.createSection(this.className, props);\n            this.renderStyleValues(document.cssStyle, sectionElement);\n\n            var headerPart = this.options.renderHeaders ? this.findHeaderFooter<HeaderPart>(props.headerRefs, result.length) : null;\n            var footerPart = this.options.renderFooters ? this.findHeaderFooter<FooterPart>(props.footerRefs, result.length) : null;\n\n            headerPart && this.renderElements([headerPart.headerElement], sectionElement);\n\n            var contentElement = this.createElement(\"article\");\n            this.renderElements(section.elements, contentElement);\n            sectionElement.appendChild(contentElement);\n\n            if (this.options.renderFootnotes) {\n                this.renderFootnotes(this.currentFootnoteIds, sectionElement);\n            }\n\n            footerPart && this.renderElements([footerPart.footerElement], sectionElement);\n\n            result.push(sectionElement);\n        }\n\n        return result;\n    }\n\n    findHeaderFooter<T extends Part>(refs: FooterHeaderReference[], page: number): T {\n        var ref = refs ? ((page == 0 ? refs.find(x => x.type == \"first\") : null)\n            ?? (page % 2 == 0 ? refs.find(x => x.type == \"even\") : null)\n            ?? refs.find(x => x.type == \"default\")) : null;\n\n        if (ref == null)\n            return null;\n\n        return this.document.findPartByRelId(ref.id, this.document.documentPart) as T;\n    }\n\n    isPageBreakElement(elem: OpenXmlElement): boolean {\n        if (elem.type != DomType.Break)\n            return false;\n\n        if ((elem as BreakElement).break == \"lastRenderedPageBreak\")\n            return !this.options.ignoreLastRenderedPageBreak;\n\n        return (elem as BreakElement).break == \"page\";\n    }\n\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\n        var current = { sectProps: null, elements: [] };\n        var result = [current];\n\n        for (let elem of elements) {\n            if (elem.type == DomType.Paragraph) {\n                const styleName = (elem as ParagraphElement).styleName;\n                const s = this.styleMap && styleName ? this.styleMap[styleName] : null;\n\n                if (s?.paragraphProps?.pageBreakBefore) {\n                    current.sectProps = sectProps;\n                    current = { sectProps: null, elements: [] };\n                    result.push(current);\n                }\n            }\n\n            current.elements.push(elem);\n\n            if (elem.type == DomType.Paragraph) {\n                const p = elem as ParagraphElement;\n\n                var sectProps = p.sectionProps;\n                var pBreakIndex = -1;\n                var rBreakIndex = -1;\n\n                if (this.options.breakPages && p.children) {\n                    pBreakIndex = p.children.findIndex(r => {\n                        rBreakIndex = r.children?.findIndex(this.isPageBreakElement.bind(this)) ?? -1;\n                        return rBreakIndex != -1;\n                    });\n                }\n\n                if (sectProps || pBreakIndex != -1) {\n                    current.sectProps = sectProps;\n                    current = { sectProps: null, elements: [] };\n                    result.push(current);\n                }\n\n                if (pBreakIndex != -1) {\n                    let breakRun = p.children[pBreakIndex];\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\n\n                    if (pBreakIndex < p.children.length - 1 || splitRun) {\n                        var children = elem.children;\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\n                        elem.children = children.slice(0, pBreakIndex);\n                        current.elements.push(newParagraph);\n\n                        if (splitRun) {\n                            let runChildren = breakRun.children;\n                            let newRun = { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\n                            elem.children.push(newRun);\n                            breakRun.children = runChildren.slice(rBreakIndex);\n                        }\n                    }\n                }\n            }\n        }\n\n        let currentSectProps = null;\n\n        for (let i = result.length - 1; i >= 0; i--) {\n            if (result[i].sectProps == null) {\n                result[i].sectProps = currentSectProps;\n            } else {\n                currentSectProps = result[i].sectProps\n            }\n        }\n\n        return result;\n    }\n\n    renderLength(l: Length): string {\n        return l ? `${l.value.toFixed(2)}${l.type ?? ''}` : null;\n    }\n\n    renderWrapper(children: HTMLElement[]) {\n        return this.createElement(\"div\", { className: `${this.className}-wrapper` }, children);\n    }\n\n    renderDefaultStyle() {\n        var c = this.className;\n        var styleText = `\n.${c}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \n.${c}-wrapper>section.${c} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\n.${c} { color: black; }\nsection.${c} { box-sizing: border-box; display: flex; flex-flow: column nowrap; position: relative; }\nsection.${c}>article { margin-bottom: auto; }\n.${c} table { border-collapse: collapse; }\n.${c} table td, .${c} table th { vertical-align: top; }\n.${c} p { margin: 0pt; min-height: 1em; }\n.${c} span { white-space: pre-wrap; }\n`;\n\n        return createStyleElement(styleText);\n    }\n\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\n    //     let css = \"\";\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\n    //     const topCounters = [];\n\n    //     for(let num of numberingPart.numberings) {\n    //         const absNum = numberingMap[num.abstractId];\n\n    //         for(let lvl of absNum.levels) {\n    //             const className = this.numberingClass(num.id, lvl.level);\n    //             let listStyleType = \"none\";\n\n    //             if(lvl.text && lvl.format == 'decimal') {\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\n\n    //                 if (lvl.level > 0) {\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\n    //                         \"counter-reset\": counter\n    //                     });\n    //                 } else {\n    //                     topCounters.push(counter);\n    //                 }\n\n    //                 css += this.styleToString(`p.${className}:before`, {\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\n    //                     \"counter-increment\": counter\n    //                 });\n    //             } else if(lvl.bulletPictureId) {\n    //                 let pict = bulletMap[lvl.bulletPictureId];\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\n\n    //                 css += this.styleToString(`p.${className}:before`, {\n    //                     \"content\": \"' '\",\n    //                     \"display\": \"inline-block\",\n    //                     \"background\": `var(${variable})`\n    //                 }, pict.style);\n\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\n    //                     container.appendChild(createStyleElement(text));\n    //                 });\n    //             } else {\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\n    //             }\n\n    //             css += this.styleToString(`p.${className}`, {\n    //                 \"display\": \"list-item\",\n    //                 \"list-style-position\": \"inside\",\n    //                 \"list-style-type\": listStyleType,\n    //                 //TODO\n    //                 //...num.style\n    //             });\n    //         }\n    //     }\n\n    //     if (topCounters.length > 0) {\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\n    //             \"counter-reset\": topCounters.join(\" \")\n    //         });\n    //     }\n\n    //     return createStyleElement(css);\n    // }\n\n    renderNumbering(numberings: IDomNumbering[], styleContainer: HTMLElement) {\n        var styleText = \"\";\n        var rootCounters = [];\n\n        for (var num of numberings) {\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\n            var listStyleType = \"none\";\n\n            if (num.bullet) {\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\n\n                styleText += this.styleToString(`${selector}:before`, {\n                    \"content\": \"' '\",\n                    \"display\": \"inline-block\",\n                    \"background\": `var(${valiable})`\n                }, num.bullet.style);\n\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\n                    styleContainer.appendChild(createStyleElement(text));\n                });\n            }\n            else if (num.levelText) {\n                let counter = this.numberingCounter(num.id, num.level);\n\n                if (num.level > 0) {\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\n                        \"counter-reset\": counter\n                    });\n                }\n                else {\n                    rootCounters.push(counter);\n                }\n\n                styleText += this.styleToString(`${selector}:before`, {\n                    \"content\": this.levelTextToContent(num.levelText, num.suff, num.id, this.numFormatToCssValue(num.format)),\n                    \"counter-increment\": counter,\n                    ...num.rStyle,\n                });\n            }\n            else {\n                listStyleType = this.numFormatToCssValue(num.format);\n            }\n\n            styleText += this.styleToString(selector, {\n                \"display\": \"list-item\",\n                \"list-style-position\": \"inside\",\n                \"list-style-type\": listStyleType,\n                ...num.pStyle\n            });\n        }\n\n        if (rootCounters.length > 0) {\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\n                \"counter-reset\": rootCounters.join(\" \")\n            });\n        }\n\n        return createStyleElement(styleText);\n    }\n\n    renderStyles(styles: IDomStyle[]): HTMLElement {\n        var styleText = \"\";\n        var stylesMap = this.styleMap;\n        var defautStyles = keyBy(styles.filter(s => s.isDefault), s => s.target);\n\n        for (let style of styles) {\n            var subStyles = style.styles;\n\n            if (style.linked) {\n                var linkedStyle = style.linked && stylesMap[style.linked];\n\n                if (linkedStyle)\n                    subStyles = subStyles.concat(linkedStyle.styles);\n                else if (this.options.debug)\n                    console.warn(`Can't find linked style ${style.linked}`);\n            }\n\n            for (var subStyle of subStyles) {\n                var selector = \"\";\n\n                if (style.target == subStyle.target)\n                    selector += `${style.target}.${style.cssName}`;\n                else if (style.target)\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\n                else\n                    selector += `.${style.cssName} ${subStyle.target}`;\n\n                if (defautStyles[style.target] == style)\n                    selector = `.${this.className} ${style.target}, ` + selector;\n\n                styleText += this.styleToString(selector, subStyle.values);\n            }\n        }\n\n        return createStyleElement(styleText);\n    }\n\n    renderFootnotes(footnoteIds: string[], into: HTMLElement) {\n        var footnotes = footnoteIds.map(id => this.footnoteMap[id]).filter(x => x);\n\n        if (footnotes.length > 0) {\n            var result = this.createElement(\"ol\", null, this.renderElements(footnotes));\n            into.appendChild(result);\n        }\n    }\n\n    renderElement(elem: OpenXmlElement): Node {\n        switch (elem.type) {\n            case DomType.Paragraph:\n                return this.renderParagraph(<ParagraphElement>elem);\n\n            case DomType.BookmarkStart:\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\n\n            case DomType.BookmarkEnd:\n                return null;\n\n            case DomType.Run:\n                return this.renderRun(<RunElement>elem);\n\n            case DomType.Table:\n                return this.renderTable(elem);\n\n            case DomType.Row:\n                return this.renderTableRow(elem);\n\n            case DomType.Cell:\n                return this.renderTableCell(elem);\n\n            case DomType.Hyperlink:\n                return this.renderHyperlink(elem);\n\n            case DomType.Drawing:\n                return this.renderDrawing(<IDomImage>elem);\n\n            case DomType.Image:\n                return this.renderImage(<IDomImage>elem);\n\n            case DomType.Text:\n                return this.renderText(<TextElement>elem);\n\n            case DomType.Tab:\n                return this.renderTab(elem);\n\n            case DomType.Symbol:\n                return this.renderSymbol(<SymbolElement>elem);\n\n            case DomType.Break:\n                return this.renderBreak(<BreakElement>elem);\n\n            case DomType.Footer:\n                return this.renderContainer(elem, \"footer\");\n\n            case DomType.Header:\n                return this.renderContainer(elem, \"header\");\n\n            case DomType.Footnote:\n                return this.renderContainer(elem, \"li\");\n\n            case DomType.FootnoteReference:\n                return this.renderFootnoteReference(elem as FootnoteReferenceElement);\n\n            case DomType.NoBreakHyphen:\n                return this.createElement(\"wbr\");\n        }\n\n        return null;\n    }\n\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\n        return this.renderElements(elem.children, into);\n    }\n\n    renderElements(elems: OpenXmlElement[], into?: HTMLElement): Node[] {\n        if (elems == null)\n            return null;\n\n        var result = elems.map(e => this.renderElement(e)).filter(e => e != null);\n\n        if (into)\n            for (let c of result)\n                into.appendChild(c);\n\n        return result;\n    }\n\n    renderContainer(elem: OpenXmlElement, tagName: keyof HTMLElementTagNameMap) {\n        return this.createElement(tagName, null, this.renderChildren(elem));\n    }\n\n    renderParagraph(elem: ParagraphElement) {\n        var result = this.createElement(\"p\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        this.renderCommonProeprties(result.style, elem);\n\n        const style = elem.styleName && this.styleMap[elem.styleName];\n        const numbering = elem.numbering ?? style?.paragraphProps?.numbering;\n\n        if (numbering) {\n            var numberingClass = this.numberingClass(numbering.id, numbering.level);\n            result.className = appendClass(result.className, numberingClass);\n        }\n\n        if (elem.styleName) {\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\n            result.className = appendClass(result.className, styleClassName);\n        }\n\n        return result;\n    }\n\n    renderRunProperties(style: any, props: RunProperties) {\n        this.renderCommonProeprties(style, props);\n    }\n\n    renderCommonProeprties(style: any, props: CommonProperties) {\n        if (props == null)\n            return;\n\n        if (props.color) {\n            style[\"color\"] = props.color;\n        }\n\n        if (props.fontSize) {\n            style[\"font-size\"] = this.renderLength(props.fontSize);\n        }\n    }\n\n    renderHyperlink(elem: IDomHyperlink) {\n        var result = this.createElement(\"a\");\n\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (elem.href)\n            result.href = elem.href\n\n        return result;\n    }\n\n    renderDrawing(elem: IDomImage) {\n        var result = this.createElement(\"div\");\n\n        result.style.display = \"inline-block\";\n        result.style.position = \"relative\";\n        result.style.textIndent = \"0px\";\n\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        return result;\n    }\n\n    renderImage(elem: IDomImage) {\n        let result = this.createElement(\"img\");\n\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (this.document) {\n            this.document.loadDocumentImage(elem.src).then(x => {\n                result.src = x;\n            });\n        }\n\n        return result;\n    }\n\n    renderText(elem: TextElement) {\n        return this.htmlDocument.createTextNode(elem.text);\n    }\n\n    renderBreak(elem: BreakElement) {\n        if (elem.break == \"textWrapping\") {\n            return this.createElement(\"br\");\n        }\n\n        return null;\n    }\n\n    renderSymbol(elem: SymbolElement) {\n        var span = this.createElement(\"span\");\n        span.style.fontFamily = elem.font;\n        span.innerHTML = `&#x${elem.char};`\n        return span;\n    }\n\n    renderFootnoteReference(elem: FootnoteReferenceElement) {\n        var result = this.createElement(\"sup\");\n        this.currentFootnoteIds.push(elem.id);\n        result.textContent = `${this.currentFootnoteIds.length}`;\n        return result;\n    }\n\n    renderTab(elem: OpenXmlElement) {\n        var tabSpan = this.createElement(\"span\");\n\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\n\n        if (this.options.experimental) {\n            setTimeout(() => {\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\n\n                if (paragraph?.tabs == null)\n                    return;\n\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\n                updateTabStop(tabSpan, paragraph.tabs);\n            }, 1500);\n        }\n\n        return tabSpan;\n    }\n\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\n        var result = this.createElement(\"span\");\n        result.id = elem.name;\n        return result;\n    }\n\n    renderRun(elem: RunElement) {\n        if (elem.fldCharType || elem.instrText)\n            return null;\n\n        var result = this.createElement(\"span\");\n\n        if (elem.id)\n            result.id = elem.id;\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (elem.verticalAlign) {\n            result.style.verticalAlign = elem.verticalAlign;\n            result.style.fontSize ||= \"small\";\n        }\n\n        return result;\n    }\n\n    renderTable(elem: IDomTable) {\n        let result = this.createElement(\"table\");\n\n        if (elem.columns)\n            result.appendChild(this.renderTableColumns(elem.columns));\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        return result;\n    }\n\n    renderTableColumns(columns: IDomTableColumn[]) {\n        let result = this.createElement(\"colgroup\");\n\n        for (let col of columns) {\n            let colElem = this.createElement(\"col\");\n\n            if (col.width)\n                colElem.style.width = col.width;\n\n            result.appendChild(colElem);\n        }\n\n        return result;\n    }\n\n    renderTableRow(elem: OpenXmlElement) {\n        let result = this.createElement(\"tr\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        return result;\n    }\n\n    renderTableCell(elem: IDomTableCell) {\n        let result = this.createElement(\"td\");\n\n        this.renderClass(elem, result);\n        this.renderChildren(elem, result);\n        this.renderStyleValues(elem.cssStyle, result);\n\n        if (elem.span) result.colSpan = elem.span;\n\n        return result;\n    }\n\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\n        if (style == null)\n            return;\n\n        for (let key in style) {\n            if (style.hasOwnProperty(key)) {\n                ouput.style[key] = style[key];\n            }\n        }\n    }\n\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\n        if (input.className)\n            ouput.className = input.className;\n    }\n\n    numberingClass(id: string, lvl: number) {\n        return `${this.className}-num-${id}-${lvl}`;\n    }\n\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\n        let result = selectors + \" {\\r\\n\";\n\n        for (const key in values) {\n            result += `  ${key}: ${values[key]};\\r\\n`;\n        }\n\n        if (cssText)\n            result += cssText;\n\n        return result + \"}\\r\\n\";\n    }\n\n    numberingCounter(id: string, lvl: number) {\n        return `${this.className}-num-${id}-${lvl}`;\n    }\n\n    levelTextToContent(text: string, suff: string, id: string, numformat: string) {\n        const suffMap = {\n            \"tab\": \"\\\\9\",\n            \"space\": \"\\\\a0\",\n        };\n\n        var result = text.replace(/%\\d*/g, s => {\n            let lvl = parseInt(s.substring(1), 10) - 1;\n            return `\"counter(${this.numberingCounter(id, lvl)}, ${numformat})\"`;\n        });\n\n        return `\"${result}${suffMap[suff] ?? \"\"}\"`;\n    }\n\n    numFormatToCssValue(format: string) {\n        var mapping = {\n            \"none\": \"none\",\n            \"bullet\": \"disc\",\n            \"decimal\": \"decimal\",\n            \"lowerLetter\": \"lower-alpha\",\n            \"upperLetter\": \"upper-alpha\",\n            \"lowerRoman\": \"lower-roman\",\n            \"upperRoman\": \"upper-roman\",\n        };\n\n        return mapping[format] || format;\n    }\n\n    escapeClassName(className: string) {\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\n    }\n\n    createElement = createElement;\n}\n\nfunction createElement<T extends keyof HTMLElementTagNameMap>(\n    tagName: T,\n    props: Partial<Record<keyof HTMLElementTagNameMap[T], any>> = undefined,\n    children: Node[] = undefined\n): HTMLElementTagNameMap[T] {\n    var result = Object.assign(document.createElement(tagName), props);\n    children && appendChildren(result, children);\n    return result;\n}\n\nfunction removeAllElements(elem: HTMLElement) {\n    elem.innerHTML = '';\n}\n\nfunction appendChildren(elem: HTMLElement, children: Node[]) {\n    children.forEach(c => elem.appendChild(c));\n}\n\nfunction createStyleElement(cssText: string) {\n    return createElement(\"style\", { innerHTML: cssText });\n}\n\nfunction appendComment(elem: HTMLElement, comment: string) {\n    elem.appendChild(document.createComment(comment));\n}\n\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\n    var parent = elem.parent;\n\n    while (parent != null && parent.type != type)\n        parent = parent.parent;\n\n    return <T>parent;\n}","import { ParagraphTab } from \"./document/paragraph\";\n\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\n\n    const p = elem.closest(\"p\");\n\n    const tbb = elem.getBoundingClientRect();\n    const pbb = p.getBoundingClientRect();\n    const pcs = getComputedStyle(p);\n\n    const marginLeft = parseFloat(pcs.marginLeft);\n    const textIntent = parseFloat(pcs.textIndent);\n    const pOffset = pbb.left + marginLeft;\n    let left = (tbb.left - pOffset) * pixelToPoint;\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\n\n    if(tab == null)\n        return;\n\n    let width: any = 1;\n\n    if (tab.style == \"right\") {\n        const range = document.createRange();\n        range.setStart(p.firstChild, 0);\n        range.setEndAfter(p);\n\n        const nextBB = range.getBoundingClientRect();\n        const prevRight = (nextBB.width + marginLeft + textIntent) * pixelToPoint;\n        width = `${Math.floor(tab.position.value - prevRight)}pt`;\n    } else {\n        width = `${(tab.position.value - left)}pt`;\n    }\n\n    elem.innerHTML = \"&nbsp;\";\n    elem.style.textDecoration = \"inherit\";\n    elem.style.wordSpacing = width;\n\n    switch (tab.leader) {\n        case \"dot\":\n        case \"middleDot\":\n            elem.style.textDecoration = \"underline\";\n            elem.style.textDecorationStyle = \"dotted\";\n            break;\n\n        case \"hyphen\":\n        case \"heavy\":\n        case \"underscore\":\n            elem.style.textDecoration = \"underline\";\n            break;\n    }\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { IDomNumbering } from \"../document/dom\";\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\n\nexport class NumberingPart extends Part implements NumberingPartProperties {\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    numberings: Numbering[];\n    abstractNumberings: AbstractNumbering[];\n    bulletPictures: NumberingBulletPicture[];\n    \n    domNumberings: IDomNumbering[];\n\n    parseXml(root: Element) {\n        Object.assign(this, parseNumberingPart(root, this._package.xmlParser));\n        this.domNumberings = this._documentParser.parseNumberingFile(root);  \n    }\n}","import { NumberingPicBullet } from \"../document/dom\";\nimport { ParagraphProperties, parseParagraphProperties } from \"../document/paragraph\";\nimport { parseRunProperties, RunProperties } from \"../document/run\";\nimport { XmlParser } from \"../parser/xml-parser\";\n\nexport interface NumberingPartProperties {\n    numberings: Numbering[];\n    abstractNumberings: AbstractNumbering[];\n    bulletPictures: NumberingBulletPicture[];\n}\n\nexport interface Numbering {\n    id: string;\n    abstractId: string;\n    overrides: NumberingLevelOverride[];\n}\n\nexport interface NumberingLevelOverride {\n    level: number;\n    start: number;\n    numberingLevel: NumberingLevel;\n}\n\nexport interface AbstractNumbering {\n    id: string;\n    name: string;\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\n    levels: NumberingLevel[];\n    numberingStyleLink: string;\n    styleLink: string;\n}\n\nexport interface NumberingLevel {\n    level: number;\n    start: string;\n    restart: number;\n    format: 'lowerRoman' | 'lowerLetter' | string;\n    text: string;\n    justification: string;\n    bulletPictureId: string;\n    paragraphStyle: string;\n    paragraphProps: ParagraphProperties;\n    runProps: RunProperties;\n}\n\nexport interface NumberingBulletPicture {\n    id: string;\n    referenceId: string;\n    style: string;\n}\n\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\n    let result: NumberingPartProperties = {\n        numberings: [],\n        abstractNumberings: [],\n        bulletPictures: []\n    }\n    \n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"num\":\n                result.numberings.push(parseNumbering(e, xml));\n                break;\n            case \"abstractNum\":\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\n                break;\n            case \"numPicBullet\":\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\n    let result = <Numbering>{\n        id: xml.attr(elem, 'numId'),\n        overrides: []\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"abstractNumId\":\n                result.abstractId = xml.attr(e, \"val\");\n                break;\n            case \"lvlOverride\":\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\n    let result = <AbstractNumbering>{\n        id: xml.attr(elem, 'abstractNumId'),\n        levels: []\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"name\":\n                result.name = xml.attr(e, \"val\");\n                break;\n            case \"multiLevelType\":\n                result.multiLevelType = xml.attr(e, \"val\");\n                break;\n            case \"numStyleLink\":\n                result.numberingStyleLink = xml.attr(e, \"val\");\n                break;\n            case \"styleLink\":\n                result.styleLink = xml.attr(e, \"val\");\n                break;\n            case \"lvl\":\n                result.levels.push(parseNumberingLevel(e, xml));\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\n    let result = <NumberingLevel>{\n        level: xml.intAttr(elem, 'ilvl')\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"start\":\n                result.start = xml.attr(e, \"val\");\n                break;\n            case \"lvlRestart\":\n                result.restart = xml.intAttr(e, \"val\");\n                break;\n            case \"numFmt\":\n                result.format = xml.attr(e, \"val\");\n                break;\n            case \"lvlText\":\n                result.text = xml.attr(e, \"val\");\n                break;\n            case \"lvlJc\":\n                result.justification = xml.attr(e, \"val\");\n                break;\n            case \"lvlPicBulletId\":\n                result.bulletPictureId = xml.attr(e, \"val\");\n                break;\n            case \"pStyle\":\n                result.paragraphStyle = xml.attr(e, \"val\");\n                break;\n            case \"pPr\":\n                result.paragraphProps = parseParagraphProperties(e, xml);\n                break;\n            case \"rPr\":\n                result.runProps = parseRunProperties(e, xml);\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\n    let result = <NumberingLevelOverride>{\n        level: xml.intAttr(elem, 'ilvl')\n    };\n\n    for (let e of xml.elements(elem)) {\n        switch (e.localName) {\n            case \"startOverride\":\n                result.start = xml.intAttr(e, \"val\");\n                break;\n            case \"lvl\":\n                result.numberingLevel = parseNumberingLevel(e, xml);\n                break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\n    //TODO\n    var pict = xml.element(elem, \"pict\");\n    var shape = pict && xml.element(pict, \"shape\");\n    var imagedata = shape && xml.element(shape, \"imagedata\");\n\n    return imagedata ? {\n        id: xml.attr(elem, \"numPicBulletId\"),\n        referenceId: xml.attr(imagedata, \"id\"),\n        style: xml.attr(shape, \"style\")\n    } : null;\n}","import { Length,  LengthUsage, LengthUsageType, convertLength, convertBoolean  } from \"../document/common\";\n\nexport function parseXmlString(xmlString: string, trimXmlDeclaration: boolean = false): Document {\n    if (trimXmlDeclaration)\n        xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\n    \n    const result = new DOMParser().parseFromString(xmlString, \"application/xml\");  \n    const errorText = hasXmlParserError(result);\n\n    if (errorText)\n        throw new Error(errorText);\n\n    return result;\n}\n\nfunction hasXmlParserError(doc: Document) {\n    return doc.getElementsByTagName(\"parsererror\")[0]?.textContent;\n}\n\nexport function serializeXmlString(elem: Node): string {\n    return new XMLSerializer().serializeToString(elem);\n}\n\nexport class XmlParser {\n    elements(elem: Element, localName: string = null): Element[] {\n        const result = [];\n\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\n            let c = elem.childNodes.item(i);\n\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\n                result.push(c);\n        }\n\n        return result;\n    }\n\n    element(elem: Element, localName: string): Element {\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\n            let c = elem.childNodes.item(i);\n\n            if (c.nodeType == 1 && (c as Element).localName == localName)\n                return c as Element;\n        }\n\n        return null;\n    }\n\n    elementAttr(elem: Element, localName: string, attrLocalName: string): string {\n        var el = this.element(elem, localName);\n        return el ? this.attr(el, attrLocalName) : undefined;\n    }\n\n    attr(elem: Element, localName: string): string {\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\n            let a = elem.attributes.item(i);\n\n            if (a.localName == localName)\n                return a.value;\n        }\n\n        return null;\n    }\n\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\n        var val = this.attr(node, attrName);\n        return val ? parseInt(val) : defaultValue;\n    }\n\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\n        var val = this.attr(node, attrName);\n        return val ? parseFloat(val) : defaultValue;\n    }\n\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\n        return convertBoolean(this.attr(node, attrName), defaultValue);\n    }\n\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\n        return convertLength(this.attr(node, attrName), usage);\n    }\n}\n\nconst globalXmlParser = new XmlParser();\n\nexport default globalXmlParser;","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DocumentParser } from \"../document-parser\";\nimport { IDomStyle } from \"../document/style\";\n\nexport class StylesPart extends Part {\n    styles: IDomStyle[];\n\n    private _documentParser: DocumentParser;\n\n    constructor(pkg: OpenXmlPackage, path: string, parser: DocumentParser) {\n        super(pkg, path);\n        this._documentParser = parser;\n    }\n\n    parseXml(root: Element) {\n        this.styles = this._documentParser.parseStylesFile(root);     \n    }\n}","import { OpenXmlPackage } from \"../common/open-xml-package\";\nimport { Part } from \"../common/part\";\nimport { DmlTheme, parseTheme } from \"./theme\";\n\nexport class ThemePart extends Part {\n    theme: DmlTheme;\n\n    constructor(pkg: OpenXmlPackage, path: string) {\n        super(pkg, path);\n    }\n\n    parseXml(root: Element) {\n        this.theme = parseTheme(root, this._package.xmlParser);\n    }\n}","import { XmlParser } from \"../parser/xml-parser\";\n\nexport class DmlTheme {\n    colorScheme: DmlColorScheme;\n    fontScheme: DmlFontScheme;\n}\n\nexport interface DmlColorScheme {\n    name: string;\n    colors: Record<string, string>;\n}\n\nexport interface DmlFontScheme {\n    name: string;\n    majorFont: DmlFormInfo,\n    minorFont: DmlFormInfo\n}\n\nexport interface DmlFormInfo {\n    latinTypeface: string;\n    eaTypeface: string;\n    csTypeface: string;\n}\n\nexport function parseTheme(elem: Element, xml: XmlParser) {\n    var result = new DmlTheme();\n    var themeElements = xml.element(elem, \"themeElements\");\n\n    for (let el of xml.elements(themeElements)) {\n        switch(el.localName) {\n            case \"clrScheme\": result.colorScheme = parseColorScheme(el, xml); break;\n            case \"fontScheme\": result.fontScheme = parseFontScheme(el, xml); break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseColorScheme(elem: Element, xml: XmlParser) {\n    var result: DmlColorScheme = { \n        name: xml.attr(elem, \"name\"),\n        colors: {}\n    };\n\n    for (let el of xml.elements(elem)) {\n        var srgbClr = xml.element(el, \"srgbClr\");\n        var sysClr = xml.element(el, \"sysClr\");\n\n        if (srgbClr) {\n            result.colors[el.localName] = xml.attr(srgbClr, \"val\");\n        }\n        else if (sysClr) {\n            result.colors[el.localName] = xml.attr(sysClr, \"lastClr\");\n        }\n    }\n\n    return result;\n}\n\nexport function parseFontScheme(elem: Element, xml: XmlParser) {\n    var result: DmlFontScheme = { \n        name: xml.attr(elem, \"name\"),\n    } as DmlFontScheme;\n\n    for (let el of xml.elements(elem)) {\n        switch (el.localName) {\n            case \"majorFont\": result.majorFont = parseFontInfo(el, xml); break;\n            case \"minorFont\": result.minorFont = parseFontInfo(el, xml); break;\n        }\n    }\n\n    return result;\n}\n\nexport function parseFontInfo(elem: Element, xml: XmlParser): DmlFormInfo {\n    return {\n        latinTypeface: xml.elementAttr(elem, \"latin\", \"typeface\"),\n        eaTypeface: xml.elementAttr(elem, \"ea\", \"typeface\"),\n        csTypeface: xml.elementAttr(elem, \"cs\", \"typeface\"),\n    };\n}","import { OpenXmlElement } from \"./document/dom\";\n\nexport function addElementClass(element: OpenXmlElement, className: string): string {\n    return element.className = appendClass(element.className, className);\n}\n\nexport function appendClass(classList: string, className: string): string {\n    return (!classList) ? className : `${classList} ${className}`\n}\n\nexport function splitPath(path: string): [string, string] {\n    let si = path.lastIndexOf('/') + 1;\n    let folder = si == 0 ? \"\" : path.substring(0, si);\n    let fileName = si == 0 ? path : path.substring(si);\n\n    return [folder, fileName];\n}\n\nexport function resolvePath(path: string, base: string): string {\n    try {\n        const prefix = \"file://docx/\";\n        const url = new URL(path, prefix + base).toString();\n        return url.substr(prefix.length);\n    } catch {\n        return `${base}${path}`;\n    }\n}\n\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\n    return array.reduce((a, x) => {\n        a[by(x)] = x;\n        return a;\n    }, {});\n}\n\nexport function isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target, ...sources) {\n    if (!sources.length) \n        return target;\n    \n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                const val = target[key] ?? (target[key] = {});\n                mergeDeep(val, source[key]);\n            } else {\n                target[key] = source[key];\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}","import { OutputType } from \"jszip\";\n\nimport { DocumentParser } from './document-parser';\nimport { Relationship, RelationshipTypes } from './common/relationship';\nimport { Part } from './common/part';\nimport { FontTablePart } from './font-table/font-table';\nimport { OpenXmlPackage } from './common/open-xml-package';\nimport { DocumentPart } from './document/document-part';\nimport { resolvePath, splitPath } from './utils';\nimport { NumberingPart } from './numbering/numbering-part';\nimport { StylesPart } from './styles/styles-part';\nimport { FooterPart } from \"./footer/footer-part\";\nimport { HeaderPart } from \"./header/header-part\";\nimport { ExtendedPropsPart } from \"./document-props/extended-props-part\";\nimport { CorePropsPart } from \"./document-props/core-props-part\";\nimport { ThemePart } from \"./theme/theme-part\";\nimport { FootnotesPart } from \"./footnotes/footnotes-part\";\n\nconst topLevelRels = [\n    { type: RelationshipTypes.OfficeDocument, target: \"word/document.xml\" },\n    { type: RelationshipTypes.ExtendedProperties, target: \"docProps/app.xml\" },\n    { type: RelationshipTypes.CoreProperties, target: \"docProps/core.xml\" },\n];\n\nexport class WordDocument {\n    private _package: OpenXmlPackage;\n    private _parser: DocumentParser;\n    \n    rels: Relationship[];\n    parts: Part[] = [];\n    partsMap: Record<string, Part> = {};\n\n    documentPart: DocumentPart;\n    fontTablePart: FontTablePart;\n    numberingPart: NumberingPart;\n    stylesPart: StylesPart;\n    footnotesPart: FootnotesPart;\n    themePart: ThemePart;\n    corePropsPart: CorePropsPart;\n    extendedPropsPart: ExtendedPropsPart;\n\n    static load(blob, parser: DocumentParser, options: any): Promise<WordDocument> {\n        var d = new WordDocument();\n\n        d._parser = parser;\n\n        return OpenXmlPackage.load(blob, options)\n            .then(pkg => {\n                d._package = pkg;\n\n                return d._package.loadRelationships();\n            }).then(rels => {\n                d.rels = rels;\n\n                const tasks = topLevelRels.map(rel => {\n                    const r = rels.find(x => x.type === rel.type) ?? rel; //fallback                    \n                    return d.loadRelationshipPart(r.target, r.type);\n                });\n\n                return Promise.all(tasks);\n            }).then(() => d);\n    }\n\n    save(type = \"blob\"): Promise<any> {\n        return this._package.save(type);\n    }\n\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\n        if (this.partsMap[path])\n            return Promise.resolve(this.partsMap[path]);\n\n        if (!this._package.get(path))\n            return Promise.resolve(null);\n\n        let part: Part = null;\n\n        switch(type) {\n            case RelationshipTypes.OfficeDocument:\n                this.documentPart = part = new DocumentPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.FontTable:\n                this.fontTablePart = part = new FontTablePart(this._package, path);\n                break;\n\n            case RelationshipTypes.Numbering:\n                this.numberingPart = part = new NumberingPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Styles:\n                this.stylesPart = part = new StylesPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Theme:\n                this.themePart = part = new ThemePart(this._package, path);\n                break;\n\n            case RelationshipTypes.Footnotes:\n                this.footnotesPart = part = new FootnotesPart(this._package, path, this._parser);\n                break;\n        \n            case RelationshipTypes.Footer:\n                part = new FooterPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.Header:\n                part = new HeaderPart(this._package, path, this._parser);\n                break;\n\n            case RelationshipTypes.CoreProperties:\n                this.corePropsPart = part = new CorePropsPart(this._package, path);\n                break;\n\n            case RelationshipTypes.ExtendedProperties:\n                this.extendedPropsPart = part = new ExtendedPropsPart(this._package, path);\n                break;\n        }\n\n        if (part == null)\n            return Promise.resolve(null);\n\n        this.partsMap[path] = part;\n        this.parts.push(part);\n\n        return part.load().then(() => {\n            if (part.rels == null || part.rels.length == 0)\n                return part;\n\n            const [folder] = splitPath(part.path); \n            const rels = part.rels.map(rel => {\n                return this.loadRelationshipPart(resolvePath(rel.target, folder), rel.type)\n            });\n\n            return Promise.all(rels).then(() => part);\n        });\n    }\n\n    loadDocumentImage(id: string): PromiseLike<string> {\n        return this.loadResource(this.documentPart, id, \"blob\")\n            .then(x => x ? URL.createObjectURL(x) : null);\n    }\n\n    loadNumberingImage(id: string): PromiseLike<string> {\n        return this.loadResource(this.numberingPart, id, \"blob\")\n            .then(x => x ? URL.createObjectURL(x) : null);\n    }\n\n    loadFont(id: string, key: string): PromiseLike<string> {\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\n    }\n\n    findPartByRelId(id: string, basePart: Part = null) {\n        var rel = (basePart.rels ?? this.rels).find(r => r.id == id);\n        const folder = basePart ? splitPath(basePart.path)[0] : ''; \n        return rel ? this.partsMap[resolvePath(rel.target, folder)] : null;\n    }\n\n    getPathById(part: Part, id: string): string {\n        const rel = part.rels.find(x => x.id == id);\n        const [folder] = splitPath(part.path); \n        return rel ? resolvePath(rel.target, folder) : null;\n    }\n\n    private loadResource(part: Part, id: string, outputType: OutputType) {\n        const path = this.getPathById(part, id);\n        return path ? this._package.load(path, outputType) : Promise.resolve(null);\n    }\n}\n\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\n    const len = 16;\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\n    const numbers = new Array(len);\n    \n    for(let i = 0; i < len; i ++)\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\n\n    for (let i = 0; i < 32; i++)\n        data[i] = data[i] ^ numbers[i % len]\n\n    return data;\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__290__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(771);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__290__","_zip","options","xmlParser","XmlParser","get","path","this","files","startsWith","substr","normalizePath","update","content","file","load","input","jszipOptions","base64","undefined","JSZip","loadAsync","then","zip","OpenXmlPackage","save","type","generateAsync","async","Promise","resolve","loadRelationships","relsPath","splitPath","txt","parseRelationships","parseXmlDocument","firstElementChild","parseXmlString","trimXmlDeclaration","_package","all","rels","text","xmlDoc","keepOrigin","_xmlDocument","parseXml","serializeXmlString","Part","RelationshipTypes","xml","elements","map","e","id","attr","target","targetMode","autos","shd","color","highlight","SizeType","ignoreWidth","debug","parseFootnotes","result","el","footnote","WmlFootnote","footnoteType","children","parseBodyElements","push","parseFooter","WmlFooter","parseHeader","WmlHeader","parseDocumentFile","xbody","element","background","sectPr","DomType","Document","props","parseSectionProperties","cssStyle","parseBackground","elem","colorAttr","foreach","localName","parseParagraph","parseTable","parseStylesFile","xstyles","n","parseStyle","parseDefaultStyles","node","name","basedOn","styles","c","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","boolAttr","linked","className","next","aliases","split","paragraphProps","parseParagraphProperties","runProps","parseRunProperties","parseTableStyle","s","console","warn","selector","parseNumberingFile","xnums","mapping","bullets","parseAbstractNumbering","forEach","x","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","pict","shape","imagedata","intAttr","src","style","parseNumberingLevel","level","pStyleName","pStyle","rStyle","suff","bullet","find","levelText","format","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","parseParagraphProperty","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","NoBreakHyphen","Break","break","Symbol","font","char","Tab","FootnoteReference","instrText","d","parseDrawing","run","verticalAlign","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","Emu","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","columns","parseTableColumns","parseTableProperties","width","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","FontSize","valueOfSize","parseTrHeight","valueOfStrike","parseUnderline","parseIndentation","parseFont","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","val","col","fonts","themeValue","filter","join","length","firstLine","hanging","left","start","right","end","before","after","line","lineRule","toFixed","output","DocumentParser","knownColors","cb","i","childNodes","nodeType","Node","ELEMENT_NODE","nodeName","attrName","defValue","autoColor","v","includes","themeColor","Dxa","convertSize","test","intVal","parseInt","Border","Percent","replace","valueOfBold","trim","a","b","checkMask","num","mask","parseCoreProps","CorePropsPart","title","description","subject","creator","keywords","language","lastModifiedBy","revision","parseExtendedProps","ExtendedPropsPart","safeParseToInt","value","template","pages","words","characters","application","lines","paragraphs","company","appVersion","BookmarkStart","colFirst","colLast","BookmarkEnd","ns","wordml","drawingml","picture","LengthUsage","mul","unit","Point","LineHeight","usage","endsWith","parseFloat","defaultValue","namespaceURI","fontSize","lengthAttr","pkg","parser","_documentParser","body","DocumentPart","parseCommonProperty","tabs","parseTabs","sectionProps","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","position","leader","parseRunProperty","parseColumns","numberOfColumns","space","separator","equalWidth","parseFooterHeaderReference","SectionType","section","pageSize","height","orientation","pageMargins","top","bottom","header","footer","gutter","headerRefs","footerRefs","defaultOptions","ignoreHeight","ignoreFonts","breakPages","experimental","inWrapper","ignoreLastRenderedPageBreak","renderHeaders","renderFooters","renderFootnotes","data","userOptions","ops","WordDocument","bodyContainer","styleContainer","renderer","HtmlRenderer","window","document","doc","render","parseFonts","FontTablePart","embedFontTypeMap","embedRegular","embedBold","embedItalic","embedBoldItalic","embedFontRefs","family","altName","parseEmbedFontRef","key","footerElement","FooterPart","Footer","Footnote","footnotes","FootnotesPart","headerElement","HeaderPart","Header","htmlDocument","styleMap","footnoteMap","createElement","removeAllElements","appendComment","appendChild","renderDefaultStyle","themePart","renderTheme","stylesPart","processStyles","renderStyles","numberingPart","prodessNumberings","domNumberings","renderNumbering","footnotesPart","keyBy","fontTablePart","renderFontTable","sectionElements","renderSections","documentPart","renderWrapper","appendChildren","variables","fontScheme","theme","majorFont","latinTypeface","minorFont","colorScheme","Object","entries","colors","k","cssText","styleToString","createStyleElement","fontsPart","f","ref","loadFont","fontData","cssValues","processClassName","stylesMap","baseStyle","mergeDeep","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","numberings","processElement","processTable","attrs","getOwnPropertyNames","hasOwnProperty","createSection","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","currentFootnoteIds","sectProps","sectionElement","renderStyleValues","headerPart","findHeaderFooter","footerPart","renderElements","contentElement","refs","page","findPartByRelId","isPageBreakElement","current","p","pBreakIndex","rBreakIndex","findIndex","r","bind","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","l","listStyleType","styleText","rootCounters","numberingClass","toLowerCase","loadNumberingImage","counter","numberingCounter","levelTextToContent","numFormatToCssValue","defautStyles","subStyles","linkedStyle","concat","subStyle","footnoteIds","into","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderBreak","renderContainer","renderFootnoteReference","renderChildren","elems","tagName","renderClass","renderCommonProeprties","appendClass","styleClassName","renderRunProperties","display","textIndent","loadDocumentImage","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","numformat","substring","assign","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","pcs","getComputedStyle","marginLeft","textIntent","pOffset","tab","t","range","createRange","setStart","firstChild","setEndAfter","prevRight","Math","floor","textDecoration","wordSpacing","textDecorationStyle","parseNumberingPart","NumberingPart","overrides","abstractId","parseNumberingLevelOverrride","levels","multiLevelType","numberingStyleLink","styleLink","restart","justification","bulletPictureId","paragraphStyle","numberingLevel","parseNumberingBulletPicture","referenceId","abstractNumberings","bulletPictures","xmlString","DOMParser","parseFromString","errorText","getElementsByTagName","Error","XMLSerializer","serializeToString","item","elementAttr","attrLocalName","attributes","floatAttr","convertBoolean","convertLength","globalXmlParser","StylesPart","parseTheme","ThemePart","parseColorScheme","srgbClr","sysClr","parseFontScheme","parseFontInfo","eaTypeface","csTypeface","DmlTheme","themeElements","classList","isObject","Array","isArray","si","lastIndexOf","base","prefix","URL","toString","array","by","reduce","sources","source","shift","topLevelRels","OfficeDocument","ExtendedProperties","CoreProperties","parts","partsMap","blob","_parser","tasks","rel","loadRelationshipPart","part","FontTable","Numbering","Styles","Theme","Footnotes","corePropsPart","extendedPropsPart","folder","resolvePath","loadResource","createObjectURL","Blob","deobfuscate","basePart","getPathById","outputType","guidKey","trimmed","numbers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}